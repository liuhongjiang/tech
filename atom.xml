<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[刘洪江的流水帐]]></title>
  <link href="http://liuhongjiang.github.com/tech/atom.xml" rel="self"/>
  <link href="http://liuhongjiang.github.com/tech/"/>
  <updated>2014-05-16T14:51:17+08:00</updated>
  <id>http://liuhongjiang.github.com/tech/</id>
  <author>
    <name><![CDATA[刘洪江]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[规则]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2014/05/16/rules/"/>
    <updated>2014-05-16T14:41:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2014/05/16/rules</id>
    <content type="html"><![CDATA[<p>这篇博文是由两个问题想到的。</p>

<p>一是火车票实名制后，但是仍然还是有黄牛党倒票。倒票的手法是，先用几百张身份证抢下火车票，然后联系买主，联系到买主后，在乘车时间的前一两天，在一个窗口退票，另外一个窗口买票，一退票后系统上显示有一张鱼票后，马上买入。虽然理论上还是有被其它人抢走，失手的可能，但由于该车次的票早早就买光了，临开车的前1、2天，很少会有人去查询，所以还是比较安全的。
针对这种倒票方式，设置怎样的规则杜绝呢？首先一个方法就是，退掉的票，半个小时后才能买入。这样就可以增加退掉的票被被人抢走的可能性。开车前半个小时，退掉的票可以立马买进。这样就讲黄牛党的倒票时间窗口缩短到了开车前半个小时。
复杂的规则，就还有调查哪些身份证存在大量这种买了票后，又退票的行为，并加以惩罚。例如半年内不能买车票，或在春运期间不能买火车票。但这里有个风险，就是如果黄牛党用假身份证买票，那么这条规则就会伤及到真身份证的那个无辜的人。</p>

<p>第二个问题是成都的公交车票，有两种，一种是电子钱包，就是充一定数量的钱，这个钱永远在卡里，一直可以用，主要目的是方便，不用每次乘公交都要准备零钱，而且还打9折。
还有一种是次卡，就是用前买一定数量的乘车次数，相当于打5折，而且用次卡乘车，2个小时内免费换乘公交车3次。而电子钱包换乘的时候，是要再次给钱的。对于我们这些上班族，每天上班要换乘几次的，非常划算。
但次卡有个规定，买的次数是当月有效的，一到下个月，无论你买了多少次，就作废了。我想公交公司是想用这种方式，吃点别人多充次数的油头。最开始的时候，次卡只能10块钱的倍数买，后来大家反对，于是可以1块钱的倍数买。乘公交用次卡的最低单位也是1块钱，所以基本上，公交公司就没有什么油头了。</p>

<!-- more -->

<p>但是广大人民群众是不能让公交公司占便宜的。于是大家都按照每月的次数，然后卡着次数充，或者少充一点，到了月末再买剩下不足的次数。但有保不齐因为什么原因，多用了一两次，那么就可以看到每月的最后1、2天，有人充1块钱2块钱的情况。其实这是一种资源的浪费。一是充卡点工作人员的劳动浪费，本来一次可以完成的工作，却要分成2次或者3、4次完成。当然更有甚者，家楼下就是充卡点，每天出门充个1、2块，仅仅满足当天乘公交的需求，明天的明天再充。二是每次充卡都要到充卡点去，排队交钱，充卡，快的话2、3分钟，慢的话5、6分钟，如果算上去充卡点和回来的时间，那就不止几分钟的时间了。如果每个人都浪费这几分钟，加起来，对整个社会来说就是大损失了。
所以一个坏规则的影响是难以想像的，而且往往都还不知道怎么影响的。人都是趋利的，不可能白白承受损失。但绝大多数的时候也是遵守规则的，所以人往往会在规则允许的情况下，做对自己最有利的事情。</p>

<p>对于上面的公交卡的例子，如果不改变规则，你很难改变人们充卡的方式。
改变的方法其实也很简单，最粗暴的方式是取消1个月有效期的限制，但是这将会给公交公司带来损失，因为这样的话，电子钱包就没有人买了，那部分收入就损失了。公交公司肯定不愿意的。</p>

<p>还有另外一种方式，就是每个月有几天次卡使用的重叠期，举个例子，这个月充的次卡，到下个月10号之前有效，下个月的前面几天充的次卡，是本月就可以用的，那么就有10天的重叠期，充钱的时候，就可以在本月的使用次数的基础上，多充几个天的次卡，即使我本月有什么变动，多乘了几次公交，也不会出现，卡着次数充，而月底需要再充钱的情况，同时，我也不担心要多充的那几次浪费，当然也可以杜绝大家害怕因为请个假什么的，当月少乘了几次，所有充卡的时候，估计少充1、2天的情况。</p>

<p>这样，一个简单的规则改变，可以避免上面说的临充1、2块而带来的资源浪费。</p>

<p>其实生活中有很多值得思考的问题，特别是制度的制定。有人说过：一个好的制度，让坏人做好事；一个坏的制度，让好人做坏事。如何制定一个更好的更好的更民主的政治制度，也许是我们每一个中国人应该关心的话题，和应该去读的书。</p>

<p>同样我们在实现系统时，或实现一个平台的时候，怎么设计用户的参与规则，如何避免上面讲到的两个例子问题，都应该在实现的过程中，认真思考。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go语言学习]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2013/11/25/learning-go/"/>
    <updated>2013-11-25T18:28:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2013/11/25/learning-go</id>
    <content type="html"><![CDATA[<h2 id="section">一点体会</h2>

<p>下面这篇博文是在看<a href="http://book.douban.com/subject/11577300/">《go语言编程》</a>书的笔记。
在看书的过程中，其实也没有对go语言进行深入的学习。仅仅是停留在对语法的简单了解。</p>

<p>总的来说，go语言没有它多的新东西，仅仅是将各个语言比较有特色的内容，集中到以一个语言中，而且还是基于C语言的，因为go语言的作者就是C语言的作者。哪些比较有特色的呢，例如闭包，接口，垃圾回收，还有必然语言级别支持协程。这种炒大杂烩的方式，个人感觉不可能会成功。只不过go语言已一个比较强大的干爹google，所有才多多少少掀起了几个波浪。</p>

<p>很有意思的一件事情是，虽然这个语言生在美国，生在google，但是目前go语言的社区最活跃的，还是我们中国的屌丝程序员。我认为这是一件极好的事情，说明了我们中国在IT方面对新事物的开明态度和勇于追逐，虽然成功可能不在go语言，但是有这种态度，终会有所作为。</p>

<h2 id="go">go语言简介</h2>

<p>go语言是google推出的一个可以提高并发编程的语言，它着不同一般的背景。</p>

<ul>
  <li>回溯至1969 年, 肯·汤普逊（Ken Thompson）和丹尼斯·里奇（Dennis Ritchie ）在贝尔实验室的计算科学研究中心里开发出了Unix ，还因为开发Unix而衍生——C语言。</li>
  <li>80年代，开始Plan 9 的操作系统研究项目，解决Unix 中的一些问题, 又演变出了Inferno 的项目分支，以及一个名为Limbo 的编程语言</li>
  <li>Limbo是用于开发运行在小型计算机上的分布式应用的编程语言，它支持模块化编程，编译期和运行时的强类型检查，进程内基于具有类型的通信通道，原子性垃圾收集和简单的抽象数据类型。它被设计为：即便是在没有硬件内存保护的小型设备上，也能安全运行。</li>
  <li>Limbo 语言被认为是Go语言的前身，不仅仅因为是同一批人设计的语言，而是Go语言确实从Limbo 语言中继承了众多优秀的特性。</li>
  <li>贝尔实验室后来经历了多次的动荡，包括肯·汤普逊在内的Plan 9 项目原班人马加入了Google 。在Google ，他们创造了Go语言。</li>
  <li>2007 年9月，Go语言还是这帮大牛的20% 自由时间的实验项目</li>
  <li>2008 年5月，Google 发现了Go语言的巨大潜力，从而开始全力支持这个项目</li>
  <li>2009年11 月，发布第一个版本在</li>
  <li>2012年3月28 日，发布第一个正式版本</li>
</ul>

<h2 id="go-1">go语言特性</h2>

<ul>
  <li>自动垃圾回收 </li>
  <li>更丰富的内置类型 </li>
  <li>函数多返回值 </li>
  <li>错误处理 </li>
  <li>匿名函数和闭包 </li>
  <li>类型和接口 </li>
  <li>并发编程 </li>
  <li>反射 </li>
  <li>语言交互性 (Cgo, C语言库)</li>
</ul>

<!-- more -->

<h2 id="go-2">go的工具</h2>

<ul>
  <li>编辑器
    <ul>
      <li>文本编辑工具gedit（Linux）/Notepad++ （Windows）/Fraise （Mac OS X）</li>
      <li>安装了GoClipse 插件的Eclipse ，集成性做得很好； </li>
      <li>Vim/Emacs，万能开发工具； </li>
      <li>LiteIDE，一款专为Go语言开发的集成开发环境。</li>
    </ul>
  </li>
  <li>工程管理
    <ul>
      <li>Go命令行工具</li>
    </ul>
  </li>
  <li>调试
    <ul>
      <li>FMT 输出日志/gdb</li>
    </ul>
  </li>
</ul>

<h1 id="section-1">语言</h1>

<h2 id="section-2">变量</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var  v1 int  
</span><span class="line">var  v2 string  
</span><span class="line">var  v3 [10] int     //  数组 
</span><span class="line">var  v4 [] int      //  数组切片 
</span><span class="line">var v5 struct { 
</span><span class="line">    f  int  
</span><span class="line">} 
</span><span class="line">var  v6 *int       //  指针 
</span><span class="line">var  v7 map [ string ] int  // map ，key 为string 类型，value 为int 类型 
</span><span class="line">var  v8 func(a  int ) int 
</span><span class="line">
</span><span class="line">var v1  int  = 10
</span><span class="line">var v2 = 10  //  编译器自动推导出v2 的类型 
</span><span class="line">v3 := 10  // 编译器自动推导出v3 的类型</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Go语言也引入了另一个C和C++ 中没有的符号（冒号和等号的组合:=），用于明确表达同时进行变量声明和初始化的工作。</p>

<p>go支持直接交换值</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var  v10 int  
</span><span class="line">v10 = 123 
</span><span class="line">i, j = j, i     //交换值</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">常量</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-12                 // 无类型常量
</span><span class="line">3.14159265358979323846 //  浮点类型的常量 
</span><span class="line">3.2+12i      // 复数类型的常量 
</span><span class="line">true      //  布尔类型的常量 
</span><span class="line">"foo"     //  字符串常量</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>go语言的数字类型有：
<code>int</code>、<code>uint</code>、<code>int32</code>、<code>int64</code>、<code>float32</code>、<code>float64</code>、<code>complex64</code>、<code>complex128</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">const Pi float64 = 3.14159265358979323846  
</span><span class="line">const zero = 0.0             // 无类型浮点常量 
</span><span class="line">const  (  
</span><span class="line">    size int64 = 1024 
</span><span class="line">    eof = -1                //  无类型整型常量 
</span><span class="line">)  
</span><span class="line">const u, v  float32 = 0, 3    // u = 0.0, v = 3.0，常量的多重赋值 
</span><span class="line">const a, b, c = 3, 4, "foo"   // a = 3, b = 4, c = "foo",  无类型整型和字符串常量</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-4">类型</h2>

<ul>
  <li>布尔类型：bool </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var v1 bool 
</span><span class="line">v1 = true</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>整型：int8、byte、int16 、int 、uint、uintptr等。 </li>
</ul>

<p>go语言支持位运算</p>

<p>且有一个特殊类型：uintptr: 
uintptr is an integer type that is large enough to hold the bit pattern of any pointer.</p>

<ul>
  <li>浮点类型：float32、float64。</li>
  <li>复数类型：complex64、complex128。</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var value1 complex64       //  由2 个float32构成的复数类型 
</span><span class="line">value1 = 3.2 + 12i 
</span><span class="line">value2 := 3.2 + 12i        // value2 是complex128类型 
</span><span class="line">value3 := complex(3.2, 12)  // value3结果同 value2  </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>对于一个复数z = complex(x, y) ，就可以通过Go语言内置函数real(z)获得该复数的实部，也就是x，通过imag(z)获得该复数的虚部，也就是y</p>

<ul>
  <li>字符串：string。
  Go编译器支持UTF-8 的源代码文件格式</li>
  <li>字符类型：rune。 </li>
  <li>错误类型：error 。 </li>
</ul>

<p>此外，Go语言也支持以下这些复合类型： 
* 指针（pointer ） 
* 数组（array） </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[32]byte       //  长度为32 的数组，每个元素为一个字节 
</span><span class="line">[2*N]  struct  { x, y  int32 } //  复杂类型数组 
</span><span class="line">[1000]*float64    //  指针数组 
</span><span class="line">[3][5] int      //  二维数组 
</span><span class="line">[2][2][2]float64    //  等同于[2]([2]([2]float64))</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>切片（slice ） <code>myArray[:5]</code></li>
  <li>字典（map） </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var  myMap map [ string ] PersonInfo
</span><span class="line">// myMap是声明的map 变量名，string是键的类型，PersonInfo则是其中所存放的值类型。
</span><span class="line">myMap =  make( map [ string ] PersonInfo)
</span><span class="line">myMap =  map [ string ] PersonInfo{ 
</span><span class="line">	"1234": PersonInfo{"1", "Jack", "Room 101,..."}, 
</span><span class="line">}
</span><span class="line">myMap["1234"] = PersonInfo{"1", "Jack", "Room 101,..."}
</span><span class="line">delete(myMap, "1234")
</span><span class="line">value, ok := myMap["1234"]  
</span><span class="line">if ok { // 找到了 
</span><span class="line">	// 处理找到的value  
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>通道（chan ） 
channel是Go语言在语言级别提供的goroutine 间的通信方式。我们可以使用channel在两个或多个goroutine 之间传递消息。channel是进程内的通信方式，因此通过channel传递对象的过程和调用函数时的参数传递行为比较一致，比如也可以传递指针等。</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var  ch chan int
</span><span class="line">ch :=  make( chan int )
</span><span class="line">ch &lt;- value
</span><span class="line">向channel写入数据通常会导致程序阻塞，直到有其他goroutine 从这个channel中读取数据。从channel中读取数据的语法是
</span><span class="line">value := &lt;-ch</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>结构体（struct） </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">type Rect  struct  { 
</span><span class="line">    x, y float64 
</span><span class="line">    width, height  float64 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>接口（interface ）</li>
  <li>流程控制</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if a &lt; 5 { 
</span><span class="line">    return 0 
</span><span class="line">} else { 
</span><span class="line">    return 1 
</span><span class="line">}
</span><span class="line">
</span><span class="line">switch  i { 
</span><span class="line">    case 0: 
</span><span class="line">        fmt.Printf("0") 
</span><span class="line">    case 1: 
</span><span class="line">        fmt.Printf("1") 
</span><span class="line">    case 2: 
</span><span class="line">         fallthrough 
</span><span class="line">    case 3: 
</span><span class="line">        fmt.Printf("3") 
</span><span class="line">    case 4, 5, 6: 
</span><span class="line">        fmt.Printf("4, 5, 6") 
</span><span class="line">    default: 
</span><span class="line">        fmt.Printf("Default") 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意上面的switch语句里面没有break语句</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sum := 0 
</span><span class="line">for  i := 0; i &lt; 10; i++ { 
</span><span class="line">    sum += i 
</span><span class="line">}  
</span><span class="line">
</span><span class="line">a := []int {1, 2, 3, 4, 5, 6} 
</span><span class="line">for  i, j := 0, len(a) – 1; i &lt; j; i, j = i + 1, j – 1 { 
</span><span class="line">    a[i], a[j] = a[j], a[i] 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>且go语言包含goto语句</p>

<ul>
  <li>函数</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">package mymath 
</span><span class="line">import "errors" 
</span><span class="line"> 
</span><span class="line">func Add(a int , b int ) (ret int , err error) { 
</span><span class="line">    if a &lt; 0 || b &lt; 0 { //  假设这个函数只支持两个非负数字的加法 
</span><span class="line">        err= errors.New("Should be non-negative numbers!") 
</span><span class="line">        return 
</span><span class="line">    } 
</span><span class="line"> 
</span><span class="line">    return  a + b,  nil  //  支持多重返回值 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>不定参数类型</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func myfunc(args ... int ) { 
</span><span class="line">    for  _, arg :=  range args { 
</span><span class="line">		fmt.Println(arg) 
</span><span class="line">    }  
</span><span class="line">}
</span><span class="line">
</span><span class="line">n, _ := f.Read(buf)</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>闭包</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class=""><span class="line">package main   
</span><span class="line"> 
</span><span class="line">import  ( 
</span><span class="line">	"fmt" 
</span><span class="line">)   
</span><span class="line"> 
</span><span class="line">func main() { 
</span><span class="line">    var  j  int  = 5 
</span><span class="line"> 
</span><span class="line">    a := func()( func()) { 
</span><span class="line">         var  i  int  = 10 
</span><span class="line">         return func () { 
</span><span class="line">            fmt.Printf("i, j: %d, %d\n", i, j) 
</span><span class="line">        } 
</span><span class="line">    }() 
</span><span class="line"> 
</span><span class="line">    a() 
</span><span class="line"> 
</span><span class="line">    j *= 2 
</span><span class="line"> 
</span><span class="line">    a() 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>defer
  解决释放资源的问题, 可以通过defer字段实现资源的自动释放 </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func CopyFile(dst, src string ) (w int64, err error) { 
</span><span class="line">    srcFile, err := os.Open(src) 
</span><span class="line">    if err !=  nil  { 
</span><span class="line">         return 
</span><span class="line">    } 
</span><span class="line"> 
</span><span class="line">    defer srcFile.Close() 
</span><span class="line"> 
</span><span class="line">    dstFile, err := os.Create(dstName) 
</span><span class="line">    if err !=  nil  { 
</span><span class="line">         return 
</span><span class="line">    } 
</span><span class="line"> 
</span><span class="line">    defer dstFile.Close() 
</span><span class="line"> 
</span><span class="line">    return  io.Copy(dstFile, srcFile)  
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>panic()和recover()</li>
</ul>

<p>panic()函数时，正常的函数执行流程将立即终止，但函数中之前使用defer 关键字延迟执行的语句将正常展开执行，之后该函数将返回到调用函数，并导致逐层向上执行panic流程，直至所属的goroutine 中所有正在执行的函数被终止。</p>

<p>recover()函数用于终止错误处理流程。</p>

<h2 id="section-5">面向对象</h2>

<p>对于面向对象编程的支持Go 语言设计得非常简洁而优雅。简洁之处在于，Go语言并没有沿袭传统面向对象编程中的诸多概念，比如继承、虚函数、构造函数和析构函数、隐藏的this指针等。优雅之处在于，Go语言对面向对象编程的支持是语言类型系统中的天然组成部分。整个类型系统通过接口串联，浑然一体。我们在本章中将一一解释这些特性。
类型
在Go语言中，你可以给任意类型（包括内置类型，但不包括指针类型）添加相应的方法，例如： </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">type Integer int  
</span><span class="line"> 
</span><span class="line">func (a Integer) Less(b Integer) bool { 
</span><span class="line">	return  a &lt; b 
</span><span class="line">}
</span><span class="line">
</span><span class="line">var  a Integer = 1 
</span><span class="line">if a.Less(2) { 
</span><span class="line">	fmt.Println(a, "Less 2") 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在你需要修改对象的时候，才必须用指针。它不是Go语言的约束，而是一种自然约束。
举个例子： </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func (a *Integer) Add(b Integer) { 
</span><span class="line">    *a += b 
</span><span class="line">}
</span><span class="line">a.Add(2)</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>值语义和引用语义</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var  a = [3] int {1, 2, 3} 
</span><span class="line">var  b = a 
</span><span class="line">b[1]++ 
</span><span class="line">fmt.Println(a, b)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Go语言中的大多数类型都基于值语义</p>

<p><code>基本类型</code>：如byte、int 、bool、float32、float64和string等；  </p>

<p><code>复合类型</code>：如数组（array）、结构体（struct）和指针（pointer ）等。</p>

<p>Go语言中有4个类型比较特别，看起来像引用类型</p>

<p><code>数组切片</code>：指向数组（array）的一个区间。 </p>

<p><code>map</code>：极其常见的数据结构，提供键值查询能力。 </p>

<p><code>channel</code>：执行体（goroutine ）间的通信设施。 </p>

<p><code>接口（interface ）</code>：对一组满足某个契约的类型的抽象。</p>

<ul>
  <li>结构体 </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">type Rect  struct  { 
</span><span class="line">    x, y float64 
</span><span class="line">    width, height  float64 
</span><span class="line">}
</span><span class="line">// 初始化
</span><span class="line">rect1 := new (Rect) 
</span><span class="line">rect2 := &amp;Rect{} 
</span><span class="line">rect3 := &amp;Rect{0, 0, 100, 200} 
</span><span class="line">rect4 := &amp;Rect{width: 100, height: 200}</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>匿名组合：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">type Base  struct  { 
</span><span class="line">    Name string 
</span><span class="line">} 
</span><span class="line"> 
</span><span class="line">func (base *Base) baseFoo() { ... } 
</span><span class="line">func (base *Base) baseBar() { ... }
</span><span class="line">
</span><span class="line">type Foo struct  { 
</span><span class="line">    Base 
</span><span class="line">    ... 
</span><span class="line">}
</span><span class="line">
</span><span class="line">func (foo *Foo) Bar() { 
</span><span class="line">    foo.Base.baseBar() 
</span><span class="line">    ... 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>要使某个符号对其他包（package）可见（即可以访问），需要将该符号定义为以大写字母开头</p>

<ul>
  <li>接口</li>
</ul>

<p>非侵入式接口:
将对象实例赋值给接口；将一个接口赋值给另一个接口。</p>

<p>我们定义一个Integer类型的对象实例，怎么将其赋值给LessAdder</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">type Integer int  
</span><span class="line"> 
</span><span class="line">func (a Integer) Less(b Integer) bool { 
</span><span class="line">    return  a &lt; b 
</span><span class="line">} 
</span><span class="line"> 
</span><span class="line">func (a *Integer) Add(b Integer) { 
</span><span class="line">    *a += b 
</span><span class="line">}
</span><span class="line">
</span><span class="line">type LessAdder  interface { 
</span><span class="line">    Less(b Integer) bool 
</span><span class="line">    Add(b Integer) 
</span><span class="line">}
</span><span class="line">var  a Integer = 1 
</span><span class="line">var  b LessAdder = &amp;a</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面的例子，定义了两个不同的包：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">package one 
</span><span class="line"> 
</span><span class="line">type ReadWriter interface { 
</span><span class="line">    Read(buf []byte) (n int , err error) 
</span><span class="line">    Write(buf [] byte) (n int , err error) 
</span><span class="line">}
</span><span class="line">
</span><span class="line">package two 
</span><span class="line"> 
</span><span class="line">type IStream interface { 
</span><span class="line">    Write(buf [] byte) (n int , err error) 
</span><span class="line">    Read(buf []byte) (n int , err error) 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>任何实现了one.ReadWriter接口的类，均实现了two.IStream ； </p>

<ol>
  <li>任何one.ReadWriter接口对象可赋值给two.IStream ，反之亦然； </li>
  <li>在任何地方使用one.ReadWriter接口与使用two.IStream 并无差异。 </li>
</ol>

<p>以下这些代码可编译通过： </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var  file1 two.IStream =  new (File) 
</span><span class="line">var  file2 one.ReadWriter = file1 
</span><span class="line">var  file3 two.IStream = file2</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接口查询：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if file5, ok := file1.(two.IStream); ok { 
</span><span class="line">    ... 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Any 类型</li>
</ul>

<p>由于Go语言中任何对象实例都满足空接口interface{}，所以 interface{} 看起来像是可
以指向任何对象的Any 类型，如下： </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var  v1 interface{} = 1       //  将int 类型赋值给interface{} 
</span><span class="line">var  v2 interface{} = "abc"   //  将string类型赋值给interface{} 
</span><span class="line">var  v3 interface{} = &amp;v2     //  将*interface{}类型赋值给interface{} 
</span><span class="line">var  v4 interface{} = struct { X int  }{1} 
</span><span class="line">var  v5 interface{} = &amp; struct { X int  }{1}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>fmt包中的Print定义，可以看出any类型的优势。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">func Print(a ...interface{}) (n int, err error)
</span><span class="line">func Printf(fmt string , args ...interface{}) 
</span><span class="line">func Println(args ...interface{})</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-6">并发编程</h2>

<p>并发编程的模型一般有：</p>

<ul>
  <li>多进程</li>
  <li>多线程</li>
  <li>基于回调的非阻塞/ 异步IO</li>
  <li>协程</li>
</ul>

<p><a href="http://zh.wikipedia.org/wiki/%E5%8D%8F%E7%A8%8B">协程</a><a href="http://en.wikipedia.org/wiki/Coroutine">(coroutine)</a>本质上是一种用户态线程，不需要操作系统来进行抢占式调度，且在真正的实现中寄存于线程中，因此，系统开销极小，可以有效提高线程的任务并发性，而避免多线程的缺点。使用协程的优点是编程简单，结构清晰；缺点是需要语言的支持，如果不支持，则需要用户在程序中自行实现调度器。目前，原生支持协程的语言还很少。</p>

<p>子例程(线程)的起始处是惟一的入口点，一旦退出即完成了子程序的执行，子程序的一个实例只会返回一次。
协程可以通过yield来调用其它协程。通过yield方式转移执行权的协程之间不是调用者与被调用者的关系，而是彼此对称、平等的。
协程的起始处是第一个入口点，在协程里，返回点之后是接下来的入口点。</p>

<p>以下是协程的一段伪代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">生产者协程
</span><span class="line">   loop
</span><span class="line">       while q is not full
</span><span class="line">           create some new items
</span><span class="line">           add the items to q
</span><span class="line">       yield to consume
</span><span class="line">消费者协程
</span><span class="line">   loop
</span><span class="line">       while q is not empty
</span><span class="line">           remove some items from q
</span><span class="line">           use the items
</span><span class="line">       yield to produce</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一个python的例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">h</span><span class="p">():</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&#39;Wen Chuan&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="n">m</span> <span class="o">=</span> <span class="k">yield</span> <span class="mi">5</span>  <span class="c"># Fighting!</span>
</span><span class="line">    <span class="k">print</span> <span class="n">m</span>
</span><span class="line">    <span class="n">d</span> <span class="o">=</span> <span class="k">yield</span> <span class="mi">12</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&#39;We are together!&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">c</span> <span class="o">=</span> <span class="n">h</span><span class="p">()</span>
</span><span class="line"><span class="n">m</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>  <span class="c">#m 获取了yield 5 的参数值 5</span>
</span><span class="line"><span class="n">d</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&#39;Fighting!&#39;</span><span class="p">)</span>  <span class="c">#d 获取了yield 12 的参数值12</span>
</span><span class="line"><span class="k">print</span> <span class="s">&#39;We will never forget the date&#39;</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="s">&#39;.&#39;</span><span class="p">,</span> <span class="n">d</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出结果：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">Wen</span> <span class="n">Chuan</span> <span class="n">Fighting</span><span class="err">!</span>
</span><span class="line"><span class="n">We</span> <span class="n">will</span> <span class="n">never</span> <span class="n">forget</span> <span class="n">the</span> <span class="n">date</span> <span class="mi">5</span> <span class="o">.</span> <span class="mi">12</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Go 语言在语言级别支持轻量级线程，叫goroutine 。
一个函数调用前加上go关键字，这次调用就会在一个新的goroutine 中并发执行。当被调用的函数返回时，这个goroutine 也自动结束了。需要注意的是，如果这个函数有返回值，那么这个返回值会被丢弃。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">package</span> <span class="n">main</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span>  <span class="s">&quot;fmt&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">func</span> <span class="n">Add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="nb">int</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">z</span> <span class="p">:</span><span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class="line">    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="k">for</span> <span class="n">i</span> <span class="p">:</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class="line"> 		<span class="n">go</span> <span class="n">Add</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>代码源文件</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>协程示例1 (goroutine1.go)</span> <a href="http://liuhongjiang.github.com/tech/code/2013/go/goroutine1.go">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="k">package</span> <span class="n">main</span>
</span><span class="line">
</span><span class="line"><span class="k">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class="line"><span class="k">import</span> <span class="s">&quot;time&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">func</span> <span class="n">Add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="nb">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="n">z</span> <span class="p">:=</span> <span class="n">x</span> <span class="p">+</span> <span class="n">y</span>
</span><span class="line">	<span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="k">for</span> <span class="n">i</span> <span class="p">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="p">++</span> <span class="p">{</span>
</span><span class="line">		<span class="k">go</span> <span class="n">Add</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="n">time</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="mi">2</span> <span class="p">*</span> <span class="mf">1e9</span><span class="p">)</span>
</span><span class="line">	<span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;finished&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>协程示例2 (goroutine1.go)</span> <a href="http://liuhongjiang.github.com/tech/code/2013/go/goroutine1.go">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="k">package</span> <span class="n">main</span>
</span><span class="line">
</span><span class="line"><span class="k">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class="line"><span class="k">import</span> <span class="s">&quot;time&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">func</span> <span class="n">Add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="nb">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="n">z</span> <span class="p">:=</span> <span class="n">x</span> <span class="p">+</span> <span class="n">y</span>
</span><span class="line">	<span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="k">for</span> <span class="n">i</span> <span class="p">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="p">++</span> <span class="p">{</span>
</span><span class="line">		<span class="k">go</span> <span class="n">Add</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class="line">	<span class="p">}</span>
</span><span class="line">	<span class="n">time</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="mi">2</span> <span class="p">*</span> <span class="mf">1e9</span><span class="p">)</span>
</span><span class="line">	<span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;finished&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>channel</li>
</ul>

<p>channel是Go语言在语言级别提供的goroutine 间的通信方式。我们可以使用channel在两个或多个goroutine 之间传递消息。channel是进程内的通信方式，因此通过channel传递对象的过程和调用函数时的参数传递行为比较一致，比如也可以传递指针等。</p>

<p>channel是类型相关的。也就是说，一个channel只能传递一种类型的值，这个类型需要在声明channel时指定。如果对Unix 管道有所了解的话，就不难理解channel，可以将其认为是一种类型安全的管道。</p>

<p>语法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">var</span>  <span class="n">chanName</span> <span class="n">chan</span> <span class="n">ElementType</span>
</span><span class="line"><span class="n">var</span>  <span class="n">ch</span> <span class="n">chan</span> <span class="nb">int</span>
</span><span class="line"><span class="n">var</span>  <span class="n">m</span>  <span class="nb">map</span> <span class="p">[</span> <span class="n">string</span> <span class="p">]</span> <span class="n">chan</span> <span class="nb">bool</span>
</span><span class="line"><span class="n">ch</span> <span class="p">:</span><span class="o">=</span>  <span class="n">make</span><span class="p">(</span> <span class="n">chan</span> <span class="nb">int</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在channel的用法中，最常见的包括写入和读出。将一个数据写入（发送）至channel的语法很直观，如下：</p>

<pre><code>ch &lt;- value 
</code></pre>

<p>向channel写入数据通常会导致程序阻塞，直到有其他goroutine 从这个channel中读取数据。从channel中读取数据的语法是 </p>

<pre><code>value := &lt;-ch  
</code></pre>

<p>如果channel之前没有写入数据，那么从channel中读取数据也会导致程序阻塞，直到channel中被写入数据为止。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">Select</span>
</span><span class="line"><span class="n">select</span>  <span class="p">{</span>
</span><span class="line">	<span class="n">case</span> <span class="o">&lt;-</span><span class="n">chan1</span><span class="p">:</span>
</span><span class="line">	<span class="o">//</span> <span class="err">如果</span><span class="n">chan1</span><span class="err">成功读到数据，则进行该</span><span class="n">case</span><span class="err">处理语句</span>
</span><span class="line"> 	<span class="n">case</span> <span class="n">chan2</span> <span class="o">&lt;-</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">	<span class="o">//</span> <span class="err">如果成功向</span><span class="n">chan2</span> <span class="err">写入数据，则进行该</span><span class="n">case</span><span class="err">处理语句</span>
</span><span class="line"> 	<span class="n">default</span><span class="p">:</span>
</span><span class="line">	<span class="o">//</span> <span class="err">如果上面都没有成功，则进入</span><span class="n">default</span><span class="err">处理流程</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>缓冲机制</li>
</ul>

<p>给channel带上缓冲，从而达到消息队列的效果。 要创建一个带缓冲的channel，其实也非常容易： </p>

<pre><code>c := make( chan int , 1024)
</code></pre>

<p>从带缓冲的channel中读取数据可以使用与常规非缓冲channel完全一致的方法，但我们也可以使用range关键来实现更为简便的循环读取：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">for</span>  <span class="n">i</span> <span class="p">:</span><span class="o">=</span>  <span class="nb">range</span> <span class="n">c</span> <span class="p">{</span>
</span><span class="line">    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;Received:&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>需要注意的是，在Go语言中channel本身也是一个原生类型，与map之类的类型地位一样，因此channel本身在定义后也可以通过channel来传递。</p>

<ul>
  <li>超时机制</li>
</ul>

<p>Go语言没有提供直接的超时处理机制，但我们可以利用select机制。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="o">//</span>  <span class="err">首先，我们实现并执行一个匿名的超时等待函数</span>
</span><span class="line"><span class="n">timeout</span> <span class="p">:</span><span class="o">=</span>  <span class="n">make</span><span class="p">(</span> <span class="n">chan</span> <span class="nb">bool</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="n">go</span> <span class="n">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="mf">1e9</span><span class="p">)</span> <span class="o">//</span>  <span class="err">等待</span><span class="mi">1</span><span class="err">秒钟</span>
</span><span class="line">    <span class="n">timeout</span> <span class="o">&lt;-</span> <span class="n">true</span>
</span><span class="line"><span class="p">}()</span>
</span><span class="line">
</span><span class="line"><span class="o">//</span>  <span class="err">然后我们把</span><span class="n">timeout</span><span class="err">这个</span><span class="n">channel</span><span class="err">利用起来</span>
</span><span class="line"><span class="n">select</span>  <span class="p">{</span>
</span><span class="line">	<span class="n">case</span> <span class="o">&lt;-</span><span class="n">ch</span><span class="p">:</span>
</span><span class="line">	<span class="o">//</span> <span class="err">从</span><span class="n">ch</span><span class="err">中读取到数据</span>
</span><span class="line">	<span class="n">case</span> <span class="o">&lt;-</span><span class="n">timeout</span><span class="p">:</span>
</span><span class="line">	<span class="o">//</span> <span class="err">一直没有从</span><span class="n">ch</span><span class="err">中读取到数据，但从</span><span class="n">timeout</span><span class="err">中读取到了数据</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>单向channel</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">var</span>  <span class="n">ch1</span> <span class="n">chan</span> <span class="nb">int</span>  <span class="o">//</span> <span class="n">ch1</span> <span class="err">是一个正常的</span><span class="n">channel</span><span class="err">，不是单向的</span>
</span><span class="line"><span class="n">var</span>  <span class="n">ch2</span> <span class="n">chan</span><span class="o">&lt;-</span>  <span class="n">float64</span><span class="o">//</span> <span class="n">ch2</span> <span class="err">是单向</span><span class="n">channel</span><span class="err">，只用于写</span><span class="n">float64</span><span class="err">数据</span>
</span><span class="line"><span class="n">var</span>  <span class="n">ch3</span> <span class="o">&lt;-</span><span class="n">chan</span> <span class="nb">int</span>  <span class="o">//</span> <span class="n">ch3</span> <span class="err">是单向</span><span class="n">channel</span><span class="err">，只用于读取</span><span class="nb">int</span> <span class="err">数据</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>只有在介绍了单向channel的概念后，读者才会明白类型转换对于channel的意义：就是在单向channel和双向channel之间进行转换。示例如下： </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">ch4</span> <span class="p">:</span><span class="o">=</span> <span class="n">make</span><span class="p">(</span> <span class="n">chan</span> <span class="nb">int</span> <span class="p">)</span>
</span><span class="line"><span class="n">ch5</span> <span class="p">:</span><span class="o">=</span> <span class="o">&lt;-</span><span class="n">chan</span> <span class="nb">int</span> <span class="p">(</span><span class="n">ch4</span><span class="p">)</span> <span class="o">//</span> <span class="n">ch5</span><span class="err">就是一个单向的读取</span><span class="n">channel</span>
</span><span class="line"><span class="n">ch6</span> <span class="p">:</span><span class="o">=</span> <span class="n">chan</span><span class="o">&lt;-</span>  <span class="nb">int</span> <span class="p">(</span><span class="n">ch4</span><span class="p">)</span> <span class="o">//</span> <span class="n">ch6</span>  <span class="err">是一个单向的写入</span><span class="n">channel</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>关闭channel</p>

<pre><code>close(ch)
</code></pre>

<p>关闭后：</p>

<pre><code>x, ok := &lt;-ch 
</code></pre>

<p>这个用法与map 中的按键获取value的过程比较类似，只需要看第二个bool返回值即可，如果返回值是false 则表示ch已经被关闭。</p>

<p>多核并行化，让出时间片</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>多核并行示例  (parallel.go)</span> <a href="http://liuhongjiang.github.com/tech/code/2013/go/parallel.go">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="go"><span class="line"><span class="k">type</span> <span class="n">Vector</span> <span class="p">[]</span><span class="nb">float64</span>
</span><span class="line">
</span><span class="line"><span class="c1">//  分配给每个CPU 的计算任务 </span>
</span><span class="line"><span class="k">func</span> <span class="p">(</span><span class="n">v</span> <span class="n">Vector</span><span class="p">)</span> <span class="n">DoSome</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span> <span class="nb">int</span> <span class="p">,</span> <span class="n">u</span> <span class="n">Vector</span><span class="p">,</span> <span class="n">c</span> <span class="k">chan</span> <span class="nb">int</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line"> <span class="k">for</span> <span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="p">++</span> <span class="p">{</span>
</span><span class="line">         <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">+=</span> <span class="n">u</span><span class="p">.</span><span class="n">Op</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line">     <span class="p">}</span>
</span><span class="line">     <span class="n">c</span> <span class="p">&lt;-</span> <span class="mi">1</span>          <span class="c1">//  发信号告诉任务管理者我已经计算完成了 </span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">const</span> <span class="n">NCPU</span> <span class="p">=</span> <span class="mi">16</span>      <span class="c1">// 假设总共有16 核 </span>
</span><span class="line">
</span><span class="line"><span class="k">func</span> <span class="p">(</span><span class="n">v</span> <span class="n">Vector</span><span class="p">)</span> <span class="n">DoAll</span><span class="p">(</span><span class="n">u</span> <span class="n">Vector</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">c</span> <span class="p">:=</span> <span class="nb">make</span><span class="p">(</span> <span class="k">chan</span> <span class="nb">int</span> <span class="p">,</span> <span class="n">NCPU</span><span class="p">)</span>  <span class="c1">// 用于接收每个CPU 的任务完成信号 </span>
</span><span class="line">
</span><span class="line"> <span class="k">for</span> <span class="n">i</span> <span class="p">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">NCPU</span><span class="p">;</span> <span class="n">i</span><span class="p">++</span> <span class="p">{</span>
</span><span class="line">  <span class="k">go</span> <span class="n">v</span><span class="p">.</span><span class="n">DoSome</span><span class="p">(</span><span class="n">i</span><span class="p">*</span><span class="nb">len</span><span class="p">(</span><span class="n">v</span><span class="p">)/</span><span class="n">NCPU</span><span class="p">,</span> <span class="p">(</span><span class="n">i</span><span class="p">+</span><span class="mi">1</span><span class="p">)*</span><span class="nb">len</span><span class="p">(</span><span class="n">v</span><span class="p">)/</span><span class="n">NCPU</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line"> <span class="c1">// 等待所有CPU 的任务完成 </span>
</span><span class="line"> <span class="k">for</span> <span class="n">i</span> <span class="p">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">NCPU</span><span class="p">;</span> <span class="n">i</span><span class="p">++</span> <span class="p">{</span>
</span><span class="line">    <span class="p">&lt;-</span><span class="n">c</span>    <span class="c1">//  获取到一个数据，表示一个CPU 计算完成了 </span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"> <span class="c1">// 到这里表示所有计算已经结束 </span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>同步</li>
</ul>

<p>Go语言包中的sync包提供了两种锁类型：sync.Mutex和sync.RWMutex。
RWMutex相对友好些，是经典的单写多读模型</p>

<p>Go语言提供了一个Once类型来保证全局的唯一性操作，</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">var</span> <span class="n">a</span> <span class="n">string</span>
</span><span class="line"><span class="n">var</span> <span class="n">once</span> <span class="n">sync</span><span class="o">.</span><span class="n">Once</span>
</span><span class="line">
</span><span class="line"><span class="n">func</span> <span class="n">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line"> 	<span class="n">a</span> <span class="o">=</span> <span class="s">&quot;hello, world&quot;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">func</span> <span class="n">doprint</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="n">once</span><span class="o">.</span><span class="n">Do</span><span class="p">(</span><span class="n">setup</span><span class="p">)</span>
</span><span class="line">	<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">func</span> <span class="n">twoprint</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">	<span class="n">go</span> <span class="n">doprint</span><span class="p">()</span>
</span><span class="line">	<span class="n">go</span> <span class="n">doprint</span><span class="p">()</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>goroutine 和channel 是支撑起Go语言的并发模型的基石，让Go语言在如今集群化与多核化的时代成为一道极为亮丽的风景</p>

<p>最后，看书的过程中，写的关于一些简单的go语言的例子，在<a href="https://github.com/liuhongjiang/tech/tree/source/source/code/2013/go">这里</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据结构--树]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2013/08/18/tree/"/>
    <updated>2013-08-18T00:23:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2013/08/18/tree</id>
    <content type="html"><![CDATA[<p>树，计算机中比较纠结的一种数据结构。种类太多了，涉及到的算法也太多了。主要目的是汇总一下。参考了网上的几篇博客。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<h2 id="section">二叉树</h2>

<p>就是binary tree，搜索二叉数特点：</p>

<ol>
  <li>所有非叶子结点至多拥有两个儿子（Left和Right）；</li>
  <li>所有结点存储一个关键字；</li>
  <li>非叶子结点的左指针指向小于其关键字的子树，右指针指向大于其关键字的子树；</li>
</ol>

<p>但二叉树在经过多次插入与删除后，有可能导致不同的结构, 例如下图也是一个二叉数，但是其查找效率已经是线性的了：</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2013/tree/unbalanced-b-tree.jpg" /> </p>

<p>所以，使用二叉树还要考虑尽可能让二叉树保持左图的结构，和避免右图的结构，也就是所谓的“平衡”问题； 实际使用的二叉数都是在原二叉树的基础上加上平衡算法, 即“平衡二叉树”;如何保持二叉树结点分布均匀的平衡算法是平衡二叉树的关键; 平衡算法是一种在二叉数中插入和删除结点的策略。</p>

<!-- more -->

<h2 id="section-1">平衡二叉树</h2>

<p>形态匀称的二叉树称为平衡二叉树 (Balanced binary tree), 其严格定义是：</p>

<p>一棵空树是平衡二叉树；若 T 是一棵非空二叉树，其左、右子树为 TL 和 TR ，令 hl 和 hr 分别为左、右子树的深度。当且仅当</p>

<ul>
  <li>TL 、 TR 都是平衡二叉树；</li>
  <li>并且满足公式</li>
</ul>

<script type="math/tex; mode=display">
\left| {hl - hr} \right| \leq 1
</script>

<p>时，则 T 是平衡二叉树。</p>

<p>相应地定义 $ hl － hr $ 为二叉平衡树的平衡因子 (balance factor) 。因此，平衡二叉树上所有结点的平衡因子可能是 -1 ， 0 ， 1 。换言之，若一棵二叉树上任一结点的平衡因子的绝对值都不大于 1 ，则该树是就平衡二叉树。</p>

<p>可以采用动态平衡技术保持一个平衡二叉树。构造一个平衡二叉树的时候，也可以采用相同的方法，默认初始时，是一个空树，插入节点时，通过动态平衡技术对二叉树进行调整。</p>

<p>1.动态平衡技术</p>

<p>Adelson-Velskii 和 Landis 提出了一个动态地保持二叉排序树平衡的方法，其基本思想是：
在构造二叉排序树的过程中，每当插入一个结点时，首先检查是否因插入而破坏了树的平衡性，如果是因插入结点而破坏了树的平衡性，则找出其中最小不平衡子树，在保持排序树特性的前提下，调整最小不平衡子树中各结点之间的连接关系，以达到新的平衡。通常将这样得到的平衡二叉排序树简称为 AVL 树。</p>

<p>2.最小不平衡子树</p>

<p>以离插入结点最近、且平衡因子绝对值大于 1 的结点作根结点的子树。为了简化讨论，不妨假设二叉排序树的最小不平衡子树的根结点为 A ，则调整该子树的规律可归纳为下列四种情况：</p>

<ul>
  <li>LL 型：</li>
</ul>

<p>新结点 X 插在 A 的左孩子的左子树里。调整方法见下图 (a) 。图中以 B 为轴心，将 A 结点从 B 的右上方转到 B 的右下侧，使 A 成为 B 的右孩子。</p>

<ul>
  <li>RR 型：</li>
</ul>

<p>新结点 X 插在 A 的右孩子的右子树里。调整方法见下图 (b) 。图中以 B 为轴心，将 A 结点从 B 的左上方转到 B 的左下侧，使 A 成为 B 的左孩子。</p>

<ul>
  <li>LR 型：</li>
</ul>

<p>新结点 X 插在 A 的左孩子的右子树里。调整方法见下图 (c) 。分为两步进行：第一步以 X 为轴心，将 B 从 X 的左上方转到 X 的左下侧，使 B 成为 X 的左孩子， X 成为 A 的左孩子。第二步跟 LL 型一样处理 ( 应以 X 为轴心 ) 。</p>

<ul>
  <li>RL 型：</li>
</ul>

<p>新结点 X 插在 A 的右孩子的左子树里。调整方法见图 (d) 。分为两步进行：第一步以 X 为轴心，将 B 从 X 的右上方转到 X 的右下侧，使 B 成为 X 的右孩子， X 成为 A 的右孩子。第二步跟 RR 型一样处理 ( 应以 X 为轴心 ) 。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2013/tree/avl.jpg" /></p>

<h2 id="b-">B-树</h2>

<p>具体讲解之前，有一点，再次强调下：B-树，即为B树。因为B树的原英文名称为B-tree，而国内很多人喜欢把B-tree译作B-树，其实，这是个非常不好的直译，很容易让人产生误解。如人们可能会以为B-树是一种树，而B树又是一种一种树。而事实上是，B-tree就是指的B树。特此说明。</p>

<p>我们知道，B 树是为了磁盘或其它存储设备而设计的一种多叉（下面你会看到，相对于二叉，B树每个内结点有多个分支，即多叉）平衡查找树。但在降低磁盘I/0操作方面要更好一些。</p>

<p>是一种多路搜索树（并不是二叉的）：</p>

<ol>
  <li>定义任意非叶子结点最多只有M个儿子；且M&gt;2；</li>
  <li>根结点的儿子数为[2, M]；</li>
  <li>除根结点以外的非叶子结点的儿子数为[M/2, M]；</li>
  <li>每个结点存放至少M/2-1（取上整）和至多M-1个关键字；(至少2个关键字）</li>
  <li>非叶子结点的关键字个数=指向儿子的指针个数-1；</li>
  <li>非叶子结点的关键字：K[1], K[2], …, K[M-1]；且K[i] &lt; K[i+1]；</li>
  <li>非叶子结点的指针：P[1], P[2], …, P[M]；其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树；</li>
  <li>所有叶子结点位于同一层；</li>
</ol>

<p>如（m=3):</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2013/tree/B-tree.JPG" /></p>

<p>B-树的搜索，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为空，或已经是叶子结点；</p>

<p>B-树的特性：</p>

<ol>
  <li>关键字集合分布在整颗树中；</li>
  <li>任何一个关键字出现且只出现在一个结点中；</li>
  <li>搜索有可能在非叶子结点结束；</li>
  <li>其搜索性能等价于在关键字全集内做一次二分查找；</li>
  <li>自动层次控制；</li>
  <li>可以充分利用计算机的局部性。</li>
</ol>

<p>由于限制了除根结点以外的非叶子结点，至少含有M/2个儿子，确保了结点的至少利用率，其最底搜索性能为：</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2013/tree/b-complexity.JPG" /></p>

<p>其中，M为设定的非叶子结点最多子树个数，N为关键字总数；所以B-树的性能总是等价于二分查找（与M值无关），也就没有B树平衡的问题；由于M/2的限制，在插入结点时，如果结点已满，需要将结点分裂为两个各占M/2的结点；删除结点时，需将两个不足M/2的兄弟结点合并；</p>

<h2 id="b">B+树</h2>

<p>B+树是B-树的变体，也是一种多路搜索树：</p>

<ol>
  <li>其定义基本与B-树同，除了：</li>
  <li>非叶子结点的子树指针与关键字个数相同；</li>
  <li>非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树（B-树是开区间）；</li>
  <li>为所有叶子结点增加一个链指针；</li>
  <li>所有关键字都在叶子结点出现；</li>
</ol>

<p>如：（M=3）</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2013/tree/B+tree.JPG" /></p>

<p>B+的搜索与B-树也基本相同，区别是B+树只有达到叶子结点才命中（B-树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找；</p>

<p>B+的特性：</p>

<ol>
  <li>所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；</li>
  <li>不可能在非叶子结点命中；</li>
  <li>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层；</li>
  <li>更适合文件索引系统；</li>
</ol>

<p>数据库索引采用B+树的主要原因是 B树在提高了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。正是为了解决这个问题，B+树应运而生。B+树只要遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而B树不支持这样的操作（或者说效率太低）。</p>

<h2 id="b-1">B*树</h2>

<p>是B+树的变体，在B+树的非根和非叶子结点再增加指向兄弟的指针；</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2013/tree/b-star.JPG" /></p>

<p>B*树定义了非叶子结点关键字个数至少为(2/3)*M，即块的最低使用率为2/3（代替B+树的1/2）；</p>

<p>B+树的分裂：当一个结点满时，分配一个新的结点，并将原结点中1/2的数据复制到新结点，最后在父结点中增加新结点的指针；B+树的分裂只影响原结点和父结点，而不会影响兄弟结点，所以它不需要指向兄弟的指针；</p>

<p>B*树的分裂：当一个结点满时，如果它的下一个兄弟结点未满，那么将一部分数据移到兄弟结点中，再在原结点插入关键字，最后修改父结点中兄弟结点的关键字（因为兄弟结点的关键字范围改变了）；如果兄弟也满了，则在原结点与兄弟结点之间增加新结点，并各复制1/3的数据到新结点，最后在父结点增加新结点的指针；</p>

<p>所以，B*树分配新结点的概率比B+树要低，空间使用率更高；</p>

<p>B*树在非叶子节点添加了指向兄弟的指针，对应数据库，可以方便对索引进行遍历。</p>

<h2 id="section-2">红黑树</h2>

<p>红黑树，一种二叉查找树，但在每个结点上增加一个存储位表示结点的颜色，可以是Red或Black。
通过对任何一条从根到叶子的路径上各个结点着色方式的限制，红黑树确保没有一条路径会比其他路径长出俩倍，因而是接近平衡的。</p>

<p>前面说了，红黑树，是一种二叉查找树，既然是二叉查找树，那么它必满足二叉查找树的一般性质。
下面，在具体介绍红黑树之前，咱们先来了解下 二叉查找树的一般性质：</p>

<ol>
  <li>在一棵二叉查找树上，执行查找、插入、删除等操作，的时间复杂度为O（lgn）。因为，一棵由n个结点，随机构造的二叉查找树的高度为lgn，所以顺理成章，一般操作的执行时间为O（lgn）。至于n个结点的二叉树高度为lgn的证明，可参考算法导论 第12章 二叉查找树第12.4节。</li>
  <li>但若是一棵具有n个结点的线性链，则此些操作最坏情况运行时间为O（n）。</li>
</ol>

<p>而红黑树，能保证在最坏情况下，基本的动态几何操作的时间均为O（lgn）。</p>

<p>ok，我们知道，红黑树上每个结点内含五个域，color，key，left，right，p。如果相应的指针域没有，则设为NIL。</p>

<p>一般的，红黑树，满足以下性质，即只有满足以下全部性质的树，我们才称之为红黑树：</p>

<ol>
  <li>每个结点要么是红的，要么是黑的。</li>
  <li>根结点是黑的。</li>
  <li>每个叶结点（叶结点即指树尾端NIL指针或NULL结点）是黑的。每个叶子结点都带有两个空的黑色结点（被称为黑哨兵），如果一个结点n的只有一个左孩子，那么n的右孩子是一个黑哨兵；如果结点n只有一个右孩子，那么n的左孩子是一个黑哨兵。</li>
  <li>如果一个结点是红的，那么它的俩个儿子都是黑的。也就是说在一条路径上不能出现相邻的两个红色结点。</li>
  <li>对于任一结点而言，其到叶结点树尾端NIL指针的每一条路径都包含相同数目的黑结点。</li>
</ol>

<p>如下图所示，即是一颗红黑树(下图引自wikipedia)</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2013/tree/rb.png" /> </p>

<p>关于红黑树的插入删除操作可以参考<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup><sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>.</p>

<p>通过证明可以得出红黑树的高度是 $\leq 2 \log (n + 1)$ 。</p>

<p>红黑树和之前所讲的AVL树类似，都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。自从红黑树出来后，AVL树就被放到了博物馆里，据说是红黑树有更好的效率，更高的统计性能。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>
红黑树和AVL树的区别在于它使用颜色来标识结点的高度，它所追求的是局部平衡而不是AVL树中的非常严格的平衡。AVL树的复杂比起红黑树来说简直是小巫见大巫。红黑树是真正的变态级数据结构。</p>

<h2 id="r">R树</h2>

<p>1984年，加州大学伯克利分校的Guttman发表了一篇题为“R-trees: a dynamic index structure for spatial searching”的论文，向世人介绍了R树这种处理高维空间存储问题的数据结构。本文便是基于这篇论文写作完成的，因此如果大家对R树非常有兴趣，我想最好还是参考一下原著：）。为表示对这位牛人的尊重，给个引用先：</p>

<p>Guttman, A.; “R-trees: a dynamic index structure for spatial searching,” ACM, 1984, 14</p>

<p>R树在数据库等领域做出的功绩是非常显著的。它很好的解决了在高维空间搜索等问题。举个R树在现实领域中能够解决的例子：查找20英里以内所有的餐厅。如果没有R树你会怎么解决？一般情况下我们会把餐厅的坐标(x,y)分为两个字段存放在数据库中，一个字段记录经度，另一个字段记录纬度。这样的话我们就需要遍历所有的餐厅获取其位置信息，然后计算是否满足要求。如果一个地区有100家餐厅的话，我们就要进行100次位置计算操作了，如果应用到谷歌地图这种超大数据库中，这种方法便必定不可行了。</p>

<p>R树就很好的解决了这种高维空间搜索问题。它把B树的思想很好的扩展到了多维空间，采用了B树分割空间的思想，并在添加、删除操作时采用合并、分解结点的方法，保证树的平衡性。因此，R树就是一棵用来存储高维数据的平衡树。</p>

<p>OK，接下来，本文将详细介绍R树的数据结构以及R树的操作。至于R树的扩展与R树的性能问题，可以查阅相关论文。</p>

<p>如上所述，R树是B树在高维空间的扩展，是一棵平衡树。每个R树的叶子结点包含了多个指向不同数据的指针，这些数据可以是存放在硬盘中的，也可以是存在内存中。根据R树的这种数据结构，当我们需要进行一个高维空间查询时，我们只需要遍历少数几个叶子结点所包含的指针，查看这些指针指向的数据是否满足要求即可。这种方式使我们不必遍历所有数据即可获得答案，效率显著提高。下图1是R树的一个简单实例：</p>

<p>我们在上面说过，R树运用了空间分割的理念，这种理念是如何实现的呢？R树采用了一种称为MBR(Minimal Bounding Rectangle)的方法，在此我把它译作“最小边界矩形”。从叶子结点开始用矩形（rectangle）将空间框起来，结点越往上，框住的空间就越大，以此对空间进行分割。有点不懂？没关系，继续往下看。在这里我还想提一下，R树中的R应该代表的是Rectangle（此处参考wikipedia上关于R树的介绍），而不是大多数国内教材中所说的Region（很多书把R树称为区域树，这是有误的）。我们就拿二维空间来举例。下图是Guttman论文中的一幅图：</p>

<p>我来详细解释一下这张图。先来看下图，首先我们假设所有数据都是二维空间下的点，图中仅仅标志了R8区域中的数据，也就是那个shape of data object。别把那一块不规则图形看成一个数据，我们把它看作是多个数据围成的一个区域。为了实现R树结构，我们用一个最小边界矩形恰好框住这个不规则区域，这样，我们就构造出了一个区域：R8。R8的特点很明显，就是正正好好框住所有在此区域中的数据。其他实线包围住的区域，如R9，R10，R12等都是同样的道理。这样一来，我们一共得到了12个最最基本的最小矩形。这些矩形都将被存储在子结点中。下一步操作就是进行高一层次的处理。我们发现R8，R9，R10三个矩形距离最为靠近，因此就可以用一个更大的矩形R3恰好框住这3个矩形。同样道理，R15，R16被R6恰好框住，R11，R12被R4恰好框住，等等。所有最基本的最小边界矩形被框入更大的矩形中之后，再次迭代，用更大的框去框住这些矩形。我想大家都应该理解这个数据结构的特征了。用地图的例子来解释，就是所有的数据都是餐厅所对应的地点，先把相邻的餐厅划分到同一块区域，划分好所有餐厅之后，再把邻近的区域划分到更大的区域，划分完毕后再次进行更高层次的划分，直到划分到只剩下两个最大的区域为止。要查找的时候就方便了。</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2013/tree/r-tree.jpg" /> </p>

<p>下面就可以把这些大大小小的矩形存入我们的R树中去了。根结点存放的是两个最大的矩形，这两个最大的矩形框住了所有的剩余的矩形，当然也就框住了所有的数据。下一层的结点存放了次大的矩形，这些矩形缩小了范围。每个叶子结点都是存放的最小的矩形，这些矩形中可能包含有n个数据。</p>

<p>一棵R树满足如下的性质：</p>

<ol>
  <li>
    <p>除非它是根结点之外，所有叶子结点包含有m至M个记录索引（条目）。作为根结点的叶子结点所具有的记录个数可以少于m。通常，m=M/2。</p>
  </li>
  <li>
    <p>对于所有在叶子中存储的记录（条目），I是最小的可以在空间中完全覆盖这些记录所代表的点的矩形（注意：此处所说的“矩形”是可以扩展到高维空间的）。</p>
  </li>
  <li>
    <p>每一个飞叶子结点拥有m至M个孩子结点，除非它是根结点。</p>
  </li>
  <li>
    <p>对于在非叶子结点上的每一个条目，i是最小的可以在空间上完全覆盖这些条目所代表的店的矩形（同性质2）。</p>
  </li>
  <li>
    <p>所有叶子结点都位于同一层，因此R树为平衡树。</p>
  </li>
</ol>

<p>R树是一种能够有效进行高维空间搜索的数据结构，它已经被广泛应用在各种数据库及其相关的应用中。但R树的处理也具有局限性，它的最佳应用范围是处理2至6维的数据，更高维的存储会变得非常复杂，这样就不适用了。近年来，R树也出现了很多变体，R*树就是其中的一种。这些变体提升了R树的性能，感兴趣的读者可以参考相关文献。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="http://www.cnblogs.com/oldhorse/archive/2009/11/16/1604009.html">http://www.cnblogs.com/oldhorse/archive/2009/11/16/1604009.html</a><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://blog.csdn.net/v\_july\_v/article/details/6530142">http://blog.csdn.net/v\_july\_v/article/details/6530142</a><a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="http://sjjg.js.zwu.edu.cn/SFXX/chazhao/chazhao7.3.2.html">http://sjjg.js.zwu.edu.cn/SFXX/chazhao/chazhao7.3.2.html</a><a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p><a href="http://blog.csdn.net/v_JULY_v/article/details/6105630">http://blog.csdn.net/v_JULY_v/article/details/6105630</a><a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p><a href="http://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91">http://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91</a><a href="#fnref:5" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:6">
      <p><a href="http://blog.csdn.net/yiweibin/article/details/5400202">http://blog.csdn.net/yiweibin/article/details/5400202</a><a href="#fnref:6" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lisp笔记]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2013/02/25/lisp-notes/"/>
    <updated>2013-02-25T17:31:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2013/02/25/lisp-notes</id>
    <content type="html"><![CDATA[<p>下面是在看《<a href="http://acl.readthedocs.org/en/latest/index.html">ANSI common lisp</a>》这本书和做习题的时候的一些笔记。</p>

<h2 id="lisp">lisp</h2>

<p>约翰麦卡锡和他的学生于 1958 年展开 Lisp 的初次实现工作。 Lisp 是继 FORTRAN 之后，仍在使用的最古老的程序语言。 更值得注意的是，它仍走在程序语言技术的最前面。懂 Lisp 的程序员会告诉你，有某种东西使 Lisp 与众不同。</p>

<p>Lisp 与众不同的部分原因是，它被设计成能够自己进化。你能用 Lisp 定义新的 Lisp 操作符。当新的抽象概念风行时（如面向对象程序设计），我们总是发现这些新概念在 Lisp 是最容易来实现的。Lisp 就像生物的 DNA 一样，这样的语言永远不会过时。</p>

<p>Lisp能够自己进化的特点，注定了它有很多方言存在(真的是方言，<a href="http://en.wikipedia.org/wiki/Lisp_%28programming_language%29">英语里面用的是dialects</a>)。
其中common lisp就是其中的一种方言。</p>

<p>下面几篇关于lisp的文章值得一读：</p>

<ul>
  <li>《<a href="http://www.ruanyifeng.com/blog/2010/10/why_lisp_is_superior.html">为什么Lisp语言如此先进</a>》比较系统地介绍了lisp的特点，可以一读。        </li>
  <li><a href="http://tianchunbinghe.blog.163.com/blog/static/7001200692314249376/">用sbcl,asdf和cl-launch编写可分发的lisp程序</a></li>
</ul>

<!-- more -->

<h3 id="section">默认参数</h3>

<p>使用<code>&amp;optional</code>设置函数默认参数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">(defun ha (&amp;optional (x 1))
</span><span class="line">    (list x))</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="rest">&amp;rest</h3>

<p>函数的参数<code>&amp;rest</code>关键字，返回的是一个列表，里面的元素为空，用null测试，返回nil</p>

<pre class="sh-lisp"><code>[3]&gt; (defun bb1 (&amp;rest args) (null args))
</code><code>BB1
</code><code>[4]&gt; (bb1 nil)
</code><code>NIL</code></pre>

<h3 id="append-and-push">append and push</h3>

<p><code>append</code> 会返回一个新的list，所以如果要往一个已有list中加元素，使用<code>push</code></p>

<p><code>push</code>的第二参数必须是变量</p>

<h3 id="let">let</h3>

<p>在let语句中，如果有多个赋值语句，后面的赋值语句不能应用前面赋值语句中的变量，例如下面就是有问题的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">(defun quarter-turn (arr)
</span><span class="line">    (let ((dim1 (array-dimensions arr))
</span><span class="line">          (barr (make-array dim1))) 
</span><span class="line">        (do ((i 0 (+ i 1)))
</span><span class="line">            ((= i (car dim)))
</span><span class="line">            (do ((j 0 (+ j 1)))
</span><span class="line">                ((= j (car dim)))
</span><span class="line">                (setf (aref barr i j) (aref arr j i))))
</span><span class="line">        barr))</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当中的<code>(barr (make-array dim1))</code>会报错。</p>

<p>如果希望有上面的功能，就要使用<code>let*</code></p>

<pre class="sh-lisp"><code>&gt; (let* ((x 1)
</code><code>         (y (+ x 1)))
</code><code>    (+ x y))
</code><code>3</code></pre>

<h3 id="prog">prog系列</h3>

<p><code>prog</code>系列有<code>prog prog* prog1 prog2 progn</code>。他们都处理一个代码块。<code>progn</code>为“Built-in Method Combination Types”，其余的为宏。</p>

<p><code>prog1 prog2 progn</code>的区别是使用不同的语句的返回值作为代码块的返回值，分别对应第一条语句的返回值，第二条语句的返回值和最后一条语句的返回值。</p>

<p><code>prog prog*</code> 与上面三个是不一样的，带有初始化语句，且使用return语句的返回值。<code>prog*</code>中，初始化语句按照顺序初始化，所有一个语句可以使用前面一个语句中的变量，而<code>prog</code>则不能这样。如果没有return语句，程序返回nil。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pegasos算法]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2013/01/31/svm-pegasos/"/>
    <updated>2013-01-31T11:49:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2013/01/31/svm-pegasos</id>
    <content type="html"><![CDATA[<p>本文参考了博文<a href="http://mark.reid.name/sap/online-learning-in-clojure.html">Online Learning in Clojure</a>和论文<a href="http://www.machinelearning.org/proceedings/icml2007/abstracts/587.htm">Pegasos: Primal Estimated sub-GrAdient SOlver for SVM</a>(<a href="http://www.machinelearning.org/proceedings/icml2007/papers/587.pdf">PDF</a>)</p>

<h2 id="online-learning">online learning</h2>

<p>Online learning的算法结构是非常简单的，下面的描述是监督的online learning算法框架，其中有经验损失函数$L$，样本流$S$，样本的格式为$(x,y)$:</p>

<pre><code>Initialise a starting model w
While there are more examples in S
    Get the next feature vector x
    Predict the label y' for x using the model w
    Get the true label y for x and incur a penaly L(y,y')
    Update the model w if y ≠ y'
</code></pre>

<p>一般来是，训练出来的模型都是一个与样本相同维度的向量。对应二分的分类器，往往涉及到的是计算内积$\langle w,x \rangle$，模型的更新是沿着损失函数的梯度下降方向的。</p>

<h2 id="pegasos">Pegasos</h2>

<p>论文<a href="http://www.machinelearning.org/proceedings/icml2007/abstracts/587.htm">Pegasos: Primal Estimated sub-GrAdient SOlver for SVM</a>是一种svm的online learning算法。</p>

<!-- more -->

<p>首先来看svm的经验合页损失函数：</p>

<script type="math/tex; mode=display">
\begin{array}{l}
L(w,S) = \frac{\lambda }{2}{\left\| w \right\|^2} + \frac{1}{k}\sum\limits_{(x,y) \in S} {h(w;(x,y))} \\
h(w;(x,y)) = \max \{ 0,1 - y \langle w,x \rangle \} 
\end{array}
</script>

<p>上面式子中，$k$是训练集$S$的大小，$h()$是the hinge loss（合页损失函数），$\langle w, x\rangle$表示$w,x$的内积，$\lambda$是正则化项。</p>

<p>在<a href="http://book.douban.com/subject/10590856/">《统计学习方法》</a>这本书的7.2.4证明了合页损失函数与引入松弛变量后的损失函数是等价的，并证明了$\lambda$与惩罚系数$C$是成反比的。引入松弛变量后的损失函数为:</p>

<script type="math/tex; mode=display">
\frac{1}{2}\left \| w \right \|^{2} + C\sum_{i=1}^{N}\xi _{i}
</script>

<p>训练过程中，如果遇到了一个预测错误的样本$(x,y)$, 对模型的更新方法如下：</p>

<script type="math/tex; mode=display">
{w_{t + \frac{1}{2}}} = (1 - \frac{1}{t}){w_t} + \frac{1} { {\lambda t} } yx
</script>

<p>其中$t$表示已经训练过的样本个数，$ {w_{t + \frac{1}{2}}}$表示训练过$t$个的样本后的模型，${w_{t + \frac{1}{2} }}$ 表示新模型。
根据pegasos算法，新模型的$l_2$范数如果超出了以 $\frac{1}{ {\sqrt \lambda  } }$ 为半径的超球面，那么需要将新模型投射到这个超球面上。即：</p>

<script type="math/tex; mode=display">
{w_{t + 1}} = \min \{ 1,\frac{1}{ {\sqrt \lambda  \left\| { {w_{t + \frac{1}{2} } } } \right\|}}\} {w_{t + \frac{1}{2}}}
</script>

<p>为什么需要讲新的模型投射到以$\frac{1}{ {\sqrt \lambda  } }$为半径的超球面上呢？论文证明了svm的最优解是在下面这个集合中的：</p>

<script type="math/tex; mode=display">
B = \{ w:\left\| w \right\| \le \frac{1}{ {\sqrt \lambda  } }\} 
</script>

<p>而且在pegasos算法的推导，以及模型初始化$w$的时候，都使用了条件</p>

<script type="math/tex; mode=display">
\left\| w \right\| \le \frac{1}{ {\sqrt \lambda  } }
</script>

<p>由上面模型的更新公式可以简单分析一下正则化参数$\lambda$的作用，它决定了训练过程中，后面出现的预测错误的样本，对应模型的修正程度。$\lambda$越大，修正程度越小，$\lambda$越小，修正程度越大。同时$\lambda$与惩罚系数$C$是成反比的，所以也可理解为，在训练过称中，出现预测错误样本时，对模型的惩罚程度。$\lambda$越大，惩罚越小，$\lambda$越小，惩罚越大。</p>

<p>Pegasos的算法描述在论文”Pegasos: Primal Estimated sub-GrAdient SOlver for SVM”也是给出了的，可以参考。</p>

<p>但实际上pegasos是一个线性的svm，而且还是一个没有bias的svm，训练出来的线性函数是$y=\langle w,x \rangle$，在上面的论文中的Extensions小节中也讲到了，目前pegasos还没有证明可应用于线性模型$y=\langle w,x \rangle + b$或者是非线性svm模型。</p>

<h2 id="pegasos-1">Pegasos的实现例子</h2>

<p>前面的博客<a href="http://liuhongjiang.github.com/tech/blog/2012/12/29/svm-ocr/">基于SVM的手写数字识别</a>，实现了一个基于SMO算法的svm，今天就来基于Pegasos实现数字手写识别。svm用于多分类，还是一对多的方式，手写数据还是来自<a href="http://www.manning.com/pharrington/">“Machine Learning in Action”</a>的第二章的数据。下面是实现代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>基于pegasos的数字手写识别  (pegasos.py)</span> <a href="http://liuhongjiang.github.com/tech/code/2013/pegasos/pegasos.py">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line">
</span><span class="line"><span class="c"># Pegasos implemented in Python</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">math</span>
</span><span class="line">
</span><span class="line"><span class="n">G_WEIGHT</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">parse_image</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
</span><span class="line">    <span class="n">img_map</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">fp</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fp</span><span class="p">:</span>
</span><span class="line">        <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
</span><span class="line">        <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
</span><span class="line">            <span class="n">img_map</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">ch</span><span class="p">))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">img_map</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span><span class="line">    <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="o">*</span><span class="mi">32</span><span class="p">):</span>
</span><span class="line">        <span class="n">ret</span> <span class="o">+=</span> <span class="n">model</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">ret</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">train_one_model</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">sampleNum</span><span class="p">,</span> <span class="n">modelNum</span><span class="p">):</span>
</span><span class="line">    <span class="n">pvalue</span> <span class="o">=</span> <span class="n">predict</span><span class="p">(</span><span class="n">G_WEIGHT</span><span class="p">[</span><span class="n">modelNum</span><span class="p">],</span> <span class="n">data</span><span class="p">)</span>
</span><span class="line">    <span class="c"># the hinge loss</span>
</span><span class="line">    <span class="k">if</span> <span class="n">pvalue</span> <span class="o">*</span> <span class="n">label</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span>
</span><span class="line">
</span><span class="line">    <span class="c"># update model</span>
</span><span class="line">    <span class="n">lambd</span> <span class="o">=</span> <span class="mf">0.5</span>
</span><span class="line">    <span class="n">new_weight</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="o">*</span><span class="mi">32</span><span class="p">):</span>
</span><span class="line">        <span class="c"># pegasos</span>
</span><span class="line">        <span class="n">a</span> <span class="o">=</span> <span class="n">G_WEIGHT</span><span class="p">[</span><span class="n">modelNum</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span> <span class="mi">1</span> <span class="o">-</span> <span class="mf">1.0</span><span class="o">/</span><span class="n">sampleNum</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">/</span> <span class="p">(</span><span class="n">lambd</span> <span class="o">*</span> <span class="n">sampleNum</span><span class="p">))</span><span class="o">*</span><span class="n">label</span><span class="o">*</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">        <span class="n">new_weight</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c"># projection</span>
</span><span class="line">    <span class="n">norm2</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="o">*</span><span class="mi">32</span><span class="p">):</span>
</span><span class="line">        <span class="n">norm2</span> <span class="o">+=</span> <span class="n">math</span><span class="o">.</span><span class="n">pow</span><span class="p">(</span><span class="n">new_weight</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">norm2</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">norm2</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">norm2</span> <span class="o">&gt;</span> <span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">lambd</span><span class="p">)):</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="o">*</span><span class="mi">32</span><span class="p">):</span>
</span><span class="line">            <span class="n">G_WEIGHT</span><span class="p">[</span><span class="n">modelNum</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_weight</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">/</span><span class="p">(</span><span class="n">norm2</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">lambd</span><span class="p">))</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">G_WEIGHT</span><span class="p">[</span><span class="n">modelNum</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_weight</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">train_one_sample</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="n">sampleNum</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">modelNum</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class="line">        <span class="n">label</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class="line">        <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="n">modelNum</span><span class="p">:</span>
</span><span class="line">            <span class="n">label</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">train_one_model</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">sampleNum</span><span class="p">,</span> <span class="n">modelNum</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span><span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class="line">        <span class="n">G_WEIGHT</span><span class="o">.</span><span class="n">append</span><span class="p">([])</span>
</span><span class="line">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span> <span class="o">*</span> <span class="mi">32</span><span class="p">):</span>
</span><span class="line">            <span class="n">G_WEIGHT</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">dirpath</span> <span class="o">=</span> <span class="s">&quot;./trainingDigits/&quot;</span>
</span><span class="line">    <span class="n">files</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">dirpath</span><span class="p">)</span>
</span><span class="line">    <span class="n">sampleNum</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;training:&quot;</span><span class="p">,</span> <span class="nb">file</span>
</span><span class="line">        <span class="n">data</span> <span class="o">=</span> <span class="n">parse_image</span><span class="p">(</span><span class="n">dirpath</span> <span class="o">+</span> <span class="nb">file</span><span class="p">)</span>
</span><span class="line">        <span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">file</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class="line">        <span class="n">sampleNum</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">train_one_sample</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="n">sampleNum</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c"># test</span>
</span><span class="line">    <span class="n">testdir</span> <span class="o">=</span> <span class="s">&quot;./testDigits/&quot;</span>
</span><span class="line">    <span class="n">files</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">testdir</span><span class="p">)</span>
</span><span class="line">    <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="n">wrong</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="n">can_not_classify</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span><span class="line">        <span class="n">total</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">data</span> <span class="o">=</span> <span class="n">parse_image</span><span class="p">(</span><span class="n">testdir</span> <span class="o">+</span> <span class="nb">file</span><span class="p">)</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;testing:&quot;</span><span class="p">,</span> <span class="nb">file</span>
</span><span class="line">        <span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">file</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class="line">        <span class="n">classify_failed</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class="line">            <span class="n">pvalue</span> <span class="o">=</span> <span class="n">predict</span><span class="p">(</span><span class="n">G_WEIGHT</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">data</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="n">pvalue</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">                <span class="n">classify_failed</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">                <span class="k">print</span> <span class="n">i</span><span class="p">,</span> <span class="s">&quot;prdict:&quot;</span><span class="p">,</span> <span class="mi">1</span>
</span><span class="line">                <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">num</span><span class="p">:</span>
</span><span class="line">                    <span class="n">right</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">                <span class="k">else</span><span class="p">:</span>
</span><span class="line">                    <span class="n">wrong</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="k">print</span> <span class="n">i</span><span class="p">,</span> <span class="s">&quot;prdict:&quot;</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span>
</span><span class="line">        <span class="k">if</span> <span class="n">classify_failed</span><span class="p">:</span>
</span><span class="line">            <span class="n">can_not_classify</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;right=&quot;</span><span class="p">,</span> <span class="n">right</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;wrong=&quot;</span><span class="p">,</span> <span class="n">wrong</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;can_not_classify=&quot;</span><span class="p">,</span> <span class="n">can_not_classify</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;total=&quot;</span><span class="p">,</span> <span class="n">total</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>训练出来的模型测试结果如下：</p>

<pre class="sh-bash"><code>right= 849
</code><code>wrong= 46
</code><code>can_not_classify= 72
</code><code>total= 946</code></pre>

<p>一共有946个测试样本，其中46个分类错误，72个没有找到分类，849个正确分类，正确分类率89.7%。$\lambda$取值为0.5。我也没有仔细调整$\lambda$的取值，不过看来结果还是慢不错的。但比起SMO算法实现的svm效果要差一些。但是pegasos的优势是快啊，同样的1934个训练样本，基于SMO的svm，花了3、4个小时训练，而pegasos算法只用了30多秒，逆天了。</p>

<p>实现例子的代码和数据可以<a href="https://github.com/liuhongjiang/blog_projects/tree/master/pegasos">在github上下载</a>。pegasos有两个版本，pegasos2.py是pegasos.py的升级版，用了numpy库，使得代码更精简好看，同时运行效率更高。这个目录下还包含了论文的pdf文档Pegasos.pdf。</p>

<p>PS：发现numpy和scipy、matplotlib真是好东西啊，python数学运算离不开。另外发现了一个讲numpy/scipy文档翻译为中文的网站<a href="http://pyscin.appspot.com/html/index.html">用Python做科学计算</a>，好东西啊。</p>

<p>还发现了一个和机器学习相关的网站<a href="http://hunch.net/">http://hunch.net/</a>，有很不多不错的学术方面的东西。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZooKeeper Overview]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2013/01/23/zk-overview/"/>
    <updated>2013-01-23T17:05:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2013/01/23/zk-overview</id>
    <content type="html"><![CDATA[<h2 id="zookeeper-">ZooKeeper 简介</h2>

<p>ZooKeeper是Hadoop的正式子项目，它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>Zookeeper是Google的Chubby一个开源的实现，关于Chubby，可以google一下，有论文介绍的。zookeeper是高有效和可靠的协同工作系统。Zookeeper能够用来leader选举，配置信息维护等。在一个分布式的环境中，我们需要一个Master实例或存储一些配置信息，确保文件写入的一致性等。</p>

<p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，包含一个简单的原语集，是Hadoop和Hbase的重要组件。目前提供Java和C的接口。</p>

<p>在Zookeeper中，znode是一个跟Unix文件系统路径相似的节点,可以往这个节点存储或获取数据.如果在创建znode时Flag设置为EPHEMERAL,那么当这个创建这个znode的节点和Zookeeper失去连接后,这个znode将不再存在在Zookeeper 里.Zookeeper使用Watcher察觉事件信息,当客户端接收到事件信息,比如连接超时,节点数据改变,子节点改变,可以调用相应的行为来处理数 据.Zookeeper的Wiki页面展示了如何使用Zookeeper来处理事件通知,队列,优先队列,锁,共享锁,可撤销的共享锁,两阶段提交.</p>

<p>znodes与Unix文件系统路径相似相似，但是还是不同的，znode的中间节点是可以保存数据的，对应于文件系统，就即是文件又是目录。为了达到高吞吐的能力，znode在zookeeper中是放在内存中的。</p>

<p>ZooKeeper是以Fast Paxos算法为基础的，paxos算法存在活锁的问题，即当有多个proposer交错提交时，有可能互相排斥导致没有一个proposer能提交成功，而Fast Paxos作了一些优化，通过选举产生一个leader，只有leader才能提交propose，具体算法可见Fast Paxos。因此，要想弄懂ZooKeeper首先得对Fast Paxos有所了解。</p>

<p>ZooKeeper的基本运转流程：</p>

<pre><code>1、选举Leader。
2、同步数据。
3、选举Leader过程中算法有很多，但要达到的选举标准是一致的。
4、Leader要具有最高的zxid。
5、集群中大多数的机器得到响应并follow选出的Leader。
</code></pre>

<!-- more -->

<h2 id="zookeeper-overview">ZooKeeper Overview</h2>

<h3 id="section">结构</h3>

<p>zookeeper service本身就是一个分布式集群，这一点和chubby是一样的。一个典型的集群由5个节点组成，他们之间选举出一个leader。构成zookeeper service的server有个前提条件，就是这些server是相互能够感知的。所有的server都保存了一个zookeeper的数据和状态的一个镜像，而且为了获得高吞吐能力，这个镜像是存放在内存中的。这个镜像是通过事务日志和某一时刻全部数据的快照生成的。</p>

<p>Zookeeper的客户端连接到zookeeper的server上，客户端保持一个与server之间的TCP连接，并通过这个TCP链接发送请求，获取响应，获取watch事件，和发送心跳。如果连接断掉了，那么客户端将会自动连接到另外一个server。</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2013/zk-overview/zkservice.jpg" /> </p>

<p>zookeeper的操作是有顺序的，zookeeper为每一个操作添加一个数字，通过这个数字可以体现出所有ZooKeeper transactions的顺序。后续的操作，可以通过这个种顺序去实现更上层的应用，例如同步操作。</p>

<p>zookeeper的数据模型，类似文件系统，通过定一个了Hierarchical Namespace的概念，一个name就是路径，每一个节点znode都是通过一个路径来定义的。ZooKeeper&#8217;s Hierarchical Namespace的一个示例：</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2013/zk-overview/zknamespace.jpg" /> </p>

<h3 id="section-1">节点和临时节点</h3>

<p>在zookeeper中，每个节点(znode)可以包含数据信息。就像传统的文件系统中，允许既可以是文件，又可以是目录。
zookeeper的设计目的就是存放同步信息：状态信息，配置，位置信息等等。所以每个节点存放的数据都是非常小的。具体实现是，可能是一个路径对应DB中的一项数据，例如chubby就是使用Berkeley DB来保存Node的信息。</p>

<p>znode实际上包含的是一个有状态的数据，它包含了数据变更的版本号，ACL(Access Control List)变更的版本号，时间戳。每次数据变更时，version就是增加。例如，每次客户端查找收到一个node的数据，同时还会收到这个数据的版本号。</p>

<p>znode的数据操作是原子性的，读操作将会获取znode的所有数据，写操作操作将会覆盖所有的数据。而且没有节点的都通过ACL来限制谁可以操作。</p>

<p>zookeeper还支持临时节点，当创建临时节点的session结束时，临时节点也会被zookeeper删除。例如，可以利用这种机制监控系统中有哪些client不存在了。</p>

<h3 id="conditional-updates-and-watches">Conditional updates and watches</h3>

<p>zookeeper支持watch事件，客户端可以向一个znode注册一个watch事件。当这个节点发生改变时，这个watch事件将被激活，同时被注销。当一个watch事件触发是，zookeeper将会给客户端发送一个通知消息。如果客户端和zookeeper servers直接的连接断掉了，那么客户端会收到本地的一条连接断掉的消息。</p>

<h3 id="guarantees">保证(Guarantees)</h3>

<p>zookeeper非常简单快速，它的设计目的，是在它之上可以构造复杂的服务，例如同步。那么zookeeper就应该向上提供一些保证：</p>

<ul>
  <li>序列一致性：从一个客户端发送的一系列更新操作，讲会按照发送顺序执行。</li>
  <li>原子性：更新要么成功，要么失败，没有中间状态，不会一部分成功，一部分失败。</li>
  <li>数据一致性：在客户端看来，所有的服务和数据都是一样的，无论它连接到哪个服务器。</li>
  <li>可靠性：一旦更新成功，那么这种更新将是永久性的，直到下次更新。</li>
  <li>时效性：在client看来，一个更新操作后，zookeeper将在一个固定的时间内，更新所有的zookeeper server。</li>
</ul>

<h3 id="simple-api">Simple API</h3>

<p>ZooKeeper提供了非常简单的编程接口，它仅仅支持以下操作:</p>

<ul>
  <li>create 创建一个znode节点</li>
  <li>delete 删除一个znode节点</li>
  <li>exists 测试一个znode节点是否存在</li>
  <li>get data 读取一个znode节点的数据</li>
  <li>set data 写一个znode节点的数据</li>
  <li>get children 写一个znode节点的children列表</li>
  <li>sync 等待znode节点的数据，在zookeeper server中同步</li>
</ul>

<h3 id="implementations">Implementations</h3>

<p>下图展示了ZK的模块图，这个模块图是非常顶层和概要的。除了request processor不相同以外，其余的所有的ZK service中的server都有每个模块的一模一样的副本。</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2013/zk-overview/zkcomponents.jpg" /></p>

<p>replicated database 存放了所有的数据，并且存放在内存中。所有的更新就会以日志的形式记录到磁盘中，以便可以用于灾后重建，所有的写操作，都先序列化到磁盘中，然后再写到内存中的database中。</p>

<p>每个zk server为zk clients服务，zk客户端连接到一台zk服务器上，而且只能连接到一台，并向服务器发送请求。所有的读请求，都有zk server从本地的replica database中直接获取数据。所有写请求，或是改变服务状态的请求，zk会基于一个agreement protocol进行处理。</p>

<p>agreement protocol的一部分，就是所有的来自客户端的写请求，就讲被转发到一个特定的zk server上（这个zk server被称为leader，其余的zk server称为followers）这时，所有的followers就会接收到来自leader的一个“提议消息”，并且同意这个消息。</p>

<p>替换leader或同步followers的工作是有messaging layer完成的。</p>

<h3 id="performance">Performance</h3>

<p>ZooKeeper的一个目标就是高性能。由雅虎研究院开发zookeeper的小组所做的测试实验证明了zk的高性能。下图是他们的实验结果：
ZooKeeper Throughput as the Read-Write Ratio Varies
<img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2013/zk-overview/zkperfRW-3.2.jpg" /></p>

<p>当读请求远远高于写请求时zk的性能会更好。因为写请求需要同步所有的zk server。通常情况下当读写比例为10：1时，性能就可以达到一个比较好的效果了。</p>

<h3 id="reliability">Reliability</h3>

<p>在zookeeper的介绍页面，还有关于failure的一个实验。实验表明zk在存在failure的情况下，依然可以保证比较高的吞吐能力。但更重要的是，leader选举算法可以保证系统能够很快从错误中恢复正常。在实验中观察，选举出新的leader的耗时少于200毫秒。当follower恢复正常后，zk的吞吐能力马上就上去了。</p>

<h3 id="section-2">连接库</h3>

<p>zookeeper可以通过多种方式连接，正式发布包里面包含了java和C种方式进行连接（就是客户端），C连接方式，有个库，单线程的zookeeper_st和多线程的zookeeper_mt。
zookeeper_st放弃了事件循环，可在事件驱动的应用程序中使用。而zookeeper_mt更加易用，与Java API类似，创建一个网络IO线程和一个事件分发线程，用来维护连接和执行回调。
在具体使用上，zookeeper_st仅提供了异步API与回调，用以集成至应用程序的事件循环。它只是为了支持pthread库不可用或不稳定的平台而存在，例如FreeBSD 4.x。除此以外的其他情况，应使用提供同步与异步两种API的zookeeper_mt。[^1]</p>

<p>当然还有其它语言非正式发布的连接库：<a href="https://cwiki.apache.org/confluence/display/ZOOKEEPER/ZKClientBindings">ZKClientBindings</a>。</p>

<h3 id="zk">zk集群</h3>

<p>配置zookeeper集群其实也是比较简单地的。配置方法就是standalone mode的配置文件基础上添加几个配置项，下面是一个示例：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">tickTime=2000
</span><span class="line">dataDir=/var/lib/zookeeper
</span><span class="line">clientPort=2181
</span><span class="line">initLimit=5
</span><span class="line">syncLimit=2
</span><span class="line">server.1=zoo1:2888:3888
</span><span class="line">server.2=zoo2:2888:3888
</span><span class="line">server.3=zoo3:2888:3888</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>单机版中包含了<code>tickTime</code>，<code>dataDir</code>，<code>clientPort</code>三个配置项。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<ul>
  <li>tickTime 是zk的时钟周期，单位是毫秒。Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime时间就会发送一个心跳。tickTime以毫秒为单位。</li>
  <li>dataDir 保存数据的目录，默认情况下，Zookeeper将写数据的日志文件也保存在这个目录里。</li>
  <li>clientPort 客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。</li>
</ul>

<p>在集群配置中多出来了，<code>initLimit</code>，<code>syncLimit</code>，<code>server.x</code>配置项。</p>

<ul>
  <li>initLimit 集群中的follower服务器(F)与leader服务器(L)之间初始连接时能容忍的最多心跳数（tickTime的数量）。</li>
  <li>syncLimit 集群中的follower服务器与leader服务器之间请求和应答之间能容忍的最多心跳数（tickTime的数量）。</li>
  <li>server.X  集群信息（服务器编号，服务器地址，Leader Followers通信端口，选举端口）     <br />
  这个配置项的书写格式比较特殊，规则如下：  <br />
      server.N=YYY:A:B   <br />
  其中N表示服务器编号，YYY表示服务器的IP地址，A为leader followers(LF)通信端口，表示该服务器与集群中的leader交换的信息的端口。B为选举端口，表示选举新leader时服务器间相互通信的端口（当leader挂掉时，其余服务器会相互通信，选择出新的leader），连接方式也是tcp。一般来说，集群中每个服务器的A端口都是一样，每个服务器的B端口也是一样。但是当所采用的为伪集群时（所有的zk server在一台服务器上），IP地址都一样，只能时A端口和B端口不一样。     <br />
  当一台zk服务器启动时，它通过查看myid文件，可以知道自己是这些配置中的哪一台服务器。myid文件包含了服务器的数字编号。</li>
</ul>

<h2 id="section-3">试用</h2>

<p>先装一个zookeeper Standalone来试试。安装和配置还是十分简单的，参考<a href="http://zookeeper.apache.org/doc/r3.4.5/zookeeperStarted.html">ZooKeeper Getting Started Guide</a>上面讲到地，进行就可以了。配置完后，就可以启动zookeeper了，启动命令可以参考前面的Guide。</p>

<p>zooker启动后可以使用客户端连接zookeeper service了，有两种客户端使用，一是java版，另外一个是c版的。可以先使用java版的练习一下。</p>

<p>实际上启动了java的client后，看到的是一个类是shell的交互式界面了，通过这个shell可以做很多事情，通过命令<code>help</code>来查看。</p>

<pre><code>[zkshell: 0] help
    ZooKeeper host:port cmd args
    get path [watch]
    ls path [watch]
    set path data [version]
    delquota [-n|-b] path
    quit
    printwatches on|off
    createpath data acl
    stat path [watch]
    listquota path
    history
    setAcl path acl
    getAcl path
    sync path
    redo cmdno
    addauth scheme auth
    delete path [version]
    setquota -n|-b val path
</code></pre>

<p><a href="http://zookeeper.apache.org/doc/r3.4.5/zookeeperStarted.html">ZooKeeper Getting Started Guide</a>还举一个通过zkshell进行znode的创建、查看、更新、删除等操作。</p>

<h2 id="section-4">总结</h2>

<p>上面简单介绍了zookeeper，包括zookeeper的一些概念和框架等，绝大部分是直接翻译了<a href="http://zookeeper.apache.org/doc/trunk/zookeeperOver.html">zookeeper Overview</a>。下一篇文章就讲讲<a href="http://zookeeper.apache.org/doc/r3.4.5/zookeeperProgrammers.html">ZooKeeper Programmer’s Guide</a>，当然重点是C binding。</p>

<p>在网上查找zookeeper的资料时，找到了几篇不错的文章<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup><sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup><sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>，大家可以一读。另外还找到一篇介绍google的chubby的不错的blog——<a href="http://blog.csdn.net/historyasamirror/article/details/3870168">Google利器之Chubby</a>，这个blog还写了关于google的分布式重用的5篇论文的文章，第一篇是<a href="http://blog.csdn.net/historyasamirror/article/details/3861144">Google利器之Google Cluster</a>，如果大家有兴趣可以顺着读下去看一看。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="http://baike.baidu.com/view/3061646.htm">http://baike.baidu.com/view/3061646.htm</a><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://blog.csdn.net/poechant/article/details/6650249">http://blog.csdn.net/poechant/article/details/6650249</a><a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="http://www.cnblogs.com/caosiyang/archive/2012/11/09/2763190.html">ZooKeeper编程笔记</a><a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p><a href="http://www.oschina.net/p/zookeeper">http://www.oschina.net/p/zookeeper</a><a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p><a href="http://bbs.zoomla.cn/archiver/showtopic-15086.aspx">http://bbs.zoomla.cn/archiver/showtopic-15086.aspx</a><a href="#fnref:5" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:6">
      <p><a href="http://liyanblog.cn/articles/2012/09/28/1348814456421.html">http://liyanblog.cn/articles/2012/09/28/1348814456421.html</a><a href="#fnref:6" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用https连接github]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2013/01/22/github-https/"/>
    <updated>2013-01-22T13:08:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2013/01/22/github-https</id>
    <content type="html"><![CDATA[<p>火车票插件拖垮github的事件的结果，就是github被悲催地墙掉了。愤慨啊。Fuck GFW!</p>

<p>不过有了goagent的代理，github的网站是可以上了，但是命令行上面pull，push就不灵了。新浪微博上<a href="http://www.weibo.com/neilxp">@蒋伟</a>找到了一个通过<a href="http://www.weibo.com/1791166224/zfvJvnG39">https连接github的办法</a>，总结一下如下：</p>

<ol>
  <li>安装goagent</li>
  <li>
    <p>导入ca.crt证书
 导入goagent目录下的local/CA.crt   <br />
 ubuntu导入证书    <br />
 http://askubuntu.com/questions/73287/how-do-i-install-a-root-certificate        </p>
  </li>
  <li>启动代理 python proxy.py</li>
  <li>设置代理： export HTTPS_PROXY=”http://127.0.0.1:8087”</li>
  <li>github配置，关键一步是remote add的时候，方法是：   <br />
 git remote add origin https://liuhongjiang@github.com/liuhongjiang/tech.git   <br />
 这样就可以正常地pull和push了，麻烦的是，每次都要输入秘密。      </li>
  <li>
    <p>接下来就是octopress的rake deploy了：
 需要修改Rakefile：</p>

    <pre><code> # user = repo_url.match(/:([^\/]+)/)[1]
 user = repo_url.match(/github\.com.([^\/]+)/)[1]
 # branch = (repo_url.match(/\/[\w-]+.github.com/).nil?) ? 'gh-pages' : 'master'
 branch = (repo_url.match(/\/[\w-]+\.github\.com$/).nil?) ? 'gh-pages' : 'master'
 # project = (branch == 'gh-pages') ? repo_url.match(/\/([^\.]+)/)[1] : ''
 project = (branch == 'gh-pages') ? repo_url.match(/\/([^\/^\.]+)$/)[1] : ''
</code></pre>

    <p>然后在<code>rake setup_github_pages</code>命令中填https的url地址：        <br />
 https://liuhongjiang@github.com/liuhongjiang/tech     <br />
 同样在部署的时候，还是要输入密码</p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2012]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2013/01/19/2012/"/>
    <updated>2013-01-19T16:20:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2013/01/19/2012</id>
    <content type="html"><![CDATA[<p>一直说写一篇2012年的总结，但元旦以来的这段时间忙东忙西，再加上自己的拖延症，始终没有写。今天终于鼓起勇气，下定决心，要把这篇总结写完，在旁边放了一把菜刀，写不完，不自刎谢罪，也要卸下一只胳膊。</p>

<p>2012年多多少少也是特别的一年，最主要的是那部有名的《2012》。现在庆幸时间没有终结在2012年12月21日，劫后余生。《2012》对我的影响不是那震撼的场面，也不是世界终结的恐慌，而是对人生的认识。也许明天世界就终结了，那我们应该怎么办，今天还有什么意义？12月20日那天，网上、微博上各种调侃，各种问题，五花八门。其中有个问题是这样的：明天世界都要结束了，今天晚上怎么过？各种答案，去酒吧疯狂一晚上，或者喝个天昏地暗，处男就去花点钱。我当时想的是回家早点洗洗睡了，明天还要上班啊。</p>

<p>把最后一天当成每一天度过，没有什么特别的，做自己该做的，完成该完成的，一步一步地往前走。这也许就是我2012年的寄语吧。</p>

<!-- more -->

<p>先从这一年开始的时候说起吧，从2010年8月回到成都，在诺西工作，一晃就是1年多了，当时觉得不能再呆下去了，继续下去人生就不是自己所希望的那个样子。于是在2011年年底开始找工作了。先后面试了几家公司，也拿到了几个offer，最后选择了盛大创新院，当时考虑的原因是回到互联网、回到自己熟悉的行业。于是开始了2012年精彩起伏的一年了。</p>

<p>2月10日，从诺西离职，匆匆地处理了各种私事，2月27日从成都出发到了上海。当时盛大创新院offer的工作地点是成都，但是有个条件是要先到上海工作1到2个月。
到了上海，就住在公司附近，做的工作是和网页信息抽取相关的。4月23日回到成都，和另外一个同事一起，然后招聘了几个实习生，一起带领这几个实习生做工作。当时整个大的项目是一个视频SNS网站，这个网站是很快上线了。
后来慢慢地，工作相对轻松了，我们成都几个同学就组织了一个学习小组，学习机器学习方面的知识。风雨突变，9月14日不得不离开盛大创新院，又开始了新的一轮找工作。
当时很想进入到一个移动互联网公司工作，于是投了很多简历，但是反馈都不是很好，要不是做的东西不太对口，要么就是这些公司还没有做后端的东西。总的感觉成都的移动互联网还停留在界面阶段，而且整体技术能力还比较一般。
还是没有找到好的。最后转悠的1个半月，选择了NHN成都，11月5日开始在新公司上班，选择NHN的主要考虑是，工作相对轻松一点，可以花时间做一点自己感兴趣的东西。</p>

<p>上面说得很流水帐，主要是很多事情不便细说。总得来说，还是十分感谢盛大创新院的offer，感谢在盛大创新工作的6个月时间。在6个月过得很精彩，认识了一帮大牛人，这帮人技术牛，知识牛，猥琐能力更牛，每顿饭前不讲几个黄色笑话，饭都会不香的。有的笑话很隐晦，需要好好理解一下，有个牛人就给我说：要理解，就往下想，突破一下自己的底限，你就有可能理解到了。现在写到这里，好几个笑话都从我脑袋中跳出来了，“牛蛙”、“2.5L的大可乐”、“按流量收费”、“软件园池塘的青蛙”、“大辣椒”。猥琐啊，猥琐啊。不过码农，就这点乐趣了。</p>

<p>技术上，这帮哥们也是顶呱呱的，获得过世界级竞赛的大奖，也有哥们混迹于各种论坛、开源社区，那也是一方一霸。当时的老大也是大牛人啊，喜欢给我们传道，从他哪里学习到了两点：多读书，用如何用思考的方式去完成自己的工作，任何工作只要你认真思考，总会找到可以创新的地方，任何工作都要做到极致。成都的另外一位同事也是我学习的对象，对技术的热爱和执着，知识面很广。</p>

<p>这份工作给我带来了两点，一是开始有意识地看书，构建自己的知识框架了。二是明白做事要踏踏实实，执着。看到这些同事，对新技术的追求，超强的学术能力，勤奋地工作态度，猥琐的世界观，让我明白了自己与别人的差距，要想成功，只有多学习，勤奋工作，执着地甚至固执地追求新技术新知识。</p>

<p>来到NHN在11月开始搭建了这个blog，并开始记录blog，主要是两部份，技术相关，生活相关。一来可以记录自己的技术和生活，二来可以督促自己学习，三可以锻炼自己的写作能力，说不定那天可以写本书。这个blog不是写给别人看的，写给自己纪念的。</p>

<p>2013年，我对自己也没有什么特别的要求，多读书，多学习一些技术，思考自己希望的生活和工作的方式，为了能过上这样的生活和工作努力。</p>

<p>2012年，还是跌宕起伏的一年。学习了很多，提高了很多，自己的人生观也改变了许多。中间八九月份还有创业的冲动，但最后还是找了个工作，但是这种冲动从未消失，各种想法在脑袋里面碰撞，但似乎自己缺乏跨出第一步的勇气，希望2013年不是这样。</p>

<p>What will happen in 2013? We will see.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[霸道算法和环选举算法]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2013/01/18/simple-master-election/"/>
    <updated>2013-01-18T17:44:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2013/01/18/simple-master-election</id>
    <content type="html"><![CDATA[<p>现在主流的分布式集群一致性问题大多都吸收了PAXOS算法<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>的思想。然而，如果完全按照Leslie Lamport的论文<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，实现复杂度比较高。因此，大多数实现都采用PAXOS的某种变形。Lamport的重要贡献，献是把分布式一致性的问题，形式化并给出了证明，给出了理论指导。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p>关于Paxos算法，在网上看到了一个Fast Paxos算法，见淘宝核心系统团队博客, <a href="http://rdc.taobao.com/blog/cs/?p=162">paxos 实现</a></p>

<p>Paxos算法看起来还是很复杂的，没有仔细研究，倒是在网上另外找到了两个简单的master选举算法。</p>

<h2 id="section">霸道算法</h2>

<p>Garcia-Monila 在 1982 年的一篇论文中发明了所谓的霸道选举算法（Bully Algorithm）<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>。当一个进程 P 发现协调者进程不再响应时，这个进程就召集选举。由于进程的独立性，在同一个时刻，系统中可能有多个召集选举的过程。假设 P 是召集选举的进程，每个召集选举的过程如下：</p>

<ol>
  <li>P 向所有比自己编号大的进程发送一条 ELECTION（选举）消息。</li>
  <li>如果 P 得不到任何回复，则 P 赢得选举，P 向所有进程发送 COORDINATOR（协调者）消息，宣布自己的胜利。</li>
  <li>如果 P 得到任何一个回复，回复一定来自于比自己编号大的进程。P 的召集选举的工作结束，因为 P 此时已经不可能赢得选举。 </li>
</ol>

<!-- more -->

<p>其他进程或正在召集选举，或可能接收到比自己编号小的进程的 ELECTION 消息。当它收到一个 ELECTION 后，它回复一个 OK 消息给发送消息的进程；如果这时它还不是召集选举的进程，它也将开始一个召集选举的过程，即执行 1 到 3 的操作。
拥有最大编号的进程不召集选举，它直接发送 COORDINATOR 消息宣布胜利，霸道算法的名字由此得来。</p>

<h3 id="section-1">环选举算法</h3>

<p>关于选举的另一个著名算法是基于进程环的机制设计的。与一般的环算法不同的是，环选举算法并不使用令牌。在这个算法中，我们假设所有进程能够在物理上或逻辑上组成一个环结构，每个进程都保留一个按进程编号逻辑排序的一个表，因此知道自己的所有后继进程。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p>

<p>算法的过程非常简单。当一个进程 P 注意到协调者进程不再工作时，它将启动一个召集选举的过程：</p>

<ol>
  <li>进程 P 构造一个包含自己进程编号的 ELECTION 给后继进程，如果直接后继进程没有响应，进程 P 就将消息发送给环上的下一个进程，直到找到一个正常运行的进程。</li>
  <li>接收到 ELECTION 消息的进程将自己的编号增加到 ELECTION 消息中，然后按照同样的方式将消息发送给后继进程。这样，消息在环上的传递将构造一个包含所有正常运行的进程的编号表。</li>
  <li>当 ELECTION 消息最后回到召集选举的进程时，消息中最大编号的进程即成为选举的胜利者。召集选举的进程将消息类型改为 COORDINATOR，然后将消息沿着环重新发送一次，将选举结果通知所有的进程。</li>
  <li>当 COORDINATOR 消息重新回到召集选举的进程时，算法终止。 </li>
</ol>

<p>同样，在环选举算法中，也可能同时存在多个召集选举的过程。当在这个时刻环结构不变时，最后的结果也是一致的，只是消息数量多一些，并无大碍。</p>

<h2 id="section-2">选举算法的讨论</h2>

<p>霸道选举算法和环选举算法都依赖一系列苛刻的假设：</p>

<ol>
  <li>假设了可靠的通道通信，更进一步的假设是系统中任何两个进程之间都可以通信。</li>
  <li>每个进程都知道其他进程的编号，也就是说算法依赖一个全局的数据。</li>
  <li>在多个并发召集选举的过程中，进程组的正常进程数量保持稳定，而且在环选举算法中，环结构也必须稳定。</li>
  <li>假设进程能够明确地判断出一个正常运行的进程和一个已经崩溃的进程。 </li>
</ol>

<p>有很多放宽假设条件下如何改进算法的讨论，但就算法的应用来说，召集选举的过程不应该是很频繁的，参与选举的进程数量和结构应该是相对稳定的。我们看不到频繁故障下的频繁选举的应用价值。因此，虽然算法的适用条件比较苛刻，但它们基本能够满足应用的需求。[^5]</p>

<h2 id="section-3">一种多进程霸道算法实现</h2>

<p>常常有这样的场景，在同一台主机上运行着多个进程，这些进程需要选举一个master进行管理工作，但是总体场景比较简单，环境也不是很复杂，这种情况下可以使用文件锁并结合霸道算法来实现master进程的选举。</p>

<p>文件锁可以用于进程间的同步，它支持读锁和写锁。具体算法如下：</p>

<p>假设：</p>

<ul>
  <li>有固定的一个路径下的文件file，用于选举和保存每个进程的通信端口。</li>
  <li>进程编号单调递增的。</li>
  <li>进程通过TCP方式通信，当然也可以采用其它方式通信，例如共享内存的方式。</li>
</ul>

<p>进程启动时：</p>

<ol>
  <li>对于一个进程启动后，检查固定的文件file，如果没有该文件不存在，创建该文件file，加写锁，执行第2步；如果存在，执行第3步，</li>
  <li>并声明自己为master，为自己分配编号1，将自己的端口、编号和master身份写入文件中。如果还有其它进程存在，为其它进程分配编号，向其它进程声明自己为master，并将其它进程的端口和编号写入file。算法结束。</li>
  <li>对文件file加写锁，如果加锁成功，读取文件中的port信息，然后向文件中的所有进程询问是否有进程存活，如果有进程响应，表明这些进程正在选举，等待新的master产生，有了新master后，该进程向master注册，进程结束；如果没有进程响应，则清空文件，执行第2步。如果加锁不成功，向master注册，算法结束。</li>
</ol>

<p>向master注册时：</p>

<ol>
  <li>进程A向master提交自己的端口号，master为进程A分配一个编号，master将进程A的端口号和编号写入file中，并进程A的端口通知给其它进程。</li>
</ol>

<p>系统中，每个进程都维持着一张当前所有进程的表，每个进程都定期向所有的进程发送心跳数据。</p>

<p>当master无相应时：</p>

<ol>
  <li>感知到master无响应时，发起master选举，直到产生新的master进程。</li>
  <li>新的master先创建一个file副本，然后加写锁，用副本替换file，然后所有进程的编号和端口写入到file文件中，并通知所有的进程自己为master，当然这时也可以重置所有的进程编号。</li>
</ol>

<p>以上是我设想的一个算法，现在仅仅是一个思路，没有经过验证，慎用。
关于文件锁，我也写了一个简单的<a href="https://github.com/liuhongjiang/blog_projects/tree/master/file-lock">文件锁测试程序</a>。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>wikipedia, <a href="http://en.wikipedia.org/wiki/Paxos_%28computer_science%29">Paxos (computer science)</a><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Leslie Lamport, Paxos Made Simple, 1, Nov, 2001.<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>DLite, <a href="http://blog.csdn.net/dlite/article/details/8064073">一种集群Master节点选举算法</a><a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>wikipedia, <a href="http://en.wikipedia.org/wiki/Bully_algorithm">Bully algorithm</a><a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p>sahusoft, <a href="http://blog.csdn.net/sahusoft/article/details/7032604">分布式系统进程的选举</a><a href="#fnref:5" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux命令行提示符配置]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2013/01/16/shell-prompting/"/>
    <updated>2013-01-16T09:29:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2013/01/16/shell-prompting</id>
    <content type="html"><![CDATA[<p>linux下shell提示符可以任意配置的。</p>

<p>首先看看bash的配置文件，一般在用户的HOME目录下有这样几个文件<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>：</p>

<ul>
  <li>.bash_history ：记录了您以前输入的命令，</li>
  <li>.bash_logout ：当您退出 shell 时，要执行的命令，</li>
  <li>.bash_profile ：当您登入 shell 时，要执行的命令，</li>
  <li>.bashrc ：每次打开新的 shell 时，要执行的命令。</li>
</ul>

<p>这些文件是每一位用户的设置。系统级的设置存储在’/etc/profile’、’/etc/bashrc’及目录’/etc/profile.d’下的文件中。但您得习惯用各自的配置文件：编辑不需要’root’权限，还可以使您的设置更有个性。当系统级与用户级的设置发生冲突时，将采用用户的设置。</p>

<p>每次当您打开一个控制台(console)或 xterm 时，最先看到的就是提示符(prompt)，类似于：</p>

<pre class="sh-bash"><code>account@hostname ~ $</code></pre>

<p>在默认设置下，提示符将显示您的用户名、主机名（默认是’localhost’）、当前所在目录（在Unix中，’~’表示您的home目录）。
按照传统，最后一个字符可以标识您是普通用户（<code>$</code>），还是’root’（<code>#</code>）。
您可以通过 <code>$PS1</code>, <code>$PS2</code> 变量来设置提示符，<code>$PS2</code>是当在多行内输入一个命令时，换行后，出现的提示符。命令</p>

<!-- more -->

<pre class="sh-bash"><code>andrew@ubuntu:~/lhj-github/tech$ echo $PS1
</code><code>${debian_chroot:+($debian_chroot)}\u@\h:\w\$
</code><code>andrew@ubuntu:~/lhj-github/tech$ echo $PS2
</code><code>&gt;</code></pre>

<p>将显示当前的设定。其中可用字符的含义在 man bash 的’PROMPTING’部分有说明，PROMPTING部分的翻译</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">提示符<span class="o">(</span>PROMPTING<span class="o">)</span>
</span><span class="line">    在 交互执行时， bash 在准备好读入一条命令时显示主提示符 PS1，在需要更多的输入来完成一条命令时显示 PS2。 Bash 允许通过插入一些反斜杠转义的特
</span><span class="line">    殊字符来定制这些提示字符串，这些字符被如下解释：
</span><span class="line">        <span class="se">\a</span>     一个 ASCII 响铃字符 <span class="o">(</span>07<span class="o">)</span>
</span><span class="line">        <span class="se">\d</span>     日期，格式是 <span class="s2">&quot;星期 月份 日&quot;</span> <span class="o">(</span>例如，<span class="s2">&quot;Tue May 26&quot;</span><span class="o">)</span>
</span><span class="line">        <span class="se">\D</span><span class="o">{</span>format<span class="o">}</span>
</span><span class="line">               format 被传递给 strftime<span class="o">(</span>3<span class="o">)</span>，结果被插入到提示字符串中；空的 format 将使用语言环境特定的时间格式。花括号是必需的
</span><span class="line">        <span class="se">\e</span>     一个 ASCII 转义字符 <span class="o">(</span>033<span class="o">)</span>
</span><span class="line">        <span class="se">\h</span>     主机名，第一个 ‘.’ 之前的部分
</span><span class="line">        <span class="se">\H</span>     主机名
</span><span class="line">        <span class="se">\j</span>     shell 当前管理的作业数量
</span><span class="line">        <span class="se">\l</span>     shell 的终端设备名的基本部分
</span><span class="line">        <span class="se">\n</span>     新行符
</span><span class="line">        <span class="se">\r</span>     回车
</span><span class="line">        <span class="se">\s</span>     shell 的名称， <span class="nv">$0</span> 的基本部分 <span class="o">(</span>最后一个斜杠后面的部分<span class="o">)</span>
</span><span class="line">        <span class="se">\t</span>     当前时间，采用 24小时制的 HH:MM:SS 格式
</span><span class="line">        <span class="se">\T</span>     当前时间，采用 12小时制的 HH:MM:SS 格式
</span><span class="line">        <span class="se">\@</span>     当前时间，采用 12小时制上午/下午 <span class="o">(</span>am/pm<span class="o">)</span> 格式
</span><span class="line">        <span class="se">\A</span>     当前时间，采用 24小时制上午/下午格式
</span><span class="line">        <span class="se">\u</span>     当前用户的用户名 the username of the current user
</span><span class="line">        <span class="se">\v</span>     bash 的版本 <span class="o">(</span>例如，2.00<span class="o">)</span>
</span><span class="line">        <span class="se">\V</span>     bash 的发行编号，版本号加补丁级别 <span class="o">(</span>例如，2.00.0<span class="o">)</span>
</span><span class="line">        <span class="se">\w</span>     当前工作目录
</span><span class="line">        <span class="se">\W</span>     当前工作目录的基本部分
</span><span class="line">        <span class="se">\!</span>     此命令的历史编号
</span><span class="line">        <span class="se">\#</span>     此命令的命令编号
</span><span class="line">        <span class="se">\$</span>     如果有效 UID 是 0，就是 <span class="c">#, 其他情况下是 $</span>
</span><span class="line">        <span class="se">\n</span>nn   对应八进制数 nnn 的字符
</span><span class="line">        <span class="se">\\</span>     一个反斜杠
</span><span class="line">        <span class="se">\[</span>     一个不可打印字符序列的开始，可以用于在提示符中嵌入终端控制序列
</span><span class="line">        <span class="se">\]</span>     一个不可打印字符序列的结束
</span><span class="line">
</span><span class="line">    命令编号和历史编号通常是不同的：历史编号是命令在历史列表中的位置，可能包含从历史文件中恢复的命令 <span class="o">(</span>参见下面的 HISTORY 历史章节<span class="o">)</span>，而命令编 号
</span><span class="line">    是 当 前 shell 会话中执行的命令序列中，命令的位置。字符串被解码之后，它将进行扩展，要经过 parameter expansion, <span class="nb">command </span>substitution, arith‐
</span><span class="line">    metic expansion 和 quote removal, 最后要经过 shell 选项 promptvars 处理 <span class="o">(</span>参见下面的 shell 内建命令<span class="o">(</span>SHELL BUILTIN COMMANDS<span class="o">)</span> 章节中，对 命 令
</span><span class="line">    <span class="nb">shopt</span> 的描述<span class="o">)</span>。
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>例如一个默认的<code>$PS1</code>设置如下：</p>

<pre class="sh-bash"><code>andrew@ubuntu:~/lhj-github/tech$ echo $PS1
</code><code>${debian_chroot:+($debian_chroot)}\u@\h:\w\$</code></pre>

<p>前面这部分<code>${debian_chroot:+($debian_chroot)}</code>是ubuntu一种特殊的运行程序的方式，可以参考<sup id="fnref:3"><a href="#fn:3" rel="footnote">2</a></sup><sup id="fnref:4"><a href="#fn:4" rel="footnote">3</a></sup>，和我们要讲的内容没有什么关系。后面这部分<code>\u@\h:\w\$</code>就是shell prompting的配置了，可以根据上面的内容翻译出来。我现在的这个配置，显示出来就像这个样子了：</p>

<pre class="sh-bash"><code>andrew@ubuntu:~/lhj-github/tech$</code></pre>

<p>当然还可以配置颜色，首先来看ascii字符颜色表<sup id="fnref:5"><a href="#fn:5" rel="footnote">4</a></sup><sup id="fnref:6"><a href="#fn:6" rel="footnote">5</a></sup>：</p>

<table class="mytable">
  <thead>
    <tr>
      <th>前景</th>
      <th>背景</th>
      <th>颜色</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>30</td>
      <td>40</td>
      <td>黑色</td>
    </tr>
    <tr>
      <td>31</td>
      <td>41</td>
      <td>紅色</td>
    </tr>
    <tr>
      <td>32</td>
      <td>42</td>
      <td>綠色</td>
    </tr>
    <tr>
      <td>33</td>
      <td>43</td>
      <td>黃色</td>
    </tr>
    <tr>
      <td>34</td>
      <td>44</td>
      <td>藍色</td>
    </tr>
    <tr>
      <td>35</td>
      <td>45</td>
      <td>紫紅色</td>
    </tr>
    <tr>
      <td>36</td>
      <td>46</td>
      <td>青藍色</td>
    </tr>
    <tr>
      <td>37</td>
      <td>47</td>
      <td>白色</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<table class="mytable">
  <thead>
    <tr>
      <th>代码</th>
      <th>意义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>OFF</td>
    </tr>
    <tr>
      <td>1</td>
      <td>高亮显示</td>
    </tr>
    <tr>
      <td>4</td>
      <td>underline</td>
    </tr>
    <tr>
      <td>5</td>
      <td>闪烁</td>
    </tr>
    <tr>
      <td>7</td>
      <td>反白显示</td>
    </tr>
    <tr>
      <td>8</td>
      <td>不可见</td>
    </tr>
  </tbody>
</table>

<p>然后就可以设置prompting的颜色了，最简单的方法是在HOME目录下的.bashrc文件添加以下配置（这种方法只会影响当前用户），
例如我现在的设置为</p>

<pre class="sh-bash"><code>export PS1=&quot;\w\e[32m\$ \e[0m&quot;</code></pre>

<p>前面部分<code>\e[32m</code>是设置提示符的颜色，后面的<code>\e[0m</code>是恢复后面命令行输入输出的颜色，如果不用这个的话，所有的输入输出都会受到影响。</p>

<p>当然也可以配置一个多个属性的，只需要用分号隔开就可以了，这是一个例子:</p>

<pre class="sh-bash"><code>export PS1=&quot;\w\e[32;40;4;1;7m\$ \e[0m&quot;</code></pre>

<p>我使用的是ubuntu server 64 12.04，shell用的是bash，在配置的过过程中，唯独只有闪烁功能好像没有起作用，如果有朋友解决了这个问题麻烦给我说一下。</p>

<p>在学习这个的过程中，我还找到了一篇关于提示符配置的<a href="http://blog.sina.com.cn/s/blog_6d0cbb0301019egu.html">不错的博文</a>，大家也可以阅读一下。</p>

<h2 id="python-">python 输出有颜色的字符</h2>

<p>也可以使用python输出有颜色的字符，下面是例子代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">print</span> <span class="s">&#39;</span><span class="se">\033</span><span class="s">[43;32m{0}</span><span class="se">\033</span><span class="s">[0m&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;yellow background, green font&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&#39;</span><span class="se">\033</span><span class="s">[42;31m{0}</span><span class="se">\033</span><span class="s">[0m&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;green background, red font&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="http://blog.chinaunix.net/uid-13342902-id-2901676.html">linux shell简介(3)</a><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="https://help.ubuntu.com/community/BasicChroot">https://help.ubuntu.com/community/BasicChroot</a><a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p><a href="https://wiki.ubuntu.com/DebootstrapChroot">https://wiki.ubuntu.com/DebootstrapChroot</a><a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p><a href="http://bbs.chinaunix.net/forum.php?mod=viewthread&amp;tid=54256">http://bbs.chinaunix.net/forum.php?mod=viewthread&amp;tid=54256</a><a href="#fnref:5" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:6">
      <p><a href="http://www.chinaunix.net/old_jh/6/54256.html">http://www.chinaunix.net/old_jh/6/54256.html</a><a href="#fnref:6" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[elasticsearch之基本操作]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2013/01/11/es/"/>
    <updated>2013-01-11T17:08:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2013/01/11/es</id>
    <content type="html"><![CDATA[<p><a href="http://www.elasticsearch.org">elasticsearch</a>是一个是开源的（Apache2协议），分布式的，<a href="http://zh.wikipedia.org/zh-cn/REST">RESTful</a>的，构建在<a href="http://lucene.apache.org/">Apache Lucene</a>之上的的搜索引擎。 </p>

<p>它有很多特点例如Schema Free，Document Oriented。它是#nosql的，基于JSON，同时支持多种API，包括HTTP, thrift, memcached。支持HTTP,是比较爽的一点，因为基本上所有的应用都可以用ES了，页面上的js脚本都可以去查询。</p>

<h2 id="section">安装</h2>

<p>启动和安装特别简单，在<a href="http://www.elasticsearch.org/download/">ES下载页面</a>下载zip或者tar包后，解压，然后到elasticsearch的目录下，运行下面的命令就可以了。</p>

<pre class="sh-commands"><code>bin/elasticsearch -f</code></pre>

<p>搭建集群也非常简单，在同网段的机器上，启动es后，它们会自动组建成一个集群，并完成数据的分布式存储，查询时也会按照分布式的方式去查找。</p>

<p>好了恭喜你，现在你已经可以搭建ES单机版和ES集群了，一切都这么简单。</p>

<!-- more -->

<p>下面我们就来看一下ES的HTTP的API的插入、删除、更新、查找、搜索的功能吧，（ES安装在ubuntu server 64位 12.04LTS）。</p>

<h2 id="section-1">插入</h2>

<p>先来一个简单的官方例子，插入的参数为<code>-XPUT</code>，插入一条记录。</p>

<pre class="sh-bash"><code>$ curl -XPUT 'http://localhost:9200/twitter/tweet/1' -d '{
    "user" : "kimchy",
    "post_date" : "2009-11-15T14:12:12",
    "message" : "trying out Elastic Search"
}'
</code></pre>

<p>执行结果如下图所示，绿色框内的内容是ES返回的执行结果：</p>

<pre class="sh-bash"><code>andrew@ubuntu:~$ curl -XPUT 'http://localhost:9200/twitter/tweet/1' -d '{
</code><code>&gt;     &quot;user&quot; : &quot;kimchy&quot;,
</code><code>&gt;     &quot;post_date&quot; : &quot;2009-11-15T14:12:12&quot;,
</code><code>&gt;     &quot;message&quot; : &quot;trying out Elastic Search&quot;
</code><code>&gt; }'
</code><code>{&quot;ok&quot;:true,&quot;_index&quot;:&quot;twitter&quot;,&quot;_type&quot;:&quot;tweet&quot;,&quot;_id&quot;:&quot;1&quot;,&quot;_version&quot;:6}andrew@ubuntu:~$</code></pre>

<p>从上面的这个例子中，可以看出ES的http的服务的默认端口9200，后面的<code>/twitter/tweet/1</code>是这条记录的索引部分。</p>

<p>这也就体现了它的RESTful风格，所有的记录都是通过URI确定。这三级目录分布对应了<code>_index</code>，<code>_type</code>, <code>_id</code>（绿框内可以看出来）。实际上ES上存放的所有的记录都只能通过三级目录的方式找到，不能多也不能少。</p>

<p><code>_id</code>字段可以是数字也可以是字符串。在执行上面的命令时ES会自动创建这些索引。<code>-d</code>后面跟上了要插入的json格式的记录。</p>

<p><code>-XPUT</code>表明这是插入一条数据，ES中叫创建一个索引。ES返回的结果中，一个<code>_version</code>字段，表明了当前记录的版本号，当你想这个索引重新put一条记录时，版本号会自动加一。</p>

<h2 id="section-2">删除</h2>

<p>删除的http请求参数为<code>-XDELETE</code>，通过下面的命令可以删除这条记录：</p>

<pre class="sh-commands"><code>curl -XDELETE 'http://localhost:9200/twitter/tweet/1'
</code></pre>

<p>删除这条记录的时候，<code>_verison</code>也会自动加一的。</p>

<h2 id="section-3">查询</h2>

<p>创建了一个索引后，可以通过下面的方式查询（参数<code>-XGET</code>）出来:</p>

<pre class="sh-commands"><code>curl -XGET 'http://localhost:9200/twitter/tweet/1'
</code></pre>

<p>执行上面的查询命令，可以等到下面的结果：</p>

<pre class="sh-bash"><code>andrew@ubuntu:~$ curl -XGET 'http://localhost:9200/twitter/tweet/1'
{"_index":"twitter","_type":"tweet","_id":"1","_version":5,"exists":true, "_source" : {
    "user" : "kimchy",
    "post_date" : "2009-11-15T14:12:12",
    "message" : "trying out Elastic Search"
}}andrew@ubuntu:~$ 
</code></pre>

<p><code>exists</code>表示是否有查询结果，<code>_source</code>字段是查询到的记录。</p>

<p>查询的时候，可以将<code>_type</code>设置成为<code>_all</code>，ES就会返回在<code>_index</code>下所有type中，第一个匹配<code>_id</code>的记录。</p>

<p>还可以通过参数对返回结果继续控制，例如：用fields选取返回的字段，用pretty控制返回的json格式是否更阅读友好。<code>format=yaml</code>可以设置输入格式为YAML。
下面是两个例子</p>

<pre class="sh-commands"><code>curl -XGET 'http://localhost:9200/twitter/tweet/1?fields=message,user&amp;pretty=true'
</code><code>curl -XGET 'http://localhost:9200/twitter/tweet/1?fields=message,user&amp;format=yaml'</code></pre>

<p>当然ES还支持一次查询多组记录，即multi get，在URI中是使用关键字<code>_mget</code>，具体可以参考ES的文档<a href="http://www.elasticsearch.org/guide/reference/api/multi-get.html">multi get</a>。</p>

<h2 id="section-4">更新</h2>

<p>ES同样支持更新，但是更新的方式是通过一个提供的脚本进行的。ES的做法是，通过index找到相应的存放记录的节点，然后执行脚本，执行完之后，返回新的索引。实际上执行的是一个get和reindex的过程，在这个过程中，通过versioning来控制没有其它的更新操作（这个功能是0.19后可用的）。具体实现的原理应该和<a href="http://www.elasticsearch.org/blog/2011/02/08/versioning.html">elasticsearch Versioning</a>相关。</p>

<p>get，reindex的含义是，ES先取出这条记录，然后根据新数据生成新记录，然后在把新记录放回到ES中（并不会覆盖老的记录）。</p>

<p>首先创建一条记录</p>

<pre class="sh-bash"><code>$ curl -XPUT localhost:9200/test/type1/1 -d '{
    "counter" : 1,
    "tags" : ["red"]
}'
</code></pre>

<p>将counter的值加4</p>

<pre class="sh-bash"><code>$ curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{
    "script" : "ctx._source.counter += count",
    "params" : {
        "count" : 4
    }
}'
</code></pre>

<p>也可以添加一个tag的值</p>

<pre class="sh-bash"><code>$ curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{
    "script" : "ctx._source.tags += tag",
    "params" : {
        "tag" : "blue"
    }
}'
</code></pre>

<p>现在还支持upsert功能，即在更新的时候，如果记录没有这个key，则插入这个key，下面是一个例子，如果没有<code>counter</code>字段，则插入该字段：</p>

<pre class="sh-bash"><code>$ curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{
    "script" : "ctx._source.counter += count",
    "params" : {
        "count" : 4
    },
    "upsert" : {
        "counter" : 1
    }
}'
</code></pre>

<p>关于update还有其它很多功能，可以参考<a href="http://www.elasticsearch.org/guide/reference/api/update.html">ES的API update</a></p>

<h2 id="section-5">搜索</h2>

<p>elasticsearch的名字里面有一个search，那么主要功能也是search了。</p>

<p>es的search有两种形式，一是通过URI，二是通过Requst Body。通过URI查询，即将查询的语句放入到请求的url中，例如：</p>

<pre class="sh-commands"><code>curl -XGET 'http://localhost:9200/twitter/tweet/_search?q=user:kimchy'
</code></pre>

<p>第二种方式，即在查询的请求中加入一个doc</p>

<pre class="sh-bash"><code>$ curl -XGET 'http://localhost:9200/twitter/tweet/_search' -d '{
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}'
</code></pre>

<p>query body的定义可以查看<a href="http://www.elasticsearch.org/guide/reference/query-dsl/">query DSL</a>
另外两种查询方式都可以带参数，参数的含义参考<a href="http://www.elasticsearch.org/guide/reference/api/search/uri-request.html">URI Request</a>和<a href="http://www.elasticsearch.org/guide/reference/api/search/request-body.html">Request Body</a>。</p>

<p>ES的搜索功能是可以跨index和type的，例如下面这几条命令</p>

<pre class="sh-commands"><code>curl -XGET 'http://localhost:9200/twitter/_search?q=user:kimchy'
</code><code>curl -XGET 'http://localhost:9200/twitter/tweet,user/_search?q=user:kimchy'
</code><code>curl -XGET 'http://localhost:9200/kimchy,elasticsearch/tweet/_search?q=tag:wow'
</code><code>curl -XGET 'http://localhost:9200/_all/tweet/\_search?q=tag:wow'
</code><code>curl -XGET 'http://localhost:9200/\_search?q=tag:wow'</code></pre>

<p>第一条是在所有的<code>twitter</code>这个index下的所有type中查找，第二条是在<code>tweet,user</code>这两个type中查找，第三条是在<code>kimchy,elasticsearch</code>这两个index的<code>tweet</code>这个type中查找，第四条使用了<code>_all</code>关键字，是在所有的index的<code>tweet</code>的type中查找，第五条更暴力，在所有的index和type中查找。</p>

<p>查找还有其它的很多选项，<a href="http://www.elasticsearch.org/guide/reference/api/search/sort.html">sort</a>，<a href="http://www.elasticsearch.org/guide/reference/api/search/highlighting.html">高亮</a>，选取返回记录的域<a href="http://www.elasticsearch.org/guide/reference/api/search/fields.html">Fields</a>，还可以对返回的域使用一个脚本进行计算<a href="http://www.elasticsearch.org/guide/reference/api/search/script-fields.html">script Fields</a>，或者对返回结果继续统计<a href="http://www.elasticsearch.org/guide/reference/api/search/facets/">Facets</a>，Facets的内容比较多，它支持关键词统计，范围内统计，直方图式统计，日期的直方图式统计，过滤，查询，还有记录地理位置距离的统计<a href="http://www.elasticsearch.org/guide/reference/api/search/facets/geo-distance-facet.html">geo distance</a>。
支持名字过滤<a href="http://www.elasticsearch.org/guide/reference/api/search/named-filters.html">Named Filters</a>。
定义搜索类型<a href="http://www.elasticsearch.org/guide/reference/api/search/search-type.html">Search Type </a>。例如什么Query And Fetch，Query Then Fetch。
索引加速的功能<a href="http://www.elasticsearch.org/guide/reference/api/search/index-boost.html">Index Boost</a>，可以让某一个索引的权重大于另外一个。
保持上次检索的环境了结果<a href="http://www.elasticsearch.org/guide/reference/api/search/scroll.html">Scroll</a>。保留每一个命中的score值<a href="http://www.elasticsearch.org/guide/reference/api/search/explain.html">Explain</a>。
设置命中的<a href="http://www.elasticsearch.org/guide/reference/api/search/min-score.html">min_score</a>。保留版本号<a href="http://www.elasticsearch.org/guide/reference/api/search/version.html">Version</a>。</p>

<p>Search的参数很多，我也没有一一看，不过果然是名字里面有个search，对检索的各种场景都有支持。</p>

<p>当然还支持多个查询multi search，例如下面这个例子</p>

<pre class="sh-bash"><code>$ cat requests
{"index" : "test"}
{"query" : {"match_all" : {}}, "from" : 0, "size" : 10}
{"index" : "test", "search_type" : "count"}
{"query" : {"match_all" : {}}}
{}
{"query" : {"match_all" : {}}}

$ curl -XGET localhost:9200/_msearch --data-binary @requests; echo
</code></pre>

<h2 id="section-6">小结</h2>

<p>以上就是elasticsearch的基本的几个功能了。当然它还有其它的很多功能，大家可以上<a href="http://www.elasticsearch.org">http://www.elasticsearch.org</a>去查看。</p>

<p>ES是基于Lucene的，有很多概念是直接来自于它，所有要想深入学习ES，还得有点Lucene的基础。</p>

<p>总的，感觉elasticsearch是一个比较强大的工具，而且对社交网络的支持比较好，而且使用方便，配置简单，就不知道稳定性如何了。</p>

<p>下面是两篇不错的文章，大家也可以借鉴一下：</p>

<ul>
  <li><a href="http://blog.csdn.net/laigood12345/article/details/7421173">http://blog.csdn.net/laigood12345/article/details/7421173</a></li>
  <li><a href="http://www.qwolf.com/?p=1387">http://www.qwolf.com/?p=1387</a></li>
</ul>

<p>还有elasticsearch的中文站点<a href="http://www.elasticsearch.cn/">http://www.elasticsearch.cn/</a>，不过这个网站还在构建中，翻译工作也才刚刚开始，大家就期盼早点完成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于SVM的手写数字识别]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2012/12/29/svm-ocr/"/>
    <updated>2012-12-29T22:37:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2012/12/29/svm-ocr</id>
    <content type="html"><![CDATA[<p>前面两篇blog介绍了<a href="http://liuhongjiang.github.com/tech/blog/2012/12/26/svm/">支持向量机SVM</a>和<a href="http://liuhongjiang.github.com/tech/blog/2012/12/28/svm-smo/">SMO算法</a>，这一篇就讲讲SVM的一个简单实际应用：使用svm实现一个简单的数字手写识别软件。首先要解决如何使用svm进行多类分类。</p>

<h2 id="svm1">svm与多类分类<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h2>

<p>svm是一个二类的分类器，即它只回答属于正类还是负类的问题。而现实中要解决的问题，往往是多类的问题，比如文本分类，比如数字识别。如何由两类分类器得到多类分类器, 一般有三种方法：</p>

<h3 id="section">一对多（一对其余）</h3>

<p>比如我们有5个类别，第一次就把类别1的样本定为正样本，其余2，3，4，5的样本合起来定为负样本，这样得到一个两类分类器。
通过类似的方法构造类别2、3、4、5的分类器，对于测试数据，每一个分类器都过一次，在那个分类器中，被判定为正，那么就认识它属于那个分类。
但有两个问题还没有解决：一是被多个分类器判定为正，二是被所有分类器判定为负。第一种情况，可以简单地选择第一个被判定为正的分类，对二种情况，可以视为分类失败了。另外一个问题是，“其余”的那一类样本数总是要数倍于正类（因为它是除正类以外其他类别的样本之和嘛），这就人为的造成了的<a href="http://www.blogjava.net/zhenandaci/archive/2009/03/17/260315.html">“数据集偏斜”</a>问题。</p>

<!-- more -->

<h3 id="section-1">一对一</h3>

<p>这种方法需要构造n*(n-1)/2个分类器。简单地可以理解为所有分类1v1进行pk,具体做法，还是每次选一个类的样本作正类样本，而负类样本则变成只选一个类，(例如构造一个1 pk 2的分类器，它的正样本为1的分类，负样本为2的分类）这就避免了偏斜。
因此过程就是算出这样一些分类器，第一个只回答“是第1类还是第2类”，第二个只回答“是第1类还是第3类”，第三个只回答“是第1类还是第4类”，如此下去，所以一共有5*(5-1)/2=10个分类器。</p>

<p>虽然分类器的数目多了，但是在训练阶段（也就是算出这些分类器的分类平面时）所用的总时间却比“一类对其余”方法少很多，在真正用来分类的时候，把一个测试数据扔给所有分类器，第一个分类器会投票说它是“1”或者“2”，第二个会说它是“1”或者“3”，让每一个都投上自己的一票，最后统计票数，如果类别“1”得票最多，就判这篇文章属于第1类。但这有个问题，分类器的数量是类别数量的平方,例如，类别数如果是1000，要调用的分类器数目会上升至约500,000个（类别数的平方量级）。</p>

<h3 id="dag-svm">DAG SVM</h3>

<p>这种方法是构造一个DAG SVM，（有向无环的svm)。
还是像一对一方法那样来训练，只是在对一篇文章进行分类之前，先按照下面图的样子来组织分类器这样在分类时,我们就可以先问分类器“1对5”（意思是它能够回答“是第1类还是第5类”），如果它回答5，我们就往左走，再问“2对5”这个分类器，如果它还说是“5”，我们就继续往左走，这样一直问下去，就可以得到分类结果。</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/svm-ocr/dag-svm.jpg" /></p>

<p>好处在哪？我们其实只调用了4个分类器（如果类别数是k，则只调用k-1个），分类速度飞快，且没有分类重叠和不可分类现象！缺点在哪？假如最一开始的分类器回答错误（明明是类别1的文章，它说成了5），那么后面的分类器是无论如何也无法纠正它的错误的（因为后面的分类器压根没有出现“1”这个类别标签），其实对下面每一层的分类器都存在这种错误向下累积的现象。
不过不要被DAG方法的错误累积吓倒，错误累积在一对其余和一对一方法中也都存在，DAG方法好于它们的地方就在于，累积的上限，不管是大是小，总是有定论的，有理论证明。而一对其余和一对一方法中，尽管每一个两类分类器的泛化误差限是知道的，但是合起来做多类分类的时候，误差上界是多少，没人知道，这意味着准确率低到0也是有可能的，这多让人郁闷。</p>

<p>而且现在DAG方法根节点的选取（也就是如何选第一个参与分类的分类器），也有一些方法可以改善整体效果，我们总希望根节点少犯错误为好，因此参与第一次分类的两个类别，最好是差别特别特别大，大到以至于不太可能把他们分错；或者我们就总取在两类分类中正确率最高的那个分类器作根节点，或者我们让两类分类器在分类的时候，不光输出类别的标签，还输出一个类似“置信度”的东东，当它对自己的结果不太自信的时候，我们就不光按照它的输出走，把它旁边的那条路也走一走，等等。 </p>

<h2 id="section-2">高斯核函数</h2>

<p>这个手写识别svm的核函数采用了高斯核函数。高斯核函数的公式如下</p>

<script type="math/tex; mode=display">
K({x_i},{x_j})=e^{- \frac { {\left \| {x_i - x_j} \right \| }^2}{2\delta ^2}}
</script>

<p>其中的径向基函数的宽度$\delta$对分类器的性能比较敏感，对取不同的$\delta$时，高斯核支持向量机的性能进行分析，若$\delta \to 0 $ ，则所有的训练样本点都是支持向量，且它们全部能被正确的分类，但容易出现“过学习”的现象，推广能力较差，对测试样本的错误识别率较高；若$\delta \to \infty$ ，高斯核支持向量机对所有样本一视同仁，推广能力或对测试样本的正确判别能力为零，即它把所有样本点判为同一类。
实际上，当$\delta$取比训练样本点之间的平均距离小得多时，就能达到$\delta \to 0 $的效果；当$\delta$取比训练样本点之间的平均距离大得多时，就能达到$\delta \to \infty$的效果。
在确定高斯径向基函数的宽度$\delta$时，最基本的方法是对$\delta$取不同的值，然后分别采用支持向量机方法进行训练，选择最小分类错误率的一组$\delta$参数。比较典型的方法有梯度下降法与交叉验证法。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<h2 id="section-3">数据</h2>

<p>我实现的这个数学手写识别的数据是<a href="http://www.manning.com/pharrington/">“Machine Learning in Action”</a>的第二章的数据，可以下载这本的<a href="http://www.manning.com/pharrington/MLiA_SourceCode.zip">source code</a>获得。解压后的路径为machinelearninginaction/Ch02/digits.zip。</p>

<p>将digits.zip解压后就可以得到训练数据和测试数据。这些都是原始数据经过处理后的数据，是一个各个文件，一个文件是一个手写数据，文件名像这样”0_52.txt”，签名的0表示这个手写数据对应的数字，后面的数字52，是0这一类手写数据的文件编号。书写数据如下图所示，是一个32*32的黑白位图。</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/svm-ocr/data-sample.jpg" /></p>

<p>在处理手写数据时，例子中是将它们存放到一个32*32的矩阵中，也可以存放到一个有1024的一维数组。计算高斯核函数的${\left \| {x_i} - {x_j} \right \|} ^2 $如下，以一维数组为例：</p>

<script type="math/tex; mode=display">
\begin{array}{l}
{\left \| {x_i} - {x_j} \right \|}^2 = \sum\limits_{k=0}^{1023}{ {(x_i^k - x_j^k)}^2} \\
x_i=(x_i^0,x_i^1,\cdot \cdot \cdot,x_i^{1023})
\end{array}
</script>

<h2 id="section-4">实现</h2>

<p>我实现了一个简单的基于svm的数字手写识别的python脚本，多类分类的模型采用的是一对多（一对其余）的方式，所以一共构造了10个分类器，分别对应0到9。算法采用的是前一篇blog讲的<a href="http://liuhongjiang.github.com/tech/blog/2012/12/28/svm-smo/">SMO</a>，算法的实现也基本是一样的。下面是具体的代码，可以下载<a href="https://github.com/liuhongjiang/blog_projects/tree/master/svm_ocr">github上的代码和数据</a>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>基于svm的数字手写识别  (svm_ocr.py)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/svm-ocr/svm_ocr.py">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
<span class="line-number">175</span>
<span class="line-number">176</span>
<span class="line-number">177</span>
<span class="line-number">178</span>
<span class="line-number">179</span>
<span class="line-number">180</span>
<span class="line-number">181</span>
<span class="line-number">182</span>
<span class="line-number">183</span>
<span class="line-number">184</span>
<span class="line-number">185</span>
<span class="line-number">186</span>
<span class="line-number">187</span>
<span class="line-number">188</span>
<span class="line-number">189</span>
<span class="line-number">190</span>
<span class="line-number">191</span>
<span class="line-number">192</span>
<span class="line-number">193</span>
<span class="line-number">194</span>
<span class="line-number">195</span>
<span class="line-number">196</span>
<span class="line-number">197</span>
<span class="line-number">198</span>
<span class="line-number">199</span>
<span class="line-number">200</span>
<span class="line-number">201</span>
<span class="line-number">202</span>
<span class="line-number">203</span>
<span class="line-number">204</span>
<span class="line-number">205</span>
<span class="line-number">206</span>
<span class="line-number">207</span>
<span class="line-number">208</span>
<span class="line-number">209</span>
<span class="line-number">210</span>
<span class="line-number">211</span>
<span class="line-number">212</span>
<span class="line-number">213</span>
<span class="line-number">214</span>
<span class="line-number">215</span>
<span class="line-number">216</span>
<span class="line-number">217</span>
<span class="line-number">218</span>
<span class="line-number">219</span>
<span class="line-number">220</span>
<span class="line-number">221</span>
<span class="line-number">222</span>
<span class="line-number">223</span>
<span class="line-number">224</span>
<span class="line-number">225</span>
<span class="line-number">226</span>
<span class="line-number">227</span>
<span class="line-number">228</span>
<span class="line-number">229</span>
<span class="line-number">230</span>
<span class="line-number">231</span>
<span class="line-number">232</span>
<span class="line-number">233</span>
<span class="line-number">234</span>
<span class="line-number">235</span>
<span class="line-number">236</span>
<span class="line-number">237</span>
<span class="line-number">238</span>
<span class="line-number">239</span>
<span class="line-number">240</span>
<span class="line-number">241</span>
<span class="line-number">242</span>
<span class="line-number">243</span>
<span class="line-number">244</span>
<span class="line-number">245</span>
<span class="line-number">246</span>
<span class="line-number">247</span>
<span class="line-number">248</span>
<span class="line-number">249</span>
<span class="line-number">250</span>
<span class="line-number">251</span>
<span class="line-number">252</span>
<span class="line-number">253</span>
<span class="line-number">254</span>
<span class="line-number">255</span>
<span class="line-number">256</span>
<span class="line-number">257</span>
<span class="line-number">258</span>
<span class="line-number">259</span>
<span class="line-number">260</span>
<span class="line-number">261</span>
<span class="line-number">262</span>
<span class="line-number">263</span>
<span class="line-number">264</span>
<span class="line-number">265</span>
<span class="line-number">266</span>
<span class="line-number">267</span>
<span class="line-number">268</span>
<span class="line-number">269</span>
<span class="line-number">270</span>
<span class="line-number">271</span>
<span class="line-number">272</span>
<span class="line-number">273</span>
<span class="line-number">274</span>
<span class="line-number">275</span>
<span class="line-number">276</span>
<span class="line-number">277</span>
<span class="line-number">278</span>
<span class="line-number">279</span>
<span class="line-number">280</span>
<span class="line-number">281</span>
<span class="line-number">282</span>
<span class="line-number">283</span>
<span class="line-number">284</span>
<span class="line-number">285</span>
<span class="line-number">286</span>
<span class="line-number">287</span>
<span class="line-number">288</span>
<span class="line-number">289</span>
<span class="line-number">290</span>
<span class="line-number">291</span>
<span class="line-number">292</span>
<span class="line-number">293</span>
<span class="line-number">294</span>
<span class="line-number">295</span>
<span class="line-number">296</span>
<span class="line-number">297</span>
<span class="line-number">298</span>
<span class="line-number">299</span>
<span class="line-number">300</span>
<span class="line-number">301</span>
<span class="line-number">302</span>
<span class="line-number">303</span>
<span class="line-number">304</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line">
</span><span class="line"><span class="c">### ###</span>
</span><span class="line"><span class="c"># handwriting numbers OCR based on svm.</span>
</span><span class="line"><span class="c"># data from &quot;Machine Learning in Action&quot; chapter 02.</span>
</span><span class="line"><span class="c"># 基于SVM的手写数字的识别程序</span>
</span><span class="line"><span class="c"># 数据：采用了《Machine Learning in Action》第二章的数据</span>
</span><span class="line"><span class="c">### ###</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">math</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">model</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">b</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">GV</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">samples</span> <span class="o">=</span> <span class="p">[]</span>        <span class="c"># 样本数据</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">tests</span> <span class="o">=</span> <span class="p">[]</span>          <span class="c"># 测试数据</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">models</span> <span class="o">=</span> <span class="p">[]</span>         <span class="c"># 训练的模型</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">diff_dict</span> <span class="o">=</span> <span class="p">[]</span>      <span class="c"># 用于缓存预测知与真实y之差Ei</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">cur_mno</span> <span class="o">=</span> <span class="mi">0</span>         <span class="c"># 当前正使用或训练的模型</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">cache_kernel</span> <span class="o">=</span> <span class="p">[]</span>   <span class="c"># 缓存kernel函数的计算结果</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">use_linear</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c"># 是否使用线性核函数</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">RBF_dlt</span> <span class="o">=</span> <span class="mi">10</span>        <span class="c"># 径向基函数的宽度</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">init_models</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
</span><span class="line">            <span class="n">m</span> <span class="o">=</span> <span class="n">model</span><span class="p">()</span>
</span><span class="line">            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">samples</span><span class="p">)):</span>
</span><span class="line">                <span class="n">m</span><span class="o">.</span><span class="n">a</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">models</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">init_cache_kernel</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">        <span class="k">for</span> <span class="n">mi</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">samples</span><span class="p">:</span>
</span><span class="line">            <span class="k">print</span> <span class="n">i</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">cache_kernel</span><span class="o">.</span><span class="n">append</span><span class="p">([])</span>
</span><span class="line">            <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">            <span class="k">for</span> <span class="n">mj</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">samples</span><span class="p">:</span>
</span><span class="line">                <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">j</span><span class="p">:</span>
</span><span class="line">                    <span class="bp">self</span><span class="o">.</span><span class="n">cache_kernel</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">cache_kernel</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">])</span>
</span><span class="line">                <span class="k">else</span><span class="p">:</span>
</span><span class="line">                    <span class="bp">self</span><span class="o">.</span><span class="n">cache_kernel</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">kernel</span><span class="p">(</span><span class="n">mi</span><span class="p">,</span><span class="n">mj</span><span class="p">))</span>
</span><span class="line">                <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">image</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">num</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">label</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">fn</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">printself</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;data&quot;</span>
</span><span class="line">        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">:</span>
</span><span class="line">            <span class="k">print</span> <span class="n">line</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;num&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">num</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;label&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">label</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;fn&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">fn</span>
</span><span class="line">
</span><span class="line"><span class="c"># global variables</span>
</span><span class="line"><span class="n">gv</span> <span class="o">=</span> <span class="n">GV</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">parse_image</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
</span><span class="line">    <span class="n">img_map</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">fp</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fp</span><span class="p">:</span>
</span><span class="line">        <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
</span><span class="line">        <span class="n">img_map</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">img_map</span>
</span><span class="line">
</span><span class="line"><span class="c"># load samples and tests</span>
</span><span class="line"><span class="k">def</span> <span class="nf">loaddata</span><span class="p">(</span><span class="n">dirpath</span><span class="p">,</span> <span class="n">col</span><span class="p">):</span>
</span><span class="line">    <span class="n">files</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">dirpath</span><span class="p">)</span>
</span><span class="line">    <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span><span class="line">        <span class="n">img</span> <span class="o">=</span> <span class="n">image</span><span class="p">()</span>
</span><span class="line">        <span class="n">img</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">parse_image</span><span class="p">(</span><span class="n">dirpath</span> <span class="o">+</span> <span class="nb">file</span><span class="p">)</span>
</span><span class="line">        <span class="n">img</span><span class="o">.</span><span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">file</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class="line">        <span class="n">img</span><span class="o">.</span><span class="n">fn</span> <span class="o">=</span> <span class="nb">file</span>
</span><span class="line">        <span class="n">col</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">kernel</span><span class="p">(</span><span class="n">mj</span><span class="p">,</span> <span class="n">mi</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">gv</span><span class="o">.</span><span class="n">use_linear</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="n">kernel_linear</span><span class="p">(</span><span class="n">mj</span><span class="p">,</span><span class="n">mi</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="n">kernel_RBF</span><span class="p">(</span><span class="n">mj</span><span class="p">,</span><span class="n">mi</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">######</span>
</span><span class="line"><span class="c"># 高斯核函数</span>
</span><span class="line"><span class="c">######</span>
</span><span class="line"><span class="k">def</span> <span class="nf">kernel_RBF</span><span class="p">(</span><span class="n">mj</span><span class="p">,</span> <span class="n">mi</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">mj</span> <span class="o">==</span> <span class="n">mi</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="n">dlt</span> <span class="o">=</span> <span class="n">gv</span><span class="o">.</span><span class="n">RBF_dlt</span>
</span><span class="line">    <span class="n">ret</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">mj</span><span class="o">.</span><span class="n">data</span><span class="p">)):</span>
</span><span class="line">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">mj</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])):</span>
</span><span class="line">            <span class="n">ret</span> <span class="o">+=</span> <span class="n">math</span><span class="o">.</span><span class="n">pow</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">mj</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span> <span class="o">-</span> <span class="nb">int</span><span class="p">(</span><span class="n">mi</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]),</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="n">ret</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">ret</span><span class="o">/</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">dlt</span><span class="o">*</span><span class="n">dlt</span><span class="p">))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">ret</span>
</span><span class="line">
</span><span class="line"><span class="c">######</span>
</span><span class="line"><span class="c"># 线性</span>
</span><span class="line"><span class="c">######</span>
</span><span class="line"><span class="k">def</span> <span class="nf">kernel_linear</span><span class="p">(</span><span class="n">mj</span><span class="p">,</span> <span class="n">mi</span><span class="p">):</span>
</span><span class="line">    <span class="n">ret</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">mj</span><span class="o">.</span><span class="n">data</span><span class="p">)):</span>
</span><span class="line">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">mj</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])):</span>
</span><span class="line">            <span class="n">ret</span> <span class="o">+=</span> <span class="nb">int</span><span class="p">(</span><span class="n">mj</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="n">mi</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
</span><span class="line">    <span class="k">return</span> <span class="n">ret</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c"># g(x)</span>
</span><span class="line"><span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
</span><span class="line">    <span class="n">pred</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">)):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">            <span class="n">pred</span> <span class="o">+=</span> <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">*</span> <span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">label</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span> <span class="o">*</span> <span class="n">kernel</span><span class="p">(</span><span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">m</span><span class="p">)</span>
</span><span class="line">    <span class="n">pred</span> <span class="o">+=</span> <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">.</span><span class="n">b</span>
</span><span class="line">    <span class="k">return</span> <span class="n">pred</span>
</span><span class="line">
</span><span class="line"><span class="c"># the same as predict(m), only with different parmaters</span>
</span><span class="line"><span class="k">def</span> <span class="nf">predict_train</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class="line">    <span class="n">pred</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">)):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">            <span class="n">pred</span> <span class="o">+=</span> <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">*</span> <span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">label</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span> <span class="o">*</span> <span class="n">gv</span><span class="o">.</span><span class="n">cache_kernel</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">    <span class="n">pred</span> <span class="o">+=</span> <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">.</span><span class="n">b</span>
</span><span class="line">    <span class="k">return</span> <span class="n">pred</span>
</span><span class="line">
</span><span class="line"><span class="c"># 决策函数对xi的预测值和真实值之差</span>
</span><span class="line"><span class="k">def</span> <span class="nf">predict_diff_real</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class="line">    <span class="n">diff</span> <span class="o">=</span> <span class="n">predict_train</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">    <span class="n">diff</span> <span class="o">-=</span> <span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">label</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">diff</span>
</span><span class="line">
</span><span class="line"><span class="c"># 优化计算Ei</span>
</span><span class="line"><span class="k">def</span> <span class="nf">predict_diff_real_optimized</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">new_ai</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">new_aj</span><span class="p">,</span> <span class="n">new_b</span><span class="p">):</span>
</span><span class="line">    <span class="n">diff</span> <span class="o">=</span> <span class="p">(</span><span class="n">new_ai</span> <span class="o">-</span> <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">*</span> <span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">label</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span> <span class="o">*</span> <span class="n">gv</span><span class="o">.</span><span class="n">cache_kernel</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">idx</span><span class="p">]</span>
</span><span class="line">    <span class="n">diff</span> <span class="o">+=</span> <span class="p">(</span><span class="n">new_aj</span> <span class="o">-</span> <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">])</span><span class="o">*</span> <span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">label</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span> <span class="o">*</span> <span class="n">gv</span><span class="o">.</span><span class="n">cache_kernel</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">idx</span><span class="p">]</span>
</span><span class="line">    <span class="n">diff</span> <span class="o">+=</span> <span class="n">new_b</span> <span class="o">-</span> <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">.</span><span class="n">b</span>
</span><span class="line">    <span class="n">diff</span> <span class="o">+=</span> <span class="n">gv</span><span class="o">.</span><span class="n">diff_dict</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">diff</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">init_predict_diff_real_dict</span><span class="p">():</span>
</span><span class="line">    <span class="n">gv</span><span class="o">.</span><span class="n">diff_dict</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">)):</span>
</span><span class="line">        <span class="n">gv</span><span class="o">.</span><span class="n">diff_dict</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">predict_diff_real</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">update_diff_dict</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">new_ai</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">new_bj</span><span class="p">,</span> <span class="n">new_b</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">)):</span>
</span><span class="line">        <span class="c"># 原来的函数</span>
</span><span class="line">        <span class="c"># gv.diff_dict[idx] = predict_diff_real(idx)</span>
</span><span class="line">        <span class="c"># 有优化后的</span>
</span><span class="line">        <span class="n">gv</span><span class="o">.</span><span class="n">diff_dict</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">predict_diff_real_optimized</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">new_ai</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">new_bj</span><span class="p">,</span> <span class="n">new_b</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">update_samples_label</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">img</span> <span class="ow">in</span> <span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">:</span>
</span><span class="line">        <span class="k">if</span> <span class="n">img</span><span class="o">.</span><span class="n">num</span> <span class="o">==</span> <span class="n">num</span><span class="p">:</span>
</span><span class="line">            <span class="n">img</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">img</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c">######</span>
</span><span class="line"><span class="c">#  svmocr train</span>
</span><span class="line"><span class="c">#  基于算法SMO</span>
</span><span class="line"><span class="c">#  T: tolerance 误差容忍度(精度)</span>
</span><span class="line"><span class="c">#  times: 迭代次数</span>
</span><span class="line"><span class="c">#  C: 惩罚系数</span>
</span><span class="line"><span class="c">#  Mno: 模型序号0到9</span>
</span><span class="line"><span class="c">#  step: aj移动的最小步长</span>
</span><span class="line"><span class="c">######</span>
</span><span class="line"><span class="k">def</span> <span class="nf">SVM_SMO_train</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">times</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">Mno</span><span class="p">,</span> <span class="n">step</span><span class="p">):</span>
</span><span class="line">    <span class="n">time</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span> <span class="o">=</span> <span class="n">Mno</span>
</span><span class="line">    <span class="n">update_samples_label</span><span class="p">(</span><span class="n">Mno</span><span class="p">)</span>
</span><span class="line">    <span class="n">init_predict_diff_real_dict</span><span class="p">()</span>
</span><span class="line">    <span class="n">updated</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">    <span class="k">while</span> <span class="n">time</span> <span class="o">&lt;</span> <span class="n">times</span> <span class="ow">and</span> <span class="n">updated</span><span class="p">:</span>
</span><span class="line">        <span class="n">updated</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">        <span class="n">time</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">)):</span>
</span><span class="line">            <span class="n">ai</span> <span class="o">=</span> <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">            <span class="n">Ei</span> <span class="o">=</span> <span class="n">gv</span><span class="o">.</span><span class="n">diff_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">
</span><span class="line">            <span class="c"># agaist the KKT</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">label</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span> <span class="o">*</span> <span class="n">Ei</span> <span class="o">&lt;</span> <span class="o">-</span><span class="n">T</span> <span class="ow">and</span> <span class="n">ai</span> <span class="o">&lt;</span> <span class="n">C</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">label</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span> <span class="o">*</span> <span class="n">Ei</span> <span class="o">&gt;</span> <span class="n">T</span> <span class="ow">and</span> <span class="n">ai</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">):</span>
</span><span class="line">                <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">)):</span>
</span><span class="line">                    <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="n">i</span><span class="p">:</span> <span class="k">continue</span>
</span><span class="line">                    <span class="n">kii</span> <span class="o">=</span> <span class="n">gv</span><span class="o">.</span><span class="n">cache_kernel</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">                    <span class="n">kjj</span> <span class="o">=</span> <span class="n">gv</span><span class="o">.</span><span class="n">cache_kernel</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">                    <span class="n">kji</span> <span class="o">=</span> <span class="n">kij</span> <span class="o">=</span> <span class="n">gv</span><span class="o">.</span><span class="n">cache_kernel</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">                    <span class="n">eta</span> <span class="o">=</span> <span class="n">kii</span> <span class="o">+</span> <span class="n">kjj</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">kij</span>
</span><span class="line">                    <span class="k">if</span> <span class="n">eta</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span> <span class="k">continue</span>
</span><span class="line">                    <span class="n">new_aj</span> <span class="o">=</span> <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">label</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">gv</span><span class="o">.</span><span class="n">diff_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">gv</span><span class="o">.</span><span class="n">diff_dict</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="o">/</span> <span class="n">eta</span> <span class="c"># f 7.106</span>
</span><span class="line">                    <span class="n">L</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line">                    <span class="n">H</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line">                    <span class="n">a1_old</span> <span class="o">=</span> <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">                    <span class="n">a2_old</span> <span class="o">=</span> <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">                    <span class="k">if</span> <span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">label</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span> <span class="o">==</span> <span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">label</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]:</span>
</span><span class="line">                        <span class="n">L</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">a2_old</span> <span class="o">+</span> <span class="n">a1_old</span> <span class="o">-</span> <span class="n">C</span><span class="p">)</span>
</span><span class="line">                        <span class="n">H</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">a2_old</span> <span class="o">+</span> <span class="n">a1_old</span><span class="p">)</span>
</span><span class="line">                    <span class="k">else</span><span class="p">:</span>
</span><span class="line">                        <span class="n">L</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">a2_old</span> <span class="o">-</span> <span class="n">a1_old</span><span class="p">)</span>
</span><span class="line">                        <span class="n">H</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">C</span> <span class="o">+</span> <span class="n">a2_old</span> <span class="o">-</span> <span class="n">a1_old</span><span class="p">)</span>
</span><span class="line">                    <span class="k">if</span> <span class="n">new_aj</span> <span class="o">&gt;</span> <span class="n">H</span><span class="p">:</span>
</span><span class="line">                        <span class="n">new_aj</span> <span class="o">=</span> <span class="n">H</span>
</span><span class="line">                    <span class="k">if</span> <span class="n">new_aj</span> <span class="o">&lt;</span> <span class="n">L</span><span class="p">:</span>
</span><span class="line">                        <span class="n">new_aj</span> <span class="o">=</span> <span class="n">L</span>
</span><span class="line">                    <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">a2_old</span> <span class="o">-</span> <span class="n">new_aj</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">step</span><span class="p">:</span>
</span><span class="line">                        <span class="k">print</span> <span class="s">&quot;j = </span><span class="si">%d</span><span class="s">, is not moving enough&quot;</span> <span class="o">%</span> <span class="n">j</span>
</span><span class="line">                        <span class="k">continue</span>
</span><span class="line">
</span><span class="line">                    <span class="n">new_ai</span> <span class="o">=</span> <span class="n">a1_old</span> <span class="o">+</span> <span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">label</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span> <span class="o">*</span> <span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">label</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">a2_old</span> <span class="o">-</span> <span class="n">new_aj</span><span class="p">)</span> <span class="c"># f 7.109 </span>
</span><span class="line">                    <span class="n">new_b1</span> <span class="o">=</span> <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">.</span><span class="n">b</span> <span class="o">-</span> <span class="n">gv</span><span class="o">.</span><span class="n">diff_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">label</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span> <span class="o">*</span> <span class="n">kii</span> <span class="o">*</span> <span class="p">(</span><span class="n">new_ai</span> <span class="o">-</span> <span class="n">a1_old</span><span class="p">)</span> <span class="o">-</span> <span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">label</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span> <span class="o">*</span> <span class="n">kji</span> <span class="o">*</span> <span class="p">(</span><span class="n">new_aj</span> <span class="o">-</span> <span class="n">a2_old</span><span class="p">)</span> <span class="c"># f7.115</span>
</span><span class="line">                    <span class="n">new_b2</span> <span class="o">=</span> <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">.</span><span class="n">b</span> <span class="o">-</span> <span class="n">gv</span><span class="o">.</span><span class="n">diff_dict</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">label</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">*</span><span class="n">kji</span><span class="o">*</span><span class="p">(</span><span class="n">new_ai</span> <span class="o">-</span> <span class="n">a1_old</span><span class="p">)</span> <span class="o">-</span> <span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">label</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">*</span><span class="n">kjj</span><span class="o">*</span><span class="p">(</span><span class="n">new_aj</span><span class="o">-</span><span class="n">a2_old</span><span class="p">)</span>    <span class="c"># f7.116</span>
</span><span class="line">                    <span class="k">if</span> <span class="n">new_ai</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">new_ai</span> <span class="o">&lt;</span> <span class="n">C</span><span class="p">:</span> <span class="n">new_b</span> <span class="o">=</span> <span class="n">new_b1</span>
</span><span class="line">                    <span class="k">elif</span> <span class="n">new_aj</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">new_aj</span> <span class="o">&lt;</span> <span class="n">C</span><span class="p">:</span> <span class="n">new_b</span> <span class="o">=</span> <span class="n">new_b2</span>
</span><span class="line">                    <span class="k">else</span><span class="p">:</span> <span class="n">new_b</span> <span class="o">=</span> <span class="p">(</span><span class="n">new_b1</span> <span class="o">+</span> <span class="n">new_b2</span><span class="p">)</span> <span class="o">/</span> <span class="mf">2.0</span>
</span><span class="line">
</span><span class="line">                    <span class="n">update_diff_dict</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">new_ai</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">new_aj</span><span class="p">,</span> <span class="n">new_b</span><span class="p">)</span>
</span><span class="line">                    <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_ai</span>
</span><span class="line">                    <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_aj</span>
</span><span class="line">                    <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span><span class="p">]</span><span class="o">.</span><span class="n">b</span> <span class="o">=</span> <span class="n">new_b</span>
</span><span class="line">                    <span class="n">updated</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">                    <span class="k">print</span> <span class="s">&quot;iterate: </span><span class="si">%d</span><span class="s">, changepair: i: </span><span class="si">%d</span><span class="s">, j:</span><span class="si">%d</span><span class="s">&quot;</span> <span class="o">%</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</span><span class="line">                    <span class="c">#break</span>
</span><span class="line">
</span><span class="line"><span class="c"># 测试数据</span>
</span><span class="line"><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
</span><span class="line">    <span class="n">recog</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="n">recog_correct</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">img</span> <span class="ow">in</span> <span class="n">gv</span><span class="o">.</span><span class="n">tests</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&quot;test for&quot;</span><span class="p">,</span> <span class="n">img</span><span class="o">.</span><span class="n">fn</span>
</span><span class="line">        <span class="k">for</span> <span class="n">mno</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class="line">            <span class="n">gv</span><span class="o">.</span><span class="n">cur_mno</span> <span class="o">=</span> <span class="n">mno</span>
</span><span class="line">            <span class="k">if</span> <span class="n">predict</span><span class="p">(</span><span class="n">img</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">                <span class="k">print</span> <span class="n">mno</span>
</span><span class="line">                <span class="k">print</span> <span class="n">img</span><span class="o">.</span><span class="n">fn</span>
</span><span class="line">                <span class="n">recog</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">                <span class="k">if</span> <span class="n">mno</span> <span class="o">==</span> <span class="nb">int</span><span class="p">(</span><span class="n">img</span><span class="o">.</span><span class="n">fn</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class="line">                    <span class="n">recog_correct</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">                <span class="k">break</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;recog:&quot;</span><span class="p">,</span> <span class="n">recog</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;recog_correct:&quot;</span><span class="p">,</span> <span class="n">recog_correct</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;total:&quot;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">gv</span><span class="o">.</span><span class="n">tests</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">save_models</span><span class="p">():</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class="line">        <span class="n">fn</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;models/&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;_a.model&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="k">for</span> <span class="n">ai</span> <span class="ow">in</span> <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">a</span><span class="p">:</span>
</span><span class="line">            <span class="n">fn</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">ai</span><span class="p">))</span>
</span><span class="line">            <span class="n">fn</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="n">fn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line">        <span class="n">fn</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;models/&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;_b.model&quot;</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="n">fn</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">b</span><span class="p">))</span>
</span><span class="line">        <span class="n">fn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">load_models</span><span class="p">():</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class="line">        <span class="n">fn</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;models/&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;_a.model&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fn</span><span class="p">:</span>
</span><span class="line">            <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class="line">            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">fn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line">        <span class="n">fn</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;models/&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;_b.model&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="n">gv</span><span class="o">.</span><span class="n">models</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">b</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">fn</span><span class="o">.</span><span class="n">readline</span><span class="p">())</span>
</span><span class="line">        <span class="n">fn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class="line">    <span class="n">training</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">    <span class="n">loaddata</span><span class="p">(</span><span class="s">&quot;trainingDigits/&quot;</span><span class="p">,</span> <span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">)</span>
</span><span class="line">    <span class="n">loaddata</span><span class="p">(</span><span class="s">&quot;testDigits/&quot;</span><span class="p">,</span> <span class="n">gv</span><span class="o">.</span><span class="n">tests</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="nb">len</span><span class="p">(</span><span class="n">gv</span><span class="o">.</span><span class="n">samples</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="nb">len</span><span class="p">(</span><span class="n">gv</span><span class="o">.</span><span class="n">tests</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">training</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">        <span class="n">gv</span><span class="o">.</span><span class="n">init_cache_kernel</span><span class="p">()</span>
</span><span class="line">    <span class="n">gv</span><span class="o">.</span><span class="n">init_models</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;init_models done&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="n">T</span> <span class="o">=</span> <span class="mf">0.0001</span>
</span><span class="line">    <span class="n">C</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class="line">    <span class="n">step</span> <span class="o">=</span> <span class="mf">0.0001</span>
</span><span class="line">    <span class="n">gv</span><span class="o">.</span><span class="n">RBF_dlt</span> <span class="o">=</span> <span class="mi">8</span>
</span><span class="line">    <span class="k">if</span> <span class="n">training</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class="line">            <span class="k">print</span> <span class="s">&quot;traning model no:&quot;</span><span class="p">,</span> <span class="n">i</span>
</span><span class="line">            <span class="n">SVM_SMO_train</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">step</span><span class="p">)</span>
</span><span class="line">        <span class="n">save_models</span><span class="p">()</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">load_models</span><span class="p">()</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span><span class="line">            <span class="n">update_samples_label</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">    <span class="n">test</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>训练数据一共是1934个，测试数据是946，一共是识别出来了914个，其中有911个识别正确。运行结果的截图如下：</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/svm-ocr/ocr_test_output.jpg" /></p>

<p>在实现的过程中，第一个版本效率很低，主要是做了两个地方的改进，一是，缓存了核函数的运算结果，二是，计算预测值的与真实值之差$E_i$，改用增量变化的方式，即每次只计算出$new\_a_i$, $new\_a_j$对$E_i$的改变量。
同样一开始，还有识别率低的问题，主要通过配置精度，惩罚系数，$a_i$改变最小步长，这三个参数来提高识别率。但还是对高斯核函数的径向基函数的宽度$\delta$的调整最有效果，针对本例最优情况是当$\delta=10$左右。</p>

<h2 id="section-5">不足</h2>

<p>本文实现的例子，还有很多不足之处:</p>

<ol>
  <li>样本数据的偏移，训练时，正负样本的数量应该是相当的。本文中的例子，负样本是正样本的9倍。</li>
  <li>高斯径向基函数的宽度，没有经过训练</li>
  <li>选择第二个变量时，本文使用的是遍历方式，也可以改成寻找改变量最大的第二个参数，具体<a href="http://book.douban.com/subject/10590856/">《统计学习方法》</a>的P129</li>
  <li>核函数计算时，效率比较低，主要影响测试分类时的速度，如果能用到位运算，应该效率会高很多。</li>
</ol>

<p>其实上面的情况都还可以慢慢改进，最大的坑还是训练的时间太长了，我在虚拟机上装的ubuntu server运行的脚本，训练数据接近2000个，测试数据1000个，总共可能花了4个小时左右，时间太长。我之前的同事实现的ocr是居于online learing的，那么我们下一篇blog也来实现一个online learning的数字手写ocr，与今天这个对比一下。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>主要参考了：<a href="http://www.blogjava.net/zhenandaci/archive/2009/03/26/262113.html">SVM入门（十）将SVM用于多类分类</a>。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>张翔，肖小玲，徐光祐，一种确定高斯核模型参数的新方法，计算机工程，第33卷，第12期，2007年6月。<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SMO序列最小最优化算法]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2012/12/28/svm-smo/"/>
    <updated>2012-12-28T09:01:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2012/12/28/svm-smo</id>
    <content type="html"><![CDATA[<p>上一篇blog讲到了<a href="http://liuhongjiang.github.com/tech/blog/2012/12/26/svm/">svm的原理</a>，最后将需要解决问题抽象成了数学公式，但如何利用计算机，解出这些数学公式的答案。换句话说，就是怎么通过计算机算出我们的svm模型的参数呢？方法就是序列最小最优化(sequential minimal optimization, SMO)算法。</p>

<p>首先回顾一下SVM模型的数学表达，即svm的对偶问题:</p>

<script type="math/tex; mode=display">
\begin{array}{l}
\mathop {\min }\limits_a \qquad \frac{1}{2}\sum\limits_{i = 1}^N {\sum\limits_{j = 1}^N { {a_i}{a_j}{y_i}{y_j}K({x_i},{x_j}) - \sum\limits_{i = 1}^N { {a_i}} } } \\
{\rm{s.t.}}\qquad\sum\limits_{i = 1}^N { {a_i}{y_i} = 0} \\
\qquad\qquad 0 \le {a_i} \le C, \qquad i = 1,2,\cdot\cdot\cdot,N
\end{array}
</script>

<p>选择一个 $ {a^*} $ 的正分量 $ 0 \lt {a_j^*} \lt C $ , 计算（或者通过所有解求平均值）：</p>

<script type="math/tex; mode=display">
{b^*} = {y_j} - \sum\limits_{i = 1}^N {a_i^*{y_i}K({x_i} \cdot {x_j})} 
</script>

<p>决策函数为</p>

<script type="math/tex; mode=display">
f(x) = sign(\sum\limits_{i=1}^N {a_i^*{y_i}K({x_i}, {x_j})} + {b^*})
</script>

<p>svm的学习，就是通过训练数据计算出${a^*}$和${b^*}$，然后通过决策函数判定${x_j}$的分类。其中${a^*}$是一个向量，长度与训练数据的样本数相同，如果训练数据很大，那么这个向量会很长，不过绝大部分的分量值都是0，只有支持向量的对应的分量值大于0 。</p>

<p>SMO是一种启发式算法，其基本思想是：如果所有变量的解都满足了此最优化问题的KKT条件，那么这个最优化问题的解就得到了。否则，选择两个变量，固定其它变量，针对这两个变量构建一个二次规划问题，然后关于这个二次规划的问题的解就更接近原始的二次归还问题的解，因为这个解使得需要优化的问题的函数值更小。</p>

<p>翻译一下：对于svm我们要求解${a^*}$，如果 ${a^*}$ 的所有分量满足svm对偶问题的KKT条件，那么这个问题的解就求出来了，我们svm模型学习也就完成了。如果没有满足KKT，那么我们就在 ${a^*}$ 中找两个分量 ${a_i}$ 和 ${a_j}$，其中 ${a_i}$ 是违反KKT条件最严重的分量，通过计算，使得 ${a_i}$ 和 ${a_j}$ 满足KKT条件，直到${a^*}$ 的所有分量都满足KKT条件。而且这个计算过程是收敛的，因为每次计算出来的新的两个分量，使得对偶问题中要优化的目标函数（就是min对应的那个函数）值更小。至于为什么是收敛的，是因为，每次求解的那两个分量，是要优化问题在这两个分量上的极小值，所以每一次优化，都会使目标函数比上一次的优化结果的值变小。</p>

<!-- more -->

<p>我们来看看KKT条件。</p>

<h2 id="kkt">KKT</h2>

<p>上面的问题，是通过svm的原始问题，构造拉格朗日函数，并通过对偶换算得出的对偶问题。与对偶问题等价的是对偶问题的KKT条件，参考<a href="http://book.douban.com/subject/10590856/">《统计学习方法》</a>的附录C的定理C.3。换句话说，就是只要找到对应的${a^*}$满足了下列KKT条件，那么原始问题和对偶问题就解决了。</p>

<p>SVM的对偶问题对应的KKT条件为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{array}{l}
\quad {a_i} = 0 \quad \Leftrightarrow \quad {y_i}g({x_i}) \ge 1\\
0 < {a_i} < C \quad \Leftrightarrow \quad {y_i}g({x_i}) = 1\\
\quad {a_i} = C \quad \Leftrightarrow \quad {y_i}g({x_i}) \le 1
\end{array}
 %]]&gt;</script>

<p>其中:</p>

<script type="math/tex; mode=display">
g(x) = \sum\limits_{i = 1}^N { {a_i}{y_i}K({x_i},{x_j}) + b} 
</script>

<p>因为计算机在计算的时候是有精度范围的，所以我们引入一个计算精度值$\varepsilon$，</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\left\{ \begin{array}{l}
{a_i} = 0 \Leftrightarrow {y_i}g({x_i}) \ge 1 - \varepsilon \\
0 < {a_i} < C \Leftrightarrow 1 - \varepsilon  \le {y_i}g({x_i}) \le 1 + \varepsilon \\
{a_i} = C \Leftrightarrow {y_i}g({x_i}) \le 1 + \varepsilon 
\end{array} \right\} \Rightarrow \left\{ \begin{array}{l}
{a_i} < C \Leftrightarrow 1 - \varepsilon  \le {y_i}g({x_i})\\
0 < {a_i} \Leftrightarrow {y_i}g({x_i}) \le 1 + \varepsilon 
\end{array} \right\}
 %]]&gt;</script>

<p>同时由于${y_i} =  \pm 1$，所以${y_i}*{y_i}=1$，上面的公式可以换算为</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{array}{l}
{a_i} < C \Leftrightarrow  - \varepsilon  \le {y_i}(g({x_i}) - {y_i})\\
        0 < {a_i} \Leftrightarrow {y_i}(g({x_i}) - {y_i}) \le  + \varepsilon 
        \end{array}
 %]]&gt;</script>

<p>定义:</p>

<script type="math/tex; mode=display">
{E_i} = g({x_i}) - {y_i}
</script>

<p>其中，$g({x})$其实就是决策函数，所以${E_i}$可以认为是对输入的${x_i}$的预测值与真实输出${y_i}$之差。</p>

<p>上面的公式就可以换算为，即KKT条件可以表示为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{array}{l}
{a_i} < C \Leftrightarrow  - \varepsilon  \le {y_i}{E_i}\\
        0 < {a_i} \Leftrightarrow {y_i}{E_i} \le  + \varepsilon 
        \end{array}
 %]]&gt;</script>

<p>那么相应的违规KKT条件的分量应该满足下列不等式：</p>

<script type="math/tex; mode=display">
{\rm{Against\ KKT:}}
</script>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{array}{l}
{a_i} < C \quad \Leftrightarrow \quad  - \varepsilon  > {y_i}{E_i}\\
0 < {a_i} \quad \Leftrightarrow \quad {y_i}{E_i} >  + \varepsilon 
\end{array}
 %]]&gt;</script>

<p>其实上面的推导过程不必关心，只需要应用违犯KKT条件的公式就可以了。</p>

<h2 id="smo">SMO算法描述</h2>

<p style="text-indent:0"><em style="color:blue"> 输入：</em>训练数据集 $ T=&#92;{({x\_1},{y\_1}),({x\_2},{y\_2}), \cdot \cdot \cdot ,({x\_N},{y\_N})&#92;} $ </p>

<p>其中$ {x_i} \in \chi  \in {\mathbb{R}^n}$，${y_i} \in \{-1,+1\}$，$i=1,2,\cdot\cdot\cdot,N$，精度$\varepsilon$。</p>

<p style="text-indent:0"><em style="color:blue">输出：</em>近似解$\hat a$</p>

<p style="text-indent:0"><em style="color:blue">算法描述：</em></p>

<p>(1) 取初始值${a^{(0)}}=0$，令$K=0$</p>

<p>(2) 选取优化变量 ${a_1^{(k)}}$ , ${a_2^{(k)}}$ , 针对优化问题，求得最优解 ${a_1^{(k+1)}}$ , ${a_2^{(k+1)}}$ 更新 ${a^{(k)}}$ 为 ${a^{(k+1)}}$ 。</p>

<p>(3) 在精度条件范围内是否满足停机条件，即是否有变量违反KKT条件，如果违反了，则令$k=k+1$，跳转(2)，否则(4)。</p>

<p>(4) 求得近似解$\hat a = a^{(k+1)}$</p>

<p>上面算法的(1)、(3)、(4)步都不难理解，其中第(3)步中，是否违反KKT条件，对于$a^{(k)}$的每个分量按照上一节的违反KKT条件的公式进行验算即可。难于理解的是第(2)步，下面就重点解释优化变量选取和如何更新选取变量。</p>

<h3 id="section">变量选取</h3>

<p>变量选取分为两步，第一步是选取违反KKT条件最严重的${a_i}$，第二步是根据已经选取的第一个变量，选择优化程度最大的第二个变量。</p>

<p>违反KKT条件最严重的变量可以按照这样的规则选取，首先看$0 \lt {a_i} \lt C$的那些分量中，是否有违反KKT条件的，如果有，则选取${y_i}g({x_i})$最小的那个做为${a_1}$。如果没有则遍历所有的样本点，在违反KKT条件的分量中选取${y_i}g({x_i})$最小的做为${a_1}$。</p>

<p>当选择了${a_1}$后，如果${a_1}$对应的$E_1$为正，选择$E_i$最小的那个分量最为${a_2}$，如果$E_1$为负，选择$E_i$最大的那个分量最为${a_2}$，这是因为${a_2^{new}}$依赖于$\left| {E_1 - E_2} \right|$（后面的公式会讲到）。
如果选择的${a_2}$，不能满足下降的最小步长，那么就遍历所有的支持向量点做为${a_2}$进行试用，如果仍然都不能满足下降的最小步长，那么就遍历所有的样本点做为${a_2}$试用。如果还算是不能满足下降的最小步长，那么就重新选择${a_1}$。</p>

<h3 id="section-1">计算选取变量的新值</h3>

<p>首先计算出来的新值必须满足约束条件$\sum\limits_{i = 1}^N { {a_i}{y_i} = 0}$ ，那么求出来的${a_2^{new}}$需要满足下列条件（具体推导见《统计学习方法》的7.4.1）:</p>

<script type="math/tex; mode=display">
\begin{array}{l}
L \le a_2^{new} \le H\\
L = \max (0,a_2^{old} - a_1^{old}),H = \min (C,C + a_2^{old} - a_1^{old}), \qquad {y_1} \ne {y_2}\\
L = \max (0,a_2^{old} + a_1^{old} - C),H = \min (C,a_2^{old} + a_1^{old}), \qquad {y_1} = {y_2}
\end{array}
</script>

<p>未经过裁剪的${a_2}$的解为：</p>

<script type="math/tex; mode=display">
\begin{array}{l}
{a_2^{new,unc}} = {a_2^{old}} + \frac{ {y_2}({E_1}-{E_2)}}{\eta} \\
\eta = K_{11} + K_{22} - 2{K_{12}}
\end{array}
</script>

<p>裁剪后的解为</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

a_2^{new} = \left\{ \begin{array}{l}
H,a_2^{new,unc} > H\\
        a_2^{new,unc},L \le a_2^{new,unc} \le H\\
        L,a_2^{new,unc} < L
        \end{array} \right.
 %]]&gt;</script>

<p>第一个变量的解为</p>

<script type="math/tex; mode=display">
a_1^{new} = a_1^{old} + {y_1}{y_2}(a_2^{old} - a_2^{new})
</script>

<p>还需要更新$b$:</p>

<script type="math/tex; mode=display">
\begin{array}{l}
b_1^{new} =  - {E_1} - {y_1}{K_{11}}(a_1^{new} - a_1^{old}) - {y_2}{K_{21}}(a_2^{new} - a_2^{old}) + {b^{old}}\\
        b_2^{new} =  - {E_2} - {y_1}{K_{12}}(a_1^{new} - a_1^{old}) - {y_2}{K_{22}}(a_2^{new} - a_2^{old}) + {b^{old}}
        \end{array}
</script>

<p>在更新$b$时，如果有$0 \lt a_1^{new} \lt C$, 则$b^{new}=b_1^{new}$，如果有$0 \lt a_2^{new} \lt C$, 则 $b^{new}=b_2^{new}$， 否则$b^{new}=\frac{b_1^{new} + b_2^{new}}{2}$。</p>

<p>由于缓存了${E_i}$,所以需要计算新的${E_i}$:</p>

<script type="math/tex; mode=display">
E_i^{new} = \sum\limits_{j=1}^N { {y_j}{a_j}K({x_i},{x_j})} + b^{new} - y_i
</script>

<h2 id="smo-1">SMO的一个实现例子</h2>

<p>我实现了一个简单的基于SMO的线性svm，是一个python脚本。实现的过程中，变量的选取并未严格按照算法讲的方法选取，选择了一个简单的选取方法。
一次迭代中，遍历所有的${a_i}$，如果${a_i}$违反了KKT条件，那么就将它做为第一个变量，然后再遍历所有的${a_i}$，依次做为第二个变量，如果第二个变量有足够的下降，那么就更新两个变量。如果没有，就不更新。</p>

<p>实现的python脚本如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>使用python实现的基于SMO的SVM  (smo.py)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/smo/smo.py">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line">
</span><span class="line"><span class="c"># SMO的一个简单实现</span>
</span><span class="line"><span class="c"># implement SMO</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">math</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
</span><span class="line">
</span><span class="line"><span class="n">samples</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line"><span class="n">labels</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line"><span class="k">class</span> <span class="nc">svm_params</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">b</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="n">params</span> <span class="o">=</span> <span class="n">svm_params</span><span class="p">()</span>
</span><span class="line"><span class="n">e_dict</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">
</span><span class="line"><span class="c">#train_data = &quot;svm.train_mix_ok&quot;</span>
</span><span class="line"><span class="n">train_data</span> <span class="o">=</span> <span class="s">&quot;svm.train&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">loaddata</span><span class="p">():</span>
</span><span class="line">    <span class="n">fn</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">train_data</span><span class="p">,</span><span class="s">&quot;r&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fn</span><span class="p">:</span>
</span><span class="line">        <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">        <span class="n">vlist</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="n">samples</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="nb">int</span><span class="p">(</span><span class="n">vlist</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">vlist</span><span class="p">[</span><span class="mi">1</span><span class="p">])))</span>
</span><span class="line">        <span class="n">labels</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">vlist</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</span><span class="line">        <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mf">0.0</span><span class="p">)</span>
</span><span class="line">    <span class="n">fn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c"># linear</span>
</span><span class="line"><span class="k">def</span> <span class="nf">kernel</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
</span><span class="line">    <span class="n">ret</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">samples</span><span class="p">[</span><span class="n">j</span><span class="p">])):</span>
</span><span class="line">        <span class="n">ret</span> <span class="o">+=</span> <span class="n">samples</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">idx</span><span class="p">]</span> <span class="o">*</span> <span class="n">samples</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">idx</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">ret</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">predict_real_diff</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span><span class="line">    <span class="n">diff</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">samples</span><span class="p">)):</span>
</span><span class="line">        <span class="n">diff</span> <span class="o">+=</span> <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">*</span> <span class="n">labels</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">*</span> <span class="n">kernel</span><span class="p">(</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">    <span class="n">diff</span> <span class="o">=</span> <span class="n">diff</span> <span class="o">+</span> <span class="n">params</span><span class="o">.</span><span class="n">b</span> <span class="o">-</span> <span class="n">labels</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">    <span class="k">return</span> <span class="n">diff</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">init_e_dict</span><span class="p">():</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">)):</span>
</span><span class="line">        <span class="n">e_dict</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">predict_real_diff</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">update_e_dict</span><span class="p">():</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">)):</span>
</span><span class="line">        <span class="n">e_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">predict_real_diff</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="n">tolerance</span><span class="p">,</span> <span class="n">times</span><span class="p">,</span> <span class="n">C</span><span class="p">):</span>
</span><span class="line">    <span class="n">time</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="n">init_e_dict</span><span class="p">()</span>
</span><span class="line">    <span class="n">updated</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">    <span class="k">while</span> <span class="n">time</span> <span class="o">&lt;</span> <span class="n">times</span> <span class="ow">and</span> <span class="n">updated</span><span class="p">:</span>
</span><span class="line">        <span class="n">updated</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">        <span class="n">time</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">)):</span>
</span><span class="line">            <span class="n">ai</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">            <span class="n">Ei</span> <span class="o">=</span> <span class="n">e_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">            <span class="c"># 违反KKT</span>
</span><span class="line">            <span class="c"># agaist the KKT</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">labels</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">Ei</span> <span class="o">&lt;</span> <span class="o">-</span><span class="n">tolerance</span> <span class="ow">and</span> <span class="n">ai</span> <span class="o">&lt;</span> <span class="n">C</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">labels</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">Ei</span> <span class="o">&gt;</span> <span class="n">tolerance</span> <span class="ow">and</span> <span class="n">ai</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">):</span>
</span><span class="line">                <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">)):</span>
</span><span class="line">                    <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="n">i</span><span class="p">:</span> <span class="k">continue</span>
</span><span class="line">                    <span class="n">eta</span> <span class="o">=</span> <span class="n">kernel</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">kernel</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">kernel</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</span><span class="line">                    <span class="k">if</span> <span class="n">eta</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">                        <span class="k">continue</span>
</span><span class="line">                    <span class="n">new_aj</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">labels</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">e_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">e_dict</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="o">/</span> <span class="n">eta</span>
</span><span class="line">                    <span class="n">L</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line">                    <span class="n">H</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line">                    <span class="k">if</span> <span class="n">labels</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">labels</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class="line">                        <span class="n">L</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">C</span><span class="p">)</span>
</span><span class="line">                        <span class="n">H</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line">                    <span class="k">else</span><span class="p">:</span>
</span><span class="line">                        <span class="n">L</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line">                        <span class="n">H</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="n">C</span> <span class="o">+</span> <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line">                    <span class="k">if</span> <span class="n">new_aj</span> <span class="o">&gt;</span> <span class="n">H</span><span class="p">:</span>
</span><span class="line">                        <span class="n">new_aj</span> <span class="o">=</span> <span class="n">H</span>
</span><span class="line">                    <span class="k">if</span> <span class="n">new_aj</span> <span class="o">&lt;</span> <span class="n">L</span><span class="p">:</span>
</span><span class="line">                        <span class="n">new_aj</span> <span class="o">=</span> <span class="n">L</span>
</span><span class="line">                    <span class="c"># 《统计学习方法》公式7.109（下同）</span>
</span><span class="line">                    <span class="c"># formula 7.109</span>
</span><span class="line">                    <span class="n">new_ai</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">labels</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">labels</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">new_aj</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">                    <span class="c"># 第二个变量下降是否达到最小步长</span>
</span><span class="line">                    <span class="c"># decline enough for new_aj</span>
</span><span class="line">                    <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">new_aj</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">0.001</span><span class="p">:</span>
</span><span class="line">                        <span class="k">print</span> <span class="s">&quot;j = </span><span class="si">%d</span><span class="s">, is not moving enough&quot;</span> <span class="o">%</span> <span class="n">j</span>
</span><span class="line">                        <span class="k">continue</span>
</span><span class="line">
</span><span class="line">                    <span class="c"># formula 7.115</span>
</span><span class="line">                    <span class="n">new_b1</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="n">b</span> <span class="o">-</span> <span class="n">e_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">labels</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">kernel</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">i</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">new_ai</span><span class="o">-</span><span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">-</span> <span class="n">labels</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">*</span><span class="n">kernel</span><span class="p">(</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">new_aj</span><span class="o">-</span><span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class="line">                    <span class="c"># formula 7.116</span>
</span><span class="line">                    <span class="n">new_b2</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="n">b</span> <span class="o">-</span> <span class="n">e_dict</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="n">labels</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">kernel</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">new_ai</span><span class="o">-</span><span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">-</span> <span class="n">labels</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">*</span><span class="n">kernel</span><span class="p">(</span><span class="n">j</span><span class="p">,</span><span class="n">j</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">new_aj</span><span class="o">-</span><span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class="line">                    <span class="k">if</span> <span class="n">new_ai</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">new_ai</span> <span class="o">&lt;</span> <span class="n">C</span><span class="p">:</span> <span class="n">new_b</span> <span class="o">=</span> <span class="n">new_b1</span>
</span><span class="line">                    <span class="k">elif</span> <span class="n">new_aj</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">new_aj</span> <span class="o">&lt;</span> <span class="n">C</span><span class="p">:</span> <span class="n">new_b</span> <span class="o">=</span> <span class="n">new_b2</span>
</span><span class="line">                    <span class="k">else</span><span class="p">:</span> <span class="n">new_b</span> <span class="o">=</span> <span class="p">(</span><span class="n">new_b1</span> <span class="o">+</span> <span class="n">new_b2</span><span class="p">)</span> <span class="o">/</span> <span class="mf">2.0</span>
</span><span class="line">
</span><span class="line">                    <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_ai</span>
</span><span class="line">                    <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_aj</span>
</span><span class="line">                    <span class="n">params</span><span class="o">.</span><span class="n">b</span> <span class="o">=</span> <span class="n">new_b</span>
</span><span class="line">                    <span class="n">update_e_dict</span><span class="p">()</span>
</span><span class="line">                    <span class="n">updated</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">                    <span class="k">print</span> <span class="s">&quot;iterate: </span><span class="si">%d</span><span class="s">, changepair: i: </span><span class="si">%d</span><span class="s">, j:</span><span class="si">%d</span><span class="s">&quot;</span> <span class="o">%</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="n">tolerance</span><span class="p">,</span> <span class="n">C</span><span class="p">):</span>
</span><span class="line">    <span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">u&quot;x1&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">plt</span><span class="o">.</span><span class="n">xlim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class="line">    <span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">u&quot;x2&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">plt</span><span class="o">.</span><span class="n">ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class="line">    <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&quot;SVM - </span><span class="si">%s</span><span class="s">, tolerance </span><span class="si">%f</span><span class="s">, C </span><span class="si">%f</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">train_data</span><span class="p">,</span> <span class="n">tolerance</span><span class="p">,</span> <span class="n">C</span><span class="p">))</span>
</span><span class="line">    <span class="n">ftrain</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">train_data</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">ftrain</span><span class="p">:</span>
</span><span class="line">        <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">        <span class="n">sam</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">sam</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class="line">            <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">sam</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">sam</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#39;or&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">sam</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">sam</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#39;og&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">w1</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line">    <span class="n">w2</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">labels</span><span class="p">)):</span>
</span><span class="line">        <span class="n">w1</span> <span class="o">+=</span> <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">labels</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">samples</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">        <span class="n">w2</span> <span class="o">+=</span> <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">labels</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">samples</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">    <span class="n">w</span> <span class="o">=</span> <span class="o">-</span> <span class="n">w1</span> <span class="o">/</span> <span class="n">w2</span>
</span><span class="line">
</span><span class="line">    <span class="n">b</span> <span class="o">=</span> <span class="o">-</span> <span class="n">params</span><span class="o">.</span><span class="n">b</span> <span class="o">/</span> <span class="n">w2</span>
</span><span class="line">    <span class="n">r</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">w2</span>
</span><span class="line">
</span><span class="line">    <span class="n">lp_x1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">90</span><span class="p">]</span>
</span><span class="line">    <span class="n">lp_x2</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">lp_x2up</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">lp_x2down</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">x1</span> <span class="ow">in</span> <span class="n">lp_x1</span><span class="p">:</span>
</span><span class="line">        <span class="n">lp_x2</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">w</span> <span class="o">*</span> <span class="n">x1</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line">        <span class="n">lp_x2up</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">w</span> <span class="o">*</span> <span class="n">x1</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">r</span><span class="p">)</span>
</span><span class="line">        <span class="n">lp_x2down</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">w</span> <span class="o">*</span> <span class="n">x1</span> <span class="o">+</span> <span class="n">b</span> <span class="o">-</span> <span class="n">r</span><span class="p">)</span>
</span><span class="line">    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">lp_x1</span><span class="p">,</span> <span class="n">lp_x2</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">lp_x1</span><span class="p">,</span> <span class="n">lp_x2up</span><span class="p">,</span> <span class="s">&#39;b--&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">lp_x1</span><span class="p">,</span> <span class="n">lp_x2down</span><span class="p">,</span> <span class="s">&#39;b--&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class="line">    <span class="n">loaddata</span><span class="p">()</span>
</span><span class="line">    <span class="k">print</span> <span class="n">samples</span>
</span><span class="line">    <span class="k">print</span> <span class="n">labels</span>
</span><span class="line">    <span class="c"># 惩罚系数</span>
</span><span class="line">    <span class="c"># penalty for mis classify</span>
</span><span class="line">    <span class="n">C</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class="line">    <span class="c"># 计算精度</span>
</span><span class="line">    <span class="c"># computational accuracy </span>
</span><span class="line">    <span class="n">tolerance</span> <span class="o">=</span> <span class="mf">0.0001</span>
</span><span class="line">    <span class="n">train</span><span class="p">(</span><span class="n">tolerance</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="n">C</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;a = &quot;</span><span class="p">,</span> <span class="n">params</span><span class="o">.</span><span class="n">a</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;b = &quot;</span><span class="p">,</span> <span class="n">params</span><span class="o">.</span><span class="n">b</span>
</span><span class="line">    <span class="n">support</span> <span class="o">=</span>  <span class="p">[]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">)):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">params</span><span class="o">.</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">C</span><span class="p">:</span>
</span><span class="line">            <span class="n">support</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">samples</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;support vector = &quot;</span><span class="p">,</span> <span class="n">support</span>
</span><span class="line">    <span class="n">draw</span><span class="p">(</span><span class="n">tolerance</span><span class="p">,</span> <span class="n">C</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>脚本使用的训练数据可以下载<a href="https://github.com/liuhongjiang/blog_projects/tree/master/svm">SMO实现的代码</a>的svm.train文件，或者使用<a href="https://github.com/liuhongjiang/blog_projects/blob/master/svm/blog_linear.py">blog_linear.py</a>，通过改变变量<code>separable</code>可以生成能够完全划分开的样本和不能划分开的样本。</p>

<p>这个smo.py脚本是一个线性的svm，替换掉脚本中<code>kernel</code>函数，就可以成为一个非线性的svm。
下面这两张图片是用训练数据训练的结果。这一张是样本能完全分离开的:</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/svm/svm_sep_ok.png" /></p>

<p>这一张是样本不能完全分离开的：</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/svm/svm_not_sep.png" /></p>

<p>以上就是如何实现SMO的全部内容。之前的一个同事实现了一个简单的识别手写数字ocr，下一章，我们也来用svm实现一个简单的识别数字的ocr吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SVM支持向量机]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2012/12/26/svm/"/>
    <updated>2012-12-26T19:40:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2012/12/26/svm</id>
    <content type="html"><![CDATA[<p>是今年工作中才开始接触机器学习的，之前有所听说，但是也没有深入了解过。其实所谓的接触主要是照着李航的这本<a href="http://book.douban.com/subject/10590856/">《统计学习方法》</a>学习。当时我们是几个同事每人学习一章，学完了，然后给大家办个讲座。我想既然学习了，就应该写博客把这些内容记录下来。于是，就开始写了。</p>

<p>机器学习是最近十年兴起的一门学科。人工智能是计算机学界的一个公认的难题，而机器学习被认为是最有可能解决这个难题的一门学科。当然机器学习在其它很多领域都有应用，比如数据挖掘，信息检索，语言识别，图像识别等很多领域。对于机器学习的基本概念，可以看<a href="http://book.douban.com/subject/10590856/">《统计学习方法》</a>的第一章，发展历史可以看wikipedia的<a href="http://en.wikipedia.org/wiki/Machine_learning">Machine learning</a>。我这里就不罗嗦了。等以后再写一篇机器学习的综述文章吧。</p>

<p>按照<a href="http://book.douban.com/subject/10590856/">《统计学习方法》</a>的划分，机器学习可以分为监督学习，无监督学习和半监督学习、强化学习等。该书讲了监督学习，总共讲了这些学习模型：感知机、k近邻法、朴素贝叶斯法、决策树、逻辑斯谛回归、最大熵、支持向量机、EM算法、隐马尔科夫模型、条件随机场。我先把我们学习过的模型写成博客吧。但其实每个模型都有很多内容，以我一个初学者的水平估计也讲不了什么，我就按照我的理解讲，每个模型争取能实现一个例子，供大家参考。</p>

<p>今天第一篇，SVM（support vector machine, 支持向量机）。</p>

<!-- more -->

<h2 id="section">线性支持向量机</h2>

<p>SVM是一个分类器，而且还只能二分，也就是回答yes or no的问题。先用图说话，</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/svm/samples.png" /></p>

<p>上面的图中的红点和绿点分布代表不同的两个类别，很明显了可以用一条直线将它们分开, 例如下面的蓝线。</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/svm/samples_line.png" /></p>

<p>上面的蓝线就是一种分类方法，当然你也可以画一条曲线，或者用一个圆圈把红点包围起来，这些都可以。用一条直线划分，就是线性的划分方式。这样的线性划分方式，可以用感知机，也可以用线性支持向量进行划分。(关于感知机，可以参考<a href="http://book.douban.com/subject/10590856/">《统计学习方法》</a>的第二章，这里就不多讲了。</p>

<p>其实这样的直线有很多条，例如下图中的蓝线、红线、黄线，都是可以。</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/svm/samples_3lines.png" /></p>

<p>那么svm是按照什么原则确定哪条划分的直线呢？svm的原则是“找到一条直线，把所有的样本点尽量分开”，换句话说，在一类样本点中，离划分直线最近点，到划分直接的距离要越大越好，那些点就被称之为支撑向量(surpport vector)。支持向量机的学习目标，就是找到那样的一条划分直线。例如下图中的蓝色实线，就是一个支持向量机。</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/svm/svm_sep.png" /></p>

<p>图中在蓝色虚线上的3个点，就是支持向量。现在来理解一下“距离越大越好”，这个距离是指的支持向量到划分直线的距离，对应图中的粉色线条，并不是说的两个支持向量直接的距离，即非图中的绿色线条。</p>

<p>以上就是一个简单的svm的原理模型。稍微扩展一下，上面的例子中，所有的点都是二维的，那么就可以用一条直线把它们划分开，对于样本点是多维的情况，那么支持向量机算出来的是一个超平面，也称之为间隔分离超平面。</p>

<p>可以将上面的问题，抽象化，即最大化间隔分离超平面，可以用下面的公式表示(推导见<a href="http://book.douban.com/subject/10590856/">《统计学习方法》</a>的7.1)：</p>

<script type="math/tex; mode=display">
\begin{array}{l}
\mathop {\max }\limits_{w,b} \qquad \frac{\hat \gamma }{\left\| w \right\|}\\
{\rm{s.t.}} \qquad {y_i}(w\cdot{x_i} + b) \ge \hat \gamma 
\end{array}
</script>

<p>上面的公式中，$\hat \gamma$表示样本点到分离超平面的距离，${x_i}$为样本点，${y_i}$为样本点的分类，这里一般取1和-1。</p>

<p>可以令$\hat \gamma  = 1$，另最大化$\frac{1}{\left \| w \right \|}$与最小化$\frac{1}{2}\left\| w \right\|^2$是等价的，所以上面的公式可以变化为：</p>

<script type="math/tex; mode=display">
\begin{array}{l}
\mathop {\max }\limits_{w,b} \qquad \frac{1}{2}\left\| w \right\|^2\\
{\rm{s.t.}} \qquad {y_i}(w\cdot{x_i} + b) - 1 \ge 0
\end{array}
</script>

<p>求解上面的问题，可以通过建立拉格朗日函数，并通过对偶变化，最终将问题转换成求解下面的公式：</p>

<script type="math/tex; mode=display">
\begin{array}{l}
\mathop {\min }\limits_a \qquad \frac{1}{2}\sum\limits_{i = 1}^N {\sum\limits_{j = 1}^N { {a_i}{a_j}{y_i}{y_j}({x_i}\cdot{x_j}) - \sum\limits_{i = 1}^N { {a_i}} } } \\
{\rm{s.t.}}\qquad\sum\limits_{i = 1}^N { {a_i}{y_i} = 0} \\
\qquad\qquad{a_i} \ge 0, \qquad i = 1,2,\cdot\cdot\cdot,N
\end{array}
</script>

<p>上面式子中的${a_i}$为拉格朗日因子, $N$为样本的数量。svm的学习实际上就是求出分离超平面，也就是求解上面公式中的${a_i}$。假设上面问题的解为 </p>

<script type="math/tex; mode=display"> 
{a^*} = {\left( {a_1^*,a_2^*, \cdot  \cdot  \cdot ,a_N^* } \right)^T} 
</script>

<p>同时存在下标$j$使得 $ a_j^* \gt 0 $ ，那么分离超平面的解为：</p>

<script type="math/tex; mode=display">
\begin{array}{l}
{w^*} = \sum\limits_{i = 1}^N {a_i^*{y_i}{x_i}} \\
{b^*} = {y_j} - \sum\limits_{i = 1}^N {a_i^*{y_i}({x_i} \cdot {x_j})} 
\end{array}
</script>

<p>分离超平面可以表示为</p>

<script type="math/tex; mode=display">
\sum\limits_{i=1}^N {a_i^*{y_i}({x_i} \cdot {x_j})} + {b^*} = 0
</script>

<p>分类的决策函数可以写成</p>

<script type="math/tex; mode=display">
f(x) = sign(\sum\limits_{i=1}^N {a_i^*{y_i}({x_i} \cdot {x_j})} + {b^*})
</script>

<p>$sign$为符号函数，如果函数类的表达式算出来的值为正，符号函数的结果为1，对应分类的正样本，反之，符号函数的结果为-1，对应分类的负样本。</p>

<h2 id="section-1">软间隔最大化</h2>

<p>对于上面的例子，可以用一条直线或者说一个超平面将训练集分开，但往往问题没有那么简单。绝大多数的情况下两类样本是无法完全分来的。虽然绝大部分的点可以分开，但是还是有少部分点混合在一起无法分开。</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/svm/samples_mix.png" /></p>

<p>上图的例子就是这样的一个例子了。无论怎么画直线都不可能把两类点完全分开。但如果我们可以容忍一部分点出现异常，或者不完全满足大于等于1的条件，那么就可以对每个样本点引入一个松弛变量${\xi _i} \gt 0$， 同时为目标函数需要为每个${\xi _i}$付出代价，这样线性svm的目标函数就变成了这样(原始问题）</p>

<script type="math/tex; mode=display">
\begin{array}{l}
\mathop {\max }\limits_{w,b,\xi } \qquad \frac{1}{2}{\left\| w \right\|^2} + C\sum\limits_{i = 1}^N { {\xi _i}} \\
{\rm{s.t.}} \qquad {y_i}(w \cdot {x_i} + b) \ge 1 - {\xi _i}, \qquad i = 1,2, \cdot  \cdot  \cdot ,N\\
\qquad \qquad {\xi _i} \ge 0, \qquad i = 1,2, \cdot  \cdot  \cdot ,N
\end{array}
</script>

<p>上式中的$C \gt 0$称为惩罚参数，由应用问题决定，通常也是模型调优时，需要重点关注的参数。$C$值大，对误分类的惩罚增大，值小，对误分类的惩罚减小。</p>

<p>这样原始问题的对偶问题就变成了这样(参考<a href="http://book.douban.com/subject/10590856/">《统计学习方法》</a>的7.2)：</p>

<script type="math/tex; mode=display">
\begin{array}{l}
\mathop {\min }\limits_a \qquad \frac{1}{2}\sum\limits_{i = 1}^N {\sum\limits_{j = 1}^N { {a_i}{a_j}{y_i}{y_j}({x_i}\cdot{x_j}) - \sum\limits_{i = 1}^N { {a_i}} } } \\
{\rm{s.t.}}\qquad\sum\limits_{i = 1}^N { {a_i}{y_i} = 0} \\
\qquad\qquad 0 \le {a_i} \le C, \qquad i = 1,2,\cdot\cdot\cdot,N
\end{array}
</script>

<p>引入松弛变量的对偶问题，与没有引入的对偶问题的差别很小，仅仅是拉格朗日因子${a_i}$的取值范围不同，没有引入松弛变量的为${a_i} \ge 0$, 引入的为$0 \le {a_i} \le C$, 松弛变量在数学变换中，被消除了。</p>

<p>上面对偶问题求出的解和分离超平面、分类决策函数与之前求出的表达式是一直的。唯一不同的是下面的求 ${b^*}$ 表达式</p>

<script type="math/tex; mode=display">
{b^*} = {y_j} - \sum\limits_{i = 1}^N {a_i^*{y_i}({x_i} \cdot {x_j})} 
</script>

<p>原来寻找下标j的条件为 $a_j^* \gt 0$, 现在变为了 $0 \lt a_j^* \lt C$</p>

<p>由于引入松弛变量后的对偶问题的解有可能不能满足上面的条件，所有的解都等于$C$，计算时可以取所有解计算出来的均值，即将所有解对样的样本点带入上面求 ${b^*}$ 的公式中，计算出 ${b^*}$ 后，再求均值。</p>

<p>对于上面对偶问题的解，如果 ${a^*} \gt 0$, 那么这样的解对应的样本点${x_i}$，都称之为支持向量（软间隔的支持向量），样本点${x_i}$到间隔边界的距离为$\frac{\xi _i}{\left \| w \right \|}$。可以参考《统计学习方法》的图7.5。</p>

<p>下面是根据上面的例子计算出来的分离直线和间隔边界</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/svm/svm_not_sep.png" /></p>

<h2 id="section-2">非线性支持向量机</h2>

<p>上面讲到了线性支持向量机，但实际情况中，还有很多更混杂在一起的数据，不能用线性支持向量机，但是还可以用非线性支持向量机。看下面的一个例子。</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/svm/draw_kernel.png" /></p>

<p>上图中，左边的图中的点是无法用线性函数分开的，但是非线性可以划分开，例如用一个圆可以划分开。还有一种方法，经过一定的数学映射后，数据就变得可以线性划分了。例如上图中的右图，考虑使用下面的映射后，就可以用图中的蓝线划分开，当然也就可以应用svm了。</p>

<script type="math/tex; mode=display">
({x_1},{x_2}) \to (x_1^2,x_2^2)
</script>

<p>非线性支持向量机，就是利用了和上面方法相同的思路，解决线性不可分的问题。这个方法叫核函数。</p>

<p>设$\chi $是输入空间，规定了一个映射函数$\phi (x)$，如果对于所有的$x,z \in \chi $，核函数$K(x,z)$都满足</p>

<script type="math/tex; mode=display">
K(x,z) = \phi (x) \cdot \phi (z)
</script>

<p>其中$\phi (x) \cdot \phi (z)$为内积。</p>

<p>有了核函数，就可以讲数据$x_i$映射到更高的维度，甚至是无穷维，但同时又满足了内积的约束，就可以使用SVM去解决这个问题。可以参考《统计学习方法》的例子7.3，这个例子就实现了将$x$映射到高纬度, 并满足核函数的定义。</p>

<p>那么核函数是怎么用到svm中的呢？实际上就是替换对偶问题中的最小化的目标函数，将</p>

<script type="math/tex; mode=display">
\mathop {\min }\limits_a \qquad \frac{1}{2}\sum\limits_{i = 1}^N {\sum\limits_{j = 1}^N { {a_i}{a_j}{y_i}{y_j}({x_i}\cdot{x_j}) - \sum\limits_{i = 1}^N { {a_i}} } }
</script>

<p>用核函数替换${x_i}\cdot{x_j}$，变成</p>

<script type="math/tex; mode=display">
\mathop {\min }\limits_a \qquad \frac{1}{2}\sum\limits_{i = 1}^N {\sum\limits_{j = 1}^N { {a_i}{a_j}{y_i}{y_j}K({x_i},{x_j}) - \sum\limits_{i = 1}^N { {a_i}} } }
</script>

<p>参数${b^*}$的计算公式变成了（但分量$j$的选取条件未变）：</p>

<script type="math/tex; mode=display">
{b^*} = {y_j} - \sum\limits_{i = 1}^N {a_i^*{y_i}K({x_i} \cdot {x_j})} 
</script>

<p>而分类决策函数也相应变了</p>

<script type="math/tex; mode=display">
f(x) = sign(\sum\limits_{i=1}^N {a_i^*{y_i}K({x_i}, {x_j})} + {b^*})
</script>

<p>其余的公式都与上面的线性支持向量机相同。</p>

<p>其实在实际的应用中，并不需要找映射函数，只需要使用到核函数，而且核函数也不需要我们费什么劲去找，可以直接用一些常用的核函数，例如：多项式核函数，高斯核函数，字符串核函数等。</p>

<h2 id="section-3">小结</h2>

<p>前面简单介绍了支持向量机，支持向量机分为线性支持向量机和非线性支持向量机。非线性支持向量机是通过核函数将一个线性不可分的问题转变成为一个线性可分的问题。其实线性支持向量机可以视为一种使用了特殊核函数$K({x_i},{x_j})=({x_i}\cdot{x_j})$的非线性支持向量机。那么SVM的对偶问题可以统一表示为下面的公式。SVM的学习，就是求出下面问题的解。</p>

<script type="math/tex; mode=display">
\begin{array}{l}
\mathop {\min }\limits_a \qquad \frac{1}{2}\sum\limits_{i = 1}^N {\sum\limits_{j = 1}^N { {a_i}{a_j}{y_i}{y_j}K({x_i},{x_j}) - \sum\limits_{i = 1}^N { {a_i}} } } \\
{\rm{s.t.}}\qquad\sum\limits_{i = 1}^N { {a_i}{y_i} = 0} \\
\qquad\qquad 0 \le {a_i} \le C, \qquad i = 1,2,\cdot\cdot\cdot,N
\end{array}
</script>

<p>选择一个 $ {a^*} $ 的正分量 $ 0 \lt {a_j^*} \lt C $ , 计算（或者通过所有解求平均值）：</p>

<script type="math/tex; mode=display">
{b^*} = {y_j} - \sum\limits_{i = 1}^N {a_i^*{y_i}K({x_i} \cdot {x_j})} 
</script>

<p>决策函数为</p>

<script type="math/tex; mode=display">
f(x) = sign(\sum\limits_{i=1}^N {a_i^*{y_i}K({x_i}, {x_j})} + {b^*})
</script>

<p>有了问题，如何利用计算机，解出这些数学公式的答案。换句话说，就是怎么通过计算机算出我们的svm模型的参数呢？方法就是序列最小最优化(sequential minimal optimization, SMO)算法。下一篇文章，我们就来讲解SMO。 </p>

<h2 id="section-4">相关工具</h2>

<p>本文中的例子和图片都是用python制作的。可以参考<a href="https://github.com/liuhongjiang/blog_projects/tree/master/svm">github上相关的代码</a>，有兴趣的同学可以讲代码拷贝过去，运行一下。</p>

<ul>
  <li><a href="https://github.com/liuhongjiang/blog_projects/blob/master/svm/blog_linear.py">blog_linear.py</a>可用于生成这篇博文中线性支持向量机的图片</li>
  <li><a href="https://github.com/liuhongjiang/blog_projects/blob/master/svm/blog_kernel.py">blog_kernel.py</a>生成非线性支持向量机的核技巧展示图片</li>
  <li><a href="https://github.com/liuhongjiang/blog_projects/blob/master/svm/smo.py">smo.py</a>是smo算法的实现，下一篇文章将讲到。</li>
</ul>

<p>图片使用了python的扩展库<a href="http://matplotlib.org/">matplotlib</a>。安装matplotlib方法如下：</p>

<p>我使用的是ubuntu 12.04, 最简单的安装方法</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo apt-get install python-matplotlib
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但不是最新的，要安装最新，按照下面的方法</p>

<p><a href="http://www.codecho.com/install-matplotlib-on-ubuntu-12-04/">Ubuntu安装Matplotlib</a></p>

<p><a href="http://iefan.is-programmer.com/posts/33592.html">在ubuntu下安装scipy-numpy-matplotlib-ipython</a></p>

<p><a href="http://scipy.org/Installing_SciPy/Linux">Installing SciPy / Linux</a></p>

<p><a href="http://forum.ubuntu.org.cn/viewtopic.php?f=88&amp;t=391300">(转）在Ubuntu中安装Python科学计算环境</a></p>

<h2 id="john-hunter-1968-2012">John Hunter (1968-2012)</h2>

<p><img class="right" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/svm/John-hunter-crop-2.jpg" /></p>

<blockquote>
  <p>On August 28 2012, John D. Hunter, the creator of matplotlib, died from complications arising from cancer treatment, after a brief but intense battle with this terrible illness. John is survived by his wife Miriam, his three daughters Rahel, Ava and Clara, his sisters Layne and Mary, and his mother Sarah.</p>

  <p>If you have benefited from John’s many contributions, please say thanks in the way that would matter most to him. Please consider making a donation to the <a href="http://numfocus.org/johnhunter">John Hunter Memorial Fund</a>.</p>
</blockquote>

<p>Thanks for creating such a great tool. May you rest in peace!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jni调用C和C++]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2012/12/07/jni-call/"/>
    <updated>2012-12-07T13:29:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2012/12/07/jni-call</id>
    <content type="html"><![CDATA[<p>已经在工作中碰到了两个这样的例子了，项目用java，但需要调用C/C++的库。之前一个是用java写hadoop的job，但是调用的算法是用C++实现的，使用的是jni。现在好像jni在android上面也有用到，但是我不了解。我自己也不懂java，但实际工作中有的时候也要看看java代码。所以决定写一个简单的jni例子，了解一下jni怎么完成C/C++调用的。</p>

<!-- more -->

<p>对于jni的内部实现，我也是不求甚解。编写一个java程序</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>jni调用的java代码  (Sample1.java)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/jni-call/Sample1.java">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample1</span> <span class="o">{</span>
</span><span class="line">	<span class="kd">public</span> <span class="kd">native</span> <span class="kt">int</span> <span class="nf">intMethod</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">);</span>
</span><span class="line">	<span class="kd">public</span> <span class="kd">native</span> <span class="kt">boolean</span> <span class="nf">booleanMethod</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">bool</span><span class="o">);</span>
</span><span class="line">	<span class="kd">public</span> <span class="kd">native</span> <span class="n">String</span> <span class="nf">stringMethod</span><span class="o">(</span><span class="n">String</span> <span class="n">text</span><span class="o">);</span>
</span><span class="line">	<span class="kd">public</span> <span class="kd">native</span> <span class="kt">int</span> <span class="nf">intArrayMethod</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">intArray</span><span class="o">);</span>
</span><span class="line">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">		<span class="n">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">&quot;Sample1&quot;</span><span class="o">);</span>
</span><span class="line">		<span class="n">Sample1</span> <span class="n">sample</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sample1</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">		<span class="kt">int</span> <span class="n">square</span> <span class="o">=</span> <span class="n">sample</span><span class="o">.</span><span class="na">intMethod</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span><span class="line">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;intMethod: &quot;</span> <span class="o">+</span> <span class="n">square</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">		<span class="kt">boolean</span> <span class="n">bool</span> <span class="o">=</span> <span class="n">sample</span><span class="o">.</span><span class="na">booleanMethod</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class="line">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;booleanMethod: &quot;</span> <span class="o">+</span> <span class="n">bool</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">		<span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">sample</span><span class="o">.</span><span class="na">stringMethod</span><span class="o">(</span><span class="s">&quot;java&quot;</span><span class="o">);</span>
</span><span class="line">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;stringMethod: &quot;</span> <span class="o">+</span> <span class="n">text</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">		<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">sample</span><span class="o">.</span><span class="na">intArrayMethod</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">13</span> <span class="o">});</span>
</span><span class="line">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;intArrayMethod: &quot;</span> <span class="o">+</span> <span class="n">sum</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后编译java文件</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">javac Sample1.java
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>编译完以后, 使用下面的命令生成jni调用的头文件</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">javah -classpath ./ -jni Sample1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>生成的头文件为Sample1.h, 就是下面C/C++实现的函数的声明, <em> 注意：Sample1.h是自动生成的</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>jni生成的头文件  (Sample1.h)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/jni-call/Sample1.h">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cm">/* DO NOT EDIT THIS FILE - it is machine generated */</span>
</span><span class="line"><span class="cp">#include &lt;jni.h&gt;</span>
</span><span class="line"><span class="cm">/* Header for class Sample1 */</span>
</span><span class="line">
</span><span class="line"><span class="cp">#ifndef _Included_Sample1</span>
</span><span class="line"><span class="cp">#define _Included_Sample1</span>
</span><span class="line"><span class="cp">#ifdef __cplusplus</span>
</span><span class="line"><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm"> * Class:     Sample1</span>
</span><span class="line"><span class="cm"> * Method:    intMethod</span>
</span><span class="line"><span class="cm"> * Signature: (I)I</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span> <span class="n">Java_Sample1_intMethod</span>
</span><span class="line">  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">,</span> <span class="n">jint</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm"> * Class:     Sample1</span>
</span><span class="line"><span class="cm"> * Method:    booleanMethod</span>
</span><span class="line"><span class="cm"> * Signature: (Z)Z</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="n">JNIEXPORT</span> <span class="n">jboolean</span> <span class="n">JNICALL</span> <span class="n">Java_Sample1_booleanMethod</span>
</span><span class="line">  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">,</span> <span class="n">jboolean</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm"> * Class:     Sample1</span>
</span><span class="line"><span class="cm"> * Method:    stringMethod</span>
</span><span class="line"><span class="cm"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span> <span class="n">Java_Sample1_stringMethod</span>
</span><span class="line">  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">,</span> <span class="n">jstring</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm"> * Class:     Sample1</span>
</span><span class="line"><span class="cm"> * Method:    intArrayMethod</span>
</span><span class="line"><span class="cm"> * Signature: ([I)I</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span> <span class="n">Java_Sample1_intArrayMethod</span>
</span><span class="line">  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">,</span> <span class="n">jintArray</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="cp">#ifdef __cplusplus</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line"><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>有了头文件后，就可以实现这些调用的C/C++代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>C++实现的Sample1.cpp  (Sample1.cpp)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/jni-call/Sample1.cpp">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#include &quot;Sample1.h&quot;</span>
</span><span class="line"><span class="cp">#include &lt;string.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;ctype.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
</span><span class="line"><span class="n">Java_Sample1_intMethod</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jint</span> <span class="n">num</span><span class="p">){</span>
</span><span class="line">   <span class="k">return</span> <span class="n">num</span> <span class="o">*</span> <span class="n">num</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">JNIEXPORT</span> <span class="n">jboolean</span> <span class="n">JNICALL</span>
</span><span class="line"><span class="n">Java_Sample1_booleanMethod</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jboolean</span> <span class="n">boolean</span><span class="p">){</span>
</span><span class="line">   <span class="k">return</span> <span class="o">!</span><span class="n">boolean</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span>
</span><span class="line"><span class="n">Java_Sample1_stringMethod</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jstring</span> <span class="n">jstr</span><span class="p">){</span>
</span><span class="line">     <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetStringUTFChars</span><span class="p">(</span><span class="n">jstr</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">     <span class="kt">char</span> <span class="n">cap</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class="line">     <span class="n">strcpy</span><span class="p">(</span><span class="n">cap</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class="line">     <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">jstr</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class="line">	 <span class="kt">char</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">cap</span><span class="p">;</span>
</span><span class="line">	 <span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">ptr</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">){</span>
</span><span class="line">		 <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">toupper</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span><span class="line">		 <span class="n">ptr</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">	 <span class="p">}</span>
</span><span class="line">     <span class="k">return</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">cap</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
</span><span class="line"><span class="n">Java_Sample1_intArrayMethod</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jintArray</span> <span class="n">array</span><span class="p">){</span>
</span><span class="line">     <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">     <span class="n">jsize</span> <span class="n">len</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetArrayLength</span><span class="p">(</span><span class="n">array</span><span class="p">);</span>
</span><span class="line">     <span class="n">jint</span> <span class="o">*</span><span class="n">body</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetIntArrayElements</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">     <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="n">sum</span> <span class="o">+=</span> <span class="n">body</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">     <span class="p">}</span>
</span><span class="line">     <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleaseIntArrayElements</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">     <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后调用下面的命令生成动态链接库(系统:ubuntu 12.04，gcc编译）</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">g++ -I /usr/lib/jvm/java-1.6.0-openjdk/include/ -I /usr/lib/jvm/java-1.6.0-openjdk/include/linux/ Sample1.cpp -fPIC -shared -o libSample1.so
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>具体的jdk的路径应该是和本地的相适应的。</p>

<p>然后运行java程序</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">java Sample1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>运行结果如下</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/jni-call/cpp-output.jpg" /></p>

<p>图中加入了一个环境变量的声明，<code>export LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH</code>, 当java加载动态链接库时，会在本地路径下找libSample1.so。</p>

<p>上面是调用C++的代码，C实现的代码如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>C语言实现的Sample1.c  (Sample1.c)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/jni-call/Sample1.c">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm"> * the difference between C++ and c like this:</span>
</span><span class="line"><span class="cm"> *		const char *str = (*env)-&gt;GetStringUTFChars(env, jstr, 0);</span>
</span><span class="line"><span class="cm"> *		const char *str = env-&gt;GetStringUTFChars(jstr, 0);</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="cp">#include &quot;Sample1.h&quot;</span>
</span><span class="line"><span class="cp">#include &lt;string.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;ctype.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
</span><span class="line"><span class="n">Java_Sample1_intMethod</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jint</span> <span class="n">num</span><span class="p">){</span>
</span><span class="line">   <span class="k">return</span> <span class="n">num</span> <span class="o">*</span> <span class="n">num</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">JNIEXPORT</span> <span class="n">jboolean</span> <span class="n">JNICALL</span>
</span><span class="line"><span class="n">Java_Sample1_booleanMethod</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jboolean</span> <span class="n">boolean</span><span class="p">){</span>
</span><span class="line">   <span class="k">return</span> <span class="o">!</span><span class="n">boolean</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span>
</span><span class="line"><span class="n">Java_Sample1_stringMethod</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jstring</span> <span class="n">jstr</span><span class="p">){</span>
</span><span class="line">     <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">jstr</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">     <span class="kt">char</span> <span class="n">cap</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class="line">     <span class="n">strcpy</span><span class="p">(</span><span class="n">cap</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class="line">     <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">jstr</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class="line">	 <span class="kt">char</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">cap</span><span class="p">;</span>
</span><span class="line">	 <span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">ptr</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">){</span>
</span><span class="line">		 <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">toupper</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span><span class="line">		 <span class="n">ptr</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">	 <span class="p">}</span>
</span><span class="line">     <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">cap</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
</span><span class="line"><span class="n">Java_Sample1_intArrayMethod</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jintArray</span> <span class="n">array</span><span class="p">){</span>
</span><span class="line">     <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">     <span class="n">jsize</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetArrayLength</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">array</span><span class="p">);</span>
</span><span class="line">     <span class="n">jint</span> <span class="o">*</span><span class="n">body</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntArrayElements</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">array</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">     <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">		<span class="n">sum</span> <span class="o">+=</span> <span class="n">body</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">     <span class="p">}</span>
</span><span class="line">     <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseIntArrayElements</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">array</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">     <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>C与C++的实现基本一样，唯一的差异在于用来访问 JNI 函数的方法。在 C 中，JNI 函数调用由“(*env)-&gt;”作前缀，目的是为了取出函数指针所引用的值。在 C++ 中，JNIEnv 类拥有处理函数指针查找的内联成员函数。下面将说明这个细微的差异，其中，这两行代码访问同一函数，但每种语言都有各自的语法。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">C</span> <span class="err">语法：</span><span class="n">jsize</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetArrayLength</span><span class="p">(</span><span class="n">env</span><span class="p">,</span><span class="n">array</span><span class="p">);</span>
</span><span class="line"><span class="n">C</span><span class="o">++</span> <span class="err">语法：</span><span class="n">jsize</span> <span class="n">len</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetArrayLength</span><span class="p">(</span><span class="n">array</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>编译命令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">gcc -I /usr/lib/jvm/java-1.6.0-openjdk/include/ -I /usr/lib/jvm/java-1.6.0-openjdk/include/linux/ Sample1.c -fPIC -shared -o libSample1.so
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>运行结果与上面C++的输出是一致的。</p>

<p>实际上我是用了一个脚本完成编译等工作的</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>完成整个过程的脚本  (run.sh)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/jni-call/run.sh">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;### compile Sample1.java&quot;</span>
</span><span class="line">javac Sample1.java
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;### generate jni headerfile Sample1.h&quot;</span>
</span><span class="line">javah -classpath ./ -jni Sample1
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;### compile cpp Sample1.so&quot;</span>
</span><span class="line">g++ -I /usr/lib/jvm/java-1.6.0-openjdk/include/ -I /usr/lib/jvm/java-1.6.0-openjdk/include/linux/ Sample1.cpp -fPIC -shared -o libSample1.so
</span><span class="line">
</span><span class="line"><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span>.:<span class="nv">$LD_LIBRARY_PATH</span>
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;### run cpp&quot;</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;---------------&quot;</span>
</span><span class="line">java Sample1
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;--------------- end&quot;</span>
</span><span class="line">
</span><span class="line">rm libSample1.so
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;### compile c Sample1.so&quot;</span>
</span><span class="line">gcc -I /usr/lib/jvm/java-1.6.0-openjdk/include/ -I /usr/lib/jvm/java-1.6.0-openjdk/include/linux/ Sample1.c -fPIC -shared -o libSample1.so
</span><span class="line">
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;### run c&quot;</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;---------------&quot;</span>
</span><span class="line">java Sample1
</span><span class="line">
</span><span class="line"><span class="c">#rm libSample1.so Sample1.class Sample1.h</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>脚本的运行结果如下图</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/jni-call/run-output.jpg" /></p>

<p>github上本文的例子代码 <a href="https://github.com/andrewliu117/test/tree/master/cpp_test/jni">jni调用的例子</a></p>

<p>本文参考了以下两个blog的内容, 代码来自第二个blog。</p>

<ul>
  <li><a href="http://www.cnblogs.com/hoys/archive/2011/09/30/2196290.html">Java基础知识——JNI入门介绍</a></li>
  <li><a href="http://blog.sina.com.cn/s/blog_60c8379d01015epl.html">第二篇：一个jni例子</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[虚继承]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2012/11/30/virtual-inheritance/"/>
    <updated>2012-11-30T15:13:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2012/11/30/virtual-inheritance</id>
    <content type="html"><![CDATA[<p>C++里面的virtual关键字可以用虚函数声明，也可以用于虚继承。上一篇博客讲到了<a href="http://liuhongjiang.github.com/tech/blog/2012/11/29/virtual-function/">《虚函数》</a>，这篇博客就讲虚继承。</p>

<p>首先来看为什么需要虚继承。C++里面继承关系中有个很有名的继承结构，菱形继承，如下图所示</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/virtualinheritance/iostream.jpg" /></p>

<p>普通继承，派生类包含了基类所有的非static成员。如果采用普通继承，在上图的iostream类中，实际上会存在两个ios基类。这样会带来很多问题，首先最简单的是空间浪费，iostream类中存在两个相同的ios类,然后是构造效率低，需要构造两个ios类。更严重的是调用基类中的函数时，存在二义性，当iostream调用ios的成员函数时，编译器无法知道是调用istream还是ostream中的ios。</p>

<p>C++的解决方案就是虚拟继承(Virtual Inheritance)。虚拟继承可以说成虚继承，在本文中，这两个词是等价的。 在虚拟继承下，只有一个共享的基类子对象被继承，而无论该基类在派生层次中出现多少次。共享的基类子对象被称为虚拟基类（virtual base class）。在虚拟继承下，基类子对象的复制及由此而引起的二义性都被消除了。</p>

<!-- more -->

<p>先看看如果没有续集继承的情况下，菱形继承会出现什么情况</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>普通继承的菱形继承  (inheritance.cc)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/virtualinheritance/inheritance.cc">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="c1">// 普继承关系下的菱形继承</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">top</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is top;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class="line">        <span class="kt">void</span> <span class="n">printself</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in top::printself&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle2</span><span class="o">:</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">bottom</span><span class="o">:</span> <span class="k">public</span> <span class="n">middle1</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle2</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">bottom</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is bottom;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class="line">    <span class="n">bottom</span> <span class="n">bo</span><span class="p">;</span>
</span><span class="line">    <span class="n">bo</span><span class="p">.</span><span class="n">printself</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>没有使用虚继承，那么<code>bottom</code>类在调用<code>printself()</code>就存在二义性，所以在编译的时候会报下面这样的错误。</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/virtualinheritance/inheritance_error.jpg" /></p>

<p>下面就是使用虚继承的例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>虚继承的菱形继承  (virtual_inheritance.cc)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/virtualinheritance/virtual_inheritance.cc">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="c1">// 使用虚拟继承的菱形继承</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">top</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is top;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class="line">        <span class="kt">void</span> <span class="n">printself</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in top::printself&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle2</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">bottom</span><span class="o">:</span> <span class="k">public</span> <span class="n">middle1</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle2</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">bottom</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is bottom;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class="line">    <span class="n">bottom</span> <span class="n">bo</span><span class="p">;</span>
</span><span class="line">    <span class="n">bo</span><span class="p">.</span><span class="n">printself</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>编译和运行结果如下</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/virtualinheritance/virtual_inheritance.jpg" /></p>

<p>上面的例子中，采用了虚继承，就没有出现二义性的问题了。虚拟继承声明时，virtual关键字可以放在继承关系的前面也可以放在后面，下面两种方式是等价的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span>
</span><span class="line"><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">public</span> <span class="k">virtual</span> <span class="n">top</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section">虚拟基类的构造</h2>

<p>由虚假继承引发的第一个问题是虚拟基类的构造，例如上面的例子中，构造iostream时，构造了istream和ostream两个基类，如果是虚继承关系，那么只有一个ios虚拟基类，那么谁来构造ios呢？</p>

<p>普通继承关系，基类由派生类构造。虚继承下，虚基类的构造由<em>最终派生类</em>显示调用，即iostream负责构造ios类, 中间类的构造函数将会被抑制，无法完成虚拟基类的构造。看一个虚基类的构造例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>中间类的构造函数被抑制  (constructor.cc)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/virtualinheritance/constructor.cc">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="c1">// 虚基类的构造, 中间类的构造函数被抑制</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;string&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">top</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">_name</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class="line">            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is top(name); name is &quot;</span><span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">top</span><span class="p">()</span><span class="o">:</span><span class="n">_name</span><span class="p">(</span><span class="s">&quot;top&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is top(); name is &quot;</span><span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="kt">void</span> <span class="n">printself</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in top::printself, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="n">string</span> <span class="n">_name</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle1</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle1, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">};</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle2</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle2</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="n">name</span><span class="p">){;</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle2, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">bottom</span><span class="o">:</span> <span class="k">public</span> <span class="n">middle1</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle2</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">bottom</span><span class="p">()</span><span class="o">:</span><span class="n">middle1</span><span class="p">(</span><span class="s">&quot;bottom1&quot;</span><span class="p">),</span> <span class="n">middle2</span><span class="p">(</span><span class="s">&quot;bottom2&quot;</span><span class="p">){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is bottom;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class="line">    <span class="n">bottom</span> <span class="n">bo</span><span class="p">;</span>
</span><span class="line">    <span class="n">bo</span><span class="p">.</span><span class="n">printself</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>运行结果如下</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/virtualinheritance/constructor.jpg" /></p>

<p>例子中，虽然bottom显示调用了middle1和middle2的构造函数，但是top的构造却不是有这两个中间类完成的,  因为top的成员name的值为“top”，实际上是由最终派生类bottom调用了top的默认构造函数<code>top()</code>。</p>

<p>要想完成虚基类top的构造，必须由最终派生类调用对应的虚基类构造函数。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>最终派生类调用虚基类的构造函数  (constructor1.cc)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/virtualinheritance/constructor1.cc">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="c1">// 最终类显示调用虚基类的构造函数</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;string&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">top</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">_name</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class="line">            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is top; name is &quot;</span><span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">top</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line">        <span class="kt">void</span> <span class="n">printself</span><span class="p">(){</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in top::printself, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="n">string</span> <span class="n">_name</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle1</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle1, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="k">protected</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle1</span><span class="p">(){};</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle2</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle2</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle2, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="k">protected</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle2</span><span class="p">(){};</span>
</span><span class="line">
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">bottom</span><span class="o">:</span> <span class="k">public</span> <span class="n">middle1</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle2</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">bottom</span><span class="p">()</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="s">&quot;bottom&quot;</span><span class="p">){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is bottom;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">bottom1</span><span class="o">:</span> <span class="k">public</span> <span class="n">middle1</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle2</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">bottom1</span><span class="p">()</span><span class="o">:</span><span class="n">middle1</span><span class="p">(</span><span class="s">&quot;bazinga&quot;</span><span class="p">),</span><span class="n">middle2</span><span class="p">(</span><span class="s">&quot;bazinga&quot;</span><span class="p">),</span> <span class="n">top</span><span class="p">(</span><span class="s">&quot;bottom1&quot;</span><span class="p">){</span>
</span><span class="line">            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is bottom1;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class="line">    <span class="n">bottom</span> <span class="n">bo</span><span class="p">;</span>
</span><span class="line">    <span class="n">bo</span><span class="p">.</span><span class="n">printself</span><span class="p">();</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;------&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">bottom1</span> <span class="n">bo1</span><span class="p">;</span>
</span><span class="line">    <span class="n">bo1</span><span class="p">.</span><span class="n">printself</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>运行结果如下</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/virtualinheritance/constructor1.jpg" /></p>

<p>在上面的例子中，bottom和bottom1都显示调用了top的构造函数，但前者没有调用了中间类的默认构造函数，后者调用了构造虚基类的构造函数，但结果对于虚基类的构造，都是由最终派生类构造的。</p>

<p>上面是一个中间类构造函数定义方式的好例子，当middle1和middle2做为最终派生类的时候，那么使用带参数的构造函数，做为中间类时，就声明一个为protected的默认构造函数，它仅仅完成类自身的构造和非虚拟继承的基类构造，最终派生类也不需要显示地构造中间类。</p>

<h2 id="section-1">构造的顺序</h2>

<p>普通继承是按照声明顺序进行构造的，虚继承由于先要进行虚基类的构造，再进行中间类的构造，所以构造顺序是：按照声明顺序构造虚基类，再按照声明顺序构造中间类和普通基类。</p>

<p>先看两个虚基类构造的例子，</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>top_b类不采用虚继承  (constructor_seq.cc)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/virtualinheritance/constructor_seq.cc">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="c1">// 虚基类的构造顺序</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;string&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">top</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">_name</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class="line">            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is top; name is &quot;</span><span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">top</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line">        <span class="kt">void</span> <span class="n">printself</span><span class="p">(){</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in top::printself, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="n">string</span> <span class="n">_name</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle1</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle1, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="k">protected</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle1</span><span class="p">(){};</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle2</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle2</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle2, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="k">protected</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle2</span><span class="p">(){};</span>
</span><span class="line">
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">top_b</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">top_b</span><span class="p">(){</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is top_b&quot;</span><span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle_b</span><span class="o">:</span> <span class="k">public</span> <span class="n">top_b</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle_b</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle_b&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">bottom</span><span class="o">:</span> <span class="k">public</span> <span class="n">middle1</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle2</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle_b</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">bottom</span><span class="p">()</span><span class="o">:</span><span class="n">middle1</span><span class="p">(</span><span class="s">&quot;bazinga&quot;</span><span class="p">),</span><span class="n">middle2</span><span class="p">(</span><span class="s">&quot;bazinga&quot;</span><span class="p">),</span> <span class="n">top</span><span class="p">(</span><span class="s">&quot;bottom1&quot;</span><span class="p">){</span>
</span><span class="line">            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is bottom;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class="line">    <span class="n">bottom</span> <span class="n">bo</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出结果</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/virtualinheritance/constructor_seq.jpg" /></p>

<p>另外一个例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>top_b类采用虚继承  (constructor_seq1.cc)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/virtualinheritance/constructor_seq1.cc">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="c1">// 虚基类的构造顺序</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;string&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">top</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">_name</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class="line">            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is top; name is &quot;</span><span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">top</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line">        <span class="kt">void</span> <span class="n">printself</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in top::printself, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">    <span class="k">private</span><span class="o">:</span>
</span><span class="line">        <span class="n">string</span> <span class="n">_name</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle1</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle1, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="k">protected</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle1</span><span class="p">(){};</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle2</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle2</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class="line">            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle2, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="k">protected</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle2</span><span class="p">(){};</span>
</span><span class="line">
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">top_b</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">top_b</span><span class="p">(){</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is top_b&quot;</span><span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle_b</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top_b</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle_b</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle_b&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">bottom</span><span class="o">:</span> <span class="k">public</span> <span class="n">middle1</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle2</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle_b</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">bottom</span><span class="p">()</span><span class="o">:</span><span class="n">middle1</span><span class="p">(</span><span class="s">&quot;bazinga&quot;</span><span class="p">),</span><span class="n">middle2</span><span class="p">(</span><span class="s">&quot;bazinga&quot;</span><span class="p">),</span> <span class="n">top</span><span class="p">(</span><span class="s">&quot;bottom1&quot;</span><span class="p">){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is bottom;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class="line">    <span class="n">bottom</span> <span class="n">bo</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出结果</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/virtualinheritance/constructor_seq1.jpg" /></p>

<p>上面这个两个例子中可以看出top_b的构造顺序是不一样的。第一个例子中，做为普通基类，它放到了middle1和middle2后面构造，但在第二个例子中将它声明为了虚基类，它就放到了middle1和middle2前面构造了。</p>

<h2 id="section-2">虚拟基类成员的可视性</h2>

<p>派生类从它的基类所继承而来的成员可被分为以下三类：</p>

<ul>
  <li>虚拟基类实例，它们没有被中间类改写，可以直接调用。</li>
  <li>存在一个中间类，改写了基类的成员，那么最终派生类，调用时使用的是被中间类改写了的成员。</li>
  <li>存在二个或二个以上的中间类，重载了虚基类的成员，那么最终派生类，必须重载这个成员函数。  </li>
</ul>

<p>下面这个例子分别都涉及到了上面三种情况</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>虚继承中成员的可见性  (members.cc)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/virtualinheritance/members.cc">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="c1">// 成员函数的调用</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="kt">void</span> <span class="n">printA</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in top::printA&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">        <span class="kt">void</span> <span class="n">printB</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in top::printB&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">        <span class="kt">void</span> <span class="n">printC</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in top::printC&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="kt">void</span> <span class="n">printB</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in middle1::printB&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">        <span class="kt">void</span> <span class="n">printC</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in middle1::printC&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle2</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="kt">void</span> <span class="n">printC</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in middle2::printC&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">bottom</span><span class="o">:</span> <span class="k">public</span> <span class="n">middle1</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle2</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="kt">void</span> <span class="n">printC</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in bottom::printC&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class="line">    <span class="n">bottom</span> <span class="n">bo</span><span class="p">;</span>
</span><span class="line">    <span class="n">bo</span><span class="p">.</span><span class="n">printA</span><span class="p">();</span>
</span><span class="line">    <span class="n">bo</span><span class="p">.</span><span class="n">printB</span><span class="p">();</span>
</span><span class="line">    <span class="n">bo</span><span class="p">.</span><span class="n">printC</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出结果</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/virtualinheritance/members.jpg" /></p>

<p>由例子可以看出，上面三点分别对应了printA, printB, printC三个函数。如果不在bottom中重载printC，那么编译是会报错。</p>

<h2 id="section-3">虚继承的实现原理</h2>

<p>虚继承中，是如何实现只有虚基类的，通过虚继承类的内存分布，可以一探究竟。下面所有关于虚继承内存分布的例子都是和平台相关的:</p>

<ul>
  <li>64位系统</li>
  <li>操作系统: ubuntu server 12.04</li>
  <li>gcc 4.6.3</li>
</ul>

<p>首先看一个简单的只有一层虚继承关系的例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>一层虚继承  (memory_middle1.cc)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/virtualinheritance/memory_middle1.cc">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="c1">// memory layout for one layer virtual inheritance.  </span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define COUT_FUNC(a, b) (cout &lt;&lt; a &lt;&lt; &quot; | &quot; &lt;&lt; b &lt;&lt; &quot; | &quot;) </span>
</span><span class="line"><span class="cp">#define COUT_CNUM(a, b) (cout &lt;&lt; a &lt;&lt; &quot; | &quot; &lt;&lt; b) </span>
</span><span class="line"><span class="cp">#define COUT_ARG3(a, b, c) (COUT_FUNC(a, b) &lt;&lt; c)</span>
</span><span class="line"><span class="cp">#define COMMENT(a) printf(&quot;\e[32m%s\e[0m\n&quot;, (a));</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">top</span><span class="p">(</span><span class="kt">long</span> <span class="n">i</span><span class="p">)</span><span class="o">:</span><span class="n">_i</span><span class="p">(</span><span class="n">i</span><span class="p">){}</span>
</span><span class="line">        <span class="n">top</span><span class="p">(){}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">a</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is top::a()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">b</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is top::b()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">        <span class="kt">long</span> <span class="n">_i</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle1</span><span class="p">(</span><span class="kt">long</span> <span class="n">j</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span><span class="n">_j</span><span class="p">(</span><span class="n">j</span><span class="p">){}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">c</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle1::c()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">b</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle1::b()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">        <span class="kt">long</span> <span class="n">_j</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">func</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">long</span><span class="o">*</span> <span class="n">pobj</span><span class="p">;</span>
</span><span class="line">    <span class="n">func</span> <span class="n">pfunc</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;---memory of middle1---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">middle1</span> <span class="n">m1</span><span class="p">(</span><span class="mi">101</span><span class="p">);</span>
</span><span class="line">    <span class="n">pobj</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">m1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span>
</span><span class="line">    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;middle1[0]:    vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class="line">    <span class="n">COUT_CNUM</span><span class="p">(</span><span class="s">&quot;middle1[1]:         _j&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])));</span>
</span><span class="line">    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;    top[0]:    vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]));</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class="line">    <span class="n">COUT_CNUM</span><span class="p">(</span><span class="s">&quot;    top[1]:         _i&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;---vtable of middle1---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// class middle1</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;middle1[0]: offset(-3)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to vbase&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to begin&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># typeinfo for middle1&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span>
</span><span class="line">    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;               vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class="line">    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
</span><span class="line">    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;               vtab(1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;               vtab(2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">+</span><span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># next class offset to begin&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// class top</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;    top[0]: offset(-3)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to vbase&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to begin&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># typeinfo for middle1&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])));</span>
</span><span class="line">    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;               vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;               vtab(1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># virtual thunk to middle1::b()&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;               vtab(2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">+</span><span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># end of vtable&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// VTT for middle1</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;      VTT:      vtt(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">+</span><span class="mi">3</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># for middle1&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;                vtt(1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span> <span class="mi">4</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">+</span><span class="mi">4</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># for top&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>运行结果如下图</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/virtualinheritance/memory_middle1.jpg" /></p>

<p>在<code>middle1</code>中有两个vtable，分布指向了各自的虚函数表，而且这两个虚函数表实际是放在一张表，只是分别指向表中不同的位置。vtable的起始地址之前的3个地址分布存放了与虚继承相关的信息。</p>

<ul>
  <li><code>offset(-3)</code>存放的是从middle1对象到虚基类top的偏移。 本例中middle1到top的偏移存放在<code>0x401620</code>为16个字节，top到自身的偏移存放在<code>0x401650</code>为0。</li>
  <li><code>offset(-2)</code>存放的是当前这个对象到middle对象内存起始地址的偏移。 本例中middle1到自身的偏移存放在<code>0x401628</code>为0，top到middle起始位置的偏移<code>0x401658</code>为-16</li>
  <li><code>offset(-1)</code>存放的是middle1类的typeinfo地址，本例中<code>0x401630</code>, <code>0x401660</code>都存放的地址<code>0x4016e0</code>。在下面本例memory_middle1的符号列表图中可以看出middle1类的typeinfo地址(图中的红色部分)。</li>
</ul>

<p><em style="color:red"> 以上信息也有人称为虚继承表，里面存放了虚继承的虚基类地址，在程序寻找虚基类的时候，就是从本表中获取偏移地址，然后找到虚基类的。内存中只有一个虚基类，无论有多个派生类，所有派生类到这个基类，都是通过偏移找到虚基类。</em></p>

<p>如果派生类重载了虚基类的虚函数函数，在虚基类的虚函数对应的表现中，实际存放的是一个thunk地址（下图中的绿色部分）。例如本地中的重载的 <code>middle1::b()</code>，在地址<code>0x401670</code>存放的就是<code>virtual thunk for middle1::b()</code>。这个thunk仅调整this 指针并跳到<code>middle1::b()</code>, 所以当调用<code>top::b()</code>时，实际上就执行了<code>middle1::b()</code>。</p>

<p>在middle1的虚表结束的时候，放入了一个数值，这个数据与它的虚基类的offset(-2)存放的数字是一样的，都是表示虚基类到类对象内存的其实地址的偏移。而虚基类的虚表结束的地方，则存放的是0。</p>

<p>在虚表结束后，紧跟的是一张VTT表。VTT(Virtual Table Table)是一张记录虚表的表，图中黄色部分色部分标注出来的。它分布存放了middle1类所有的虚表起始地址。VTT表的地址也可以在memory_middle1的符号列表中找到(图中的黄色部分）</p>

<p>使用下面的这个命令可以参看符号列表</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">nm -gC memory_middle1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>部分输出结果的截图</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/virtualinheritance/nm_memory_middle1.jpg" /></p>

<p>根据上面的程序分析可以画出middle1的内存结构图如下:</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/virtualinheritance/memory_middle1_topo.jpg" /></p>

<p>下面是一个菱形结构继承的例子代码，有兴趣的读者可以下载以后，按照上面的方面分析。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>菱形虚继承  (memory_bottom.cc)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/virtualinheritance/memory_bottom.cc">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="c1">// memory layout for diamond virtual inheritance</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define COUT_FUNC(a, b) (cout &lt;&lt; a &lt;&lt; &quot; | &quot; &lt;&lt; b &lt;&lt; &quot; | &quot;) </span>
</span><span class="line"><span class="cp">#define COUT_CNUM(a, b) (cout &lt;&lt; a &lt;&lt; &quot; | &quot; &lt;&lt; b) </span>
</span><span class="line"><span class="cp">#define COUT_ARG3(a, b, c) (COUT_FUNC(a, b) &lt;&lt; c)</span>
</span><span class="line"><span class="cp">#define COMMENT(a) printf(&quot;\e[32m%s\e[0m\n&quot;, (a));</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">top</span><span class="p">(</span><span class="kt">long</span> <span class="n">i</span><span class="p">)</span><span class="o">:</span><span class="n">_i</span><span class="p">(</span><span class="n">i</span><span class="p">){}</span>
</span><span class="line">        <span class="n">top</span><span class="p">(){}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">a</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is top::a()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">b</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is top::b()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">        <span class="kt">long</span> <span class="n">_i</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle1</span><span class="p">(</span><span class="kt">long</span> <span class="n">j</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span><span class="n">_j</span><span class="p">(</span><span class="n">j</span><span class="p">),</span><span class="n">_l</span><span class="p">(</span><span class="mi">151</span><span class="p">){}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">c</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle1::c()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">b</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle1::b()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">        <span class="kt">long</span> <span class="n">_j</span><span class="p">;</span>
</span><span class="line">        <span class="kt">long</span> <span class="n">_l</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">middle2</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">middle2</span><span class="p">(</span><span class="kt">long</span> <span class="n">k</span><span class="p">,</span> <span class="kt">long</span> <span class="n">m</span><span class="p">)</span><span class="o">:</span><span class="n">_k</span><span class="p">(</span><span class="n">k</span><span class="p">),</span><span class="n">_m</span><span class="p">(</span><span class="n">m</span><span class="p">){}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">d</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle2::d()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">        <span class="kt">long</span> <span class="n">_k</span><span class="p">;</span>
</span><span class="line">        <span class="kt">long</span> <span class="n">_m</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">bottom</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">middle1</span><span class="p">,</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">middle2</span><span class="p">{</span>
</span><span class="line">    <span class="k">public</span><span class="o">:</span>
</span><span class="line">        <span class="n">bottom</span><span class="p">()</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="mi">5936l</span><span class="p">),</span> <span class="n">middle1</span><span class="p">(</span><span class="mi">5937l</span><span class="p">),</span> <span class="n">middle2</span><span class="p">(</span><span class="mi">5938l</span><span class="p">,</span> <span class="mi">5939l</span><span class="p">),</span> <span class="n">_n</span><span class="p">(</span><span class="mi">10000</span><span class="p">){}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">b</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is bottom::b()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">e</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is bottom::e()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">        <span class="kt">long</span> <span class="n">_n</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">func</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">long</span><span class="o">*</span> <span class="n">pobj</span><span class="p">;</span>
</span><span class="line">    <span class="n">func</span> <span class="n">pfunc</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--- member of bottom---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">bottom</span> <span class="n">bo</span><span class="p">;</span>
</span><span class="line">    <span class="n">pobj</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">bo</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;bo._n: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">bo</span><span class="p">.</span><span class="n">_n</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;   _j: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">bo</span><span class="p">.</span><span class="n">_j</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;   _l: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">bo</span><span class="p">.</span><span class="n">_l</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;   _i: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">bo</span><span class="p">.</span><span class="n">_i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;   _k: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">bo</span><span class="p">.</span><span class="n">_k</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;   _m: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">bo</span><span class="p">.</span><span class="n">_m</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--- memory of bottom---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span>
</span><span class="line">    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot; bottom[0]:    vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class="line">    <span class="n">COUT_CNUM</span><span class="p">(</span><span class="s">&quot; bottom[1]:         _n&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])));</span>
</span><span class="line">    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;middle1[0]:    vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]));</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class="line">    <span class="n">COUT_CNUM</span><span class="p">(</span><span class="s">&quot;middle1[1]:         _j&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">COUT_CNUM</span><span class="p">(</span><span class="s">&quot;middle1[2]:         _l&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">])));</span>
</span><span class="line">    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;    top[0]:    vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">]));</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class="line">    <span class="n">COUT_CNUM</span><span class="p">(</span><span class="s">&quot;    top[1]:         _i&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])));</span>
</span><span class="line">    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;middle2[0]:    vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">]));</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class="line">    <span class="n">COUT_CNUM</span><span class="p">(</span><span class="s">&quot;middle2[1]:         _k&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">    <span class="n">COUT_CNUM</span><span class="p">(</span><span class="s">&quot;middle2[2]:         _m&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">9</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--- vtable of bottom---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// class bottom</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot; bottom[0]: offset(-3)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to vbase&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to begin&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># typeinfo for bottom&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span>
</span><span class="line">    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;               vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class="line">    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
</span><span class="line">    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;               vtab(1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;               vtab(2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">+</span><span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># next class offset to begin&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// class middle1</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;middle1[0]: offset(-3)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to vbase&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to begin&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># typeinfo for bottom&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])));</span>
</span><span class="line">    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;               vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;               vtab(1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># virtual thunk to bottom::b()&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;               vtab(2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">+</span><span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># next class offset to begin&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// class top </span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;    top[0]: offset(-3)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to vbase&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to begin&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># typeinfo for middle1&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">])));</span>
</span><span class="line">    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;               vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">]);</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;               vtab(1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># virtual thunk to bottom::b()&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;               vtab(2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span><span class="o">+</span><span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># end of vtable&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// class middle2</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;middle2[0]: offset(-3)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to vbase&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to begin&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># typeinfo for bottom&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])));</span>
</span><span class="line">    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;               vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">]);</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;               vtab(1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># end of vtable&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// vtt</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;      VTT:      vtt(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span><span class="o">+</span><span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># address align&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;                vtt(1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span><span class="o">+</span><span class="mi">3</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># address align&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;                vtt(2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span> <span class="mi">4</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span><span class="o">+</span><span class="mi">4</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># for bottom&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;                vtt(3)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span> <span class="mi">5</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span><span class="o">+</span><span class="mi">5</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># for middle1&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;                vtt(4)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span> <span class="mi">6</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span><span class="o">+</span><span class="mi">6</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># for top&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;                vtt(5)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span> <span class="mi">7</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span><span class="o">+</span><span class="mi">7</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># for middle2&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里仅仅画出内存的结构图如下</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/virtualinheritance/memory_bottom_topo.jpg" /></p>

<p>在菱形虚继承的关系下，有下面几点需要注意：</p>

<ul>
  <li>在bottom类的内存中，middle2类是放在了top类后面，相对应的，在虚表和VTT表中，middle2都被放在了top类的后面。</li>
  <li>计算到虚基类的内存偏移时，计算的是当前类和虚父类的偏移，例如图中，bottom的偏移是bottom到middle1的偏移，不是到top类的偏移。而且只记录了到middle1的偏移，没有到middle2的偏移，原因应该是在声明继承关系时，middle1在middle2之前。</li>
  <li>计算到内存开始的偏移时，所有都是按照bottom的起始地址计算。所以两个偏移量不是对应的。</li>
</ul>

<h2 id="section-4">什么时候使用虚继承</h2>

<p>这是否意味着，应该尽可能地以虚拟方式派生我们的基类，以便层次结构中后续的派生类可能会需要虚拟继承，是这样吗？不！我们强烈反对，那样做对性能的影响会很严重（而且增加了后续类派生的复杂性）。</p>

<p>那么，我们从不应该使用虚拟继承吗？不是，在实践中几乎所有成功使用虚拟继承的例子中，凡是需要虚拟继承的整个层次结构子树，如iostream 库或Panda 子树，都是由同一个人或项目设计组一次设计完成的。</p>

<p>一般地，除非虚拟继承为一个眼前的设计问题提供了解决方案，否则建议不要使用它。</p>

<h2 id="section-5">参考</h2>

<ul>
  <li>《C++ Primer》中文第三版， 第18章：多继承和虚拟继承.</li>
  <li><a href="http://blog.csdn.net/wuhui_gdnt/article/details/6141405">GCC-3.4.6源代码学习笔记（142）</a></li>
  <li>白杨.<a href="http://baiy.cn/doc/cpp/inside_rtti.htm">RTTI、虚函数和虚基类的实现方式、开销分析及使用指导</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[虚函数]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2012/11/29/virtual-function/"/>
    <updated>2012-11-29T09:30:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2012/11/29/virtual-function</id>
    <content type="html"><![CDATA[<p>面试的时候，常常宣称自己是一个C++程序员，不免就会被问一些有关C++的问题，例如虚函数的实现原理；析构函数是否能定义为虚函数等等。很多时候都回答不上来，就总会以时间久了忘了，搪塞过去，面试完，可能回去查查答案，但也总是不求甚解。</p>

<p>既然有了博客，我就准备看看这些方面的内容，希望能记录下来，有所积累。于是就到网上查,或在书上找找，后来发现里面的内容太多了，不是一篇两篇博客就能写完的。于是没有办法，就只有硬着头皮写一个系列了。今天是第一部分虚函数和虚继承。</p>

<p>C++的关键字virtual只能用在两个地方，一是定义类的成员函数为虚函数，二是定义类的继承关系为虚继承。这两点的用处大相径庭，但是在设计思想上还是有一定的共同性的。这篇文章先讲虚函数，下一篇讲虚继承。</p>

<!-- more -->

<h2 id="section">虚函数</h2>

<p>虚，不实也。也可以理解为看到的和实际的不一样。虚函数存在的目的只有一个，那就是实现多态。关于多态，可以去参考各种教科书，上面都有详细的说明。虚函数在实现多态时，通过一种间接的运行时（而不是编译时）的机制激活（调用）的函数。下面看一个多态的简单例子。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>多态的简单例子  (polymorphism.cc)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/polymorphism/polymorphism.cc">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm"> * polymorphism.cc: example of polymorphism</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">base</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">derived1</span><span class="o">:</span> <span class="k">public</span> <span class="n">base</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in derived1:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">derived2</span><span class="o">:</span> <span class="k">public</span> <span class="n">base</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in derived2:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">call_func</span><span class="p">(</span><span class="n">base</span><span class="o">*</span> <span class="n">pb</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="n">pb</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="n">base</span><span class="o">*</span> <span class="n">pb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">base</span><span class="p">();</span>
</span><span class="line">	<span class="n">base</span><span class="o">*</span> <span class="n">pd1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">derived1</span><span class="p">();</span>
</span><span class="line">	<span class="n">base</span><span class="o">*</span> <span class="n">pd2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">derived2</span><span class="p">();</span>
</span><span class="line">	<span class="n">call_func</span><span class="p">(</span><span class="n">pb</span><span class="p">);</span>
</span><span class="line">	<span class="n">call_func</span><span class="p">(</span><span class="n">pd1</span><span class="p">);</span>
</span><span class="line">	<span class="n">call_func</span><span class="p">(</span><span class="n">pd2</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>运行结果如下<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>:</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/polymorphism/polymorphism_output.jpg" /></p>

<p>从运行结果来看，函数<code>call_func()</code>最后实际调用的<code>f()</code>要到运行时，根据传入的参数，才能确定调用的是哪个函数。</p>

<p>那么虚函数的这种性质是如何实现的呢？答案是虚表(vtable)。具体的做法是，在对象的存储空间里面开辟一个指针，指针指向一个存放着虚函数地址的函数指针表。编译器在生成调用虚函数的指令时，按照偏移量，从虚表中取相应的函数指针进行调用。子类的虚函数会覆盖父类中对应虚函数在虚表中的位置，所以在调用的时候，就调用到了子类的函数了。也许这段话没有说太清楚，下面看一段代码或许会有帮助。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>测试虚表的例子  (vfun.cc)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/polymorphism/vfun.cc">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm"> * test virtual functions</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">base</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">derived</span><span class="o">:</span> <span class="k">public</span> <span class="n">base</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in derived:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span> <span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="n">fun</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line"><span class="cp">#define VTAB(pclass) ((long*)(*(long*)(pclass)))</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="n">base</span><span class="o">*</span> <span class="n">pb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">base</span><span class="p">();</span>
</span><span class="line">	<span class="n">pb</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">();</span>
</span><span class="line">	<span class="n">base</span><span class="o">*</span> <span class="n">pd</span> <span class="o">=</span> <span class="p">(</span><span class="n">base</span><span class="o">*</span><span class="p">)</span> <span class="k">new</span> <span class="n">derived</span><span class="p">();</span>
</span><span class="line">	<span class="n">pd</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--- call through vtable ---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">	<span class="n">fun</span> <span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pd</span><span class="p">);</span>
</span><span class="line">	<span class="n">pfun</span><span class="p">();</span>
</span><span class="line">	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pb</span><span class="p">);</span>
</span><span class="line">	<span class="n">pfun</span><span class="p">();</span>
</span><span class="line">	<span class="n">derived</span><span class="o">*</span> <span class="n">pd_fake</span> <span class="o">=</span> <span class="p">(</span><span class="n">derived</span><span class="o">*</span><span class="p">)</span><span class="n">pb</span><span class="p">;</span>
</span><span class="line">	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pd_fake</span><span class="p">);</span>
</span><span class="line">	<span class="n">pfun</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pd</span><span class="p">);</span>
</span><span class="line">	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;value of *pfun is: &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">pfun</span> <span class="o">&lt;&lt;</span>  <span class="n">endl</span><span class="p">;</span>
</span><span class="line">	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pd</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;value of *pfun is: &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">pfun</span> <span class="o">&lt;&lt;</span>  <span class="n">endl</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出结果如下：</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/polymorphism/vfun_output.jpg" /></p>

<p>上面这段代码的第20行，通过定义指针的方式<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，直接访问虚表，发现它的输出与通过对象调用是一直的，而且指针的类型无关。由上面的代码也可以看出虚表在对象的内存空间中是怎么分布的。对象的起始地址，就是虚表指针。虚表的最后一项为0，代表虚表结束。上面程序的最后一项输出可以看出来。</p>

<p>用一张图来说明情况。</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/polymorphism/one_derived.jpg" /></p>

<p>在多个虚函数的情况下，子类仅仅覆盖在子类重载的虚函数，而子类新定义的虚函数，加入到虚表的最后。下面这个例子就是多个虚函数的情况。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>多个虚函数  (vfun1.cc)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/polymorphism/vfun1.cc">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="c1">// test virtual functions</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">base</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f0</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base:f0&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="k">class</span> <span class="nc">derived</span><span class="o">:</span> <span class="k">public</span> <span class="n">base</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in derived:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f1</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in derived:f1&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span> <span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="n">fun</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define VTAB(pclass) ((long*)(*(long*)(pclass)))</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="n">base</span><span class="o">*</span> <span class="n">pb_real</span> <span class="o">=</span> <span class="k">new</span> <span class="n">base</span><span class="p">();</span>
</span><span class="line">	<span class="n">pb_real</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">();</span>
</span><span class="line">	<span class="n">base</span><span class="o">*</span> <span class="n">pb</span> <span class="o">=</span> <span class="p">(</span><span class="n">base</span><span class="o">*</span><span class="p">)</span> <span class="k">new</span> <span class="n">derived</span><span class="p">();</span>
</span><span class="line">	<span class="n">pb</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">();</span>
</span><span class="line">	<span class="n">pb</span><span class="o">-&gt;</span><span class="n">f0</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--- call function through vtable ---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">	<span class="n">fun</span> <span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pb</span><span class="p">);</span>
</span><span class="line">	<span class="n">pfun</span><span class="p">();</span>
</span><span class="line">	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pb</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">	<span class="n">pfun</span><span class="p">();</span>
</span><span class="line">	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pb</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="p">);</span>
</span><span class="line">	<span class="n">pfun</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出结果：</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/polymorphism/vfun1_output.jpg" /></p>

<p>虚表的组织结构如下:</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/polymorphism/more_derived.jpg" /></p>

<p>由图中可以看出，子类的<code>f()</code>覆盖了基类的<code>f()</code>，而基类的<code>f0()</code>依然存在，子类的<code>f1()</code>添加到了虚表的最后。</p>

<p>当有多个基类时，子类会为每个基类添加一个虚表指针，指针的顺序按照类定义时的声明顺序。下面这个例子就是这样的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>虚函数多重继承  (vfun2.cc)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/polymorphism/vfun2.cc">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="c1">// test virtual functions</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">father_b1</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in father of base1:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">fbf</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in father of base1:fbf&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">father1_b1</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in father1 of base1:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f1bf</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in father1 of base1:f1bf&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">base</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">bf0</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base:f0&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">base1</span><span class="o">:</span> <span class="k">public</span> <span class="n">father_b1</span><span class="p">,</span> <span class="k">public</span> <span class="n">father1_b1</span><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base1:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">b1f0</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base1:f0&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">derived</span><span class="o">:</span> <span class="k">public</span> <span class="n">base1</span><span class="p">,</span> <span class="k">public</span> <span class="n">base</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in derived:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f1</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in derived:f1&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span> <span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="n">fun</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define VTAB(pclass) ((long*)(*(long*)(pclass)))</span>
</span><span class="line"><span class="cp">#define VTAB1(pclass) ((long*)(*(((long*)(pclass)) + 1)))</span>
</span><span class="line"><span class="cp">#define VTAB2(pclass) ((long*)(*(((long*)(pclass)) + 2)))</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="n">derived</span><span class="o">*</span> <span class="n">pd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">derived</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--- vtable ---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">	<span class="n">fun</span> <span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pd</span><span class="p">);</span>
</span><span class="line">	<span class="n">pfun</span><span class="p">();</span>
</span><span class="line">	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pd</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">	<span class="n">pfun</span><span class="p">();</span>
</span><span class="line">	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pd</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="p">);</span>
</span><span class="line">	<span class="n">pfun</span><span class="p">();</span>
</span><span class="line">	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pd</span><span class="p">)</span><span class="o">+</span><span class="mi">3</span><span class="p">);</span>
</span><span class="line">	<span class="n">pfun</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--- vtable + 1 ---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="n">VTAB1</span><span class="p">(</span><span class="n">pd</span><span class="p">);</span>
</span><span class="line">	<span class="n">pfun</span><span class="p">();</span>
</span><span class="line">	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">VTAB1</span><span class="p">(</span><span class="n">pd</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">	<span class="n">pfun</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--- vtable + 2 ---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="n">VTAB2</span><span class="p">(</span><span class="n">pd</span><span class="p">);</span>
</span><span class="line">	<span class="n">pfun</span><span class="p">();</span>
</span><span class="line">	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">VTAB2</span><span class="p">(</span><span class="n">pd</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">	<span class="n">pfun</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出结果：</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/polymorphism/vfun2_output.jpg" /></p>

<p>这是一个比较复杂的继承关系了，可以看出最后的<code>derived</code>类里面已经有3个虚表指针了，也就是说，子类会讲所有的父类的虚表继承下来，并将自己的虚函数添加到第一个虚表的最后。还有一点，就是子类的虚函数会覆盖所有基类的对应虚函数，图中的<code>derived::f()</code>就覆盖了3处。其组织结构如下：</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/polymorphism/more_bases.jpg" /></p>

<h2 id="section-1">构造函数和析构函数的调用顺序</h2>

<p>这个问题本来和虚函数没有关系，但是为了后面解释关于构造函数为什么不能声明为virtual，添加到这里的。</p>

<p>构造函数的调用顺序是，先调用父类的构造函数，然后调用成员变量的构造函数，最后调用子类自身的构造函数，多个父类时，按照父类的继承时的声明顺序调用，成员变量的构造函数也按照声明顺序调用。</p>

<p>析构函数的调用顺序与构造函数的正好相反，先调用子类自身的析构函数，然后是成员变量的析构函数，最后是父类的构造函数，多个父类时，按照父类的继承时的声明的相反顺序调用，成员变量的构造函数也按照声明的相反顺序调用。</p>

<p>下面是一段测试调用顺序的代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>构造和析构函数的调用顺序  (constructor_destructor_order.cc)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/polymorphism/constructor_destructor_order.cc">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm"> * 研究构造函数的调用顺序</span>
</span><span class="line"><span class="cm"> *  1. 首先调用基类的构造函数（如果有基类）；如果有多个基类，则按基类被列出的顺序调用；</span>
</span><span class="line"><span class="cm"> *  2. 调用这个类的成员对象的构造函数（如果有的话）；如果有多个成员对象，则按成员对象定义的顺序被调用（与参数列表中列出的顺序无关）；</span>
</span><span class="line"><span class="cm"> *  3. 最后调用这个类自身的构造函数；</span>
</span><span class="line"><span class="cm"> *  4. 析构函数正好相反;</span>
</span><span class="line"><span class="cm"> *  注意：如果有虚基类，则先调用虚基类的构造函数。在调用基类的构造函数，如果有多个虚基类，则按列出的顺序调用； </span>
</span><span class="line"><span class="cm">*/</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">father_base_a</span><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">   <span class="n">father_base_a</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is father_base_a;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class="line">   <span class="k">virtual</span> <span class="o">~</span><span class="n">father_base_a</span><span class="p">()</span> <span class="p">{</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;This is ~father_base_a&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">base_a</span><span class="o">:</span> <span class="k">public</span> <span class="n">father_base_a</span><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">   <span class="n">base_a</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is base_a;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class="line">   <span class="k">virtual</span> <span class="o">~</span><span class="n">base_a</span><span class="p">()</span> <span class="p">{</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;This is ~base_a&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">base_b</span><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">   <span class="n">base_b</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is base_b;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class="line">   <span class="k">virtual</span> <span class="o">~</span><span class="n">base_b</span><span class="p">()</span> <span class="p">{</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;This is ~base_b&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">member_a</span><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">   <span class="n">member_a</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is meber_a;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class="line">   <span class="k">virtual</span> <span class="o">~</span><span class="n">member_a</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is ~meber_a;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">member_b</span><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">   <span class="n">member_b</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is member_b;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class="line">   <span class="k">virtual</span> <span class="o">~</span><span class="n">member_b</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is ~meber_b;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">base_b</span><span class="p">,</span> <span class="k">public</span> <span class="n">base_a</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">   <span class="n">member_a</span> <span class="n">ma</span><span class="p">;</span>
</span><span class="line">   <span class="n">derived</span><span class="p">(){</span>
</span><span class="line">      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is derived;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class="line">   <span class="p">}</span>
</span><span class="line">   <span class="k">virtual</span> <span class="o">~</span><span class="n">derived</span><span class="p">()</span> <span class="p">{</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is ~derived()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">private</span><span class="o">:</span>
</span><span class="line">   <span class="n">member_b</span> <span class="n">mb</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="n">derived</span> <span class="n">de</span><span class="p">;</span>
</span><span class="line">  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;---------&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出结果
<img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/polymorphism/constructor_destructor_order.jpg" /></p>

<p>从输出结果可以看出，先调用了<code>base_b</code>的构造函数，然后调用<code>base_a</code>的构造函数（但得先调用<code>base_a</code>的父类<code>father_base_a</code>），然后是成员<code>member_a</code>和<code>member_b</code>的构造函数，最后是<code>derived</code>自己的构造函数。析构的过程正好相反。</p>

<h2 id="section-2">构造函数不能声明为虚函数</h2>

<p>这也是面试中常被问道的一个问题。原因应该有两个  </p>

<ol>
  <li>在构造函数之前，类的对象是不存在的，那么也没有vtable，也无法通过vtable找到虚函数。所有无法定义为虚函数。</li>
  <li>构造函数是先调用父类，最后才是子类的构造，因为子类的内存布局是基于父类。如果使用虚构函数，那么在调用父类的构造函数时，实际调用的是子类的构造函数，那么就无法完成对象的构造。</li>
  <li>虚函数的主要目的是多态，运行时确定调用那个函数，对象的构造过程是确定的，使用虚函数没有意义。</li>
</ol>

<p>实际上，如果将构造函数声明为虚函数，编译时，gcc会报错。</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/polymorphism/constructor_error.jpg" /></p>

<h2 id="section-3">析构函数声明为虚函数</h2>

<p>在基类的声明中一般都应该将析构函数声明为虚函数。首先由于析构函数没有构造函数的问题，所以是可以声明为虚函数的。其次，可能程序需要利用析构函数为虚函数的特性，才能讲资源释放完全。</p>

<p>首先来看一个代码例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>析构函数为虚函数  (destructor_virtual.cc)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/polymorphism/destructor_virtual.cc">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="c1">// 分析析构函数为虚函数时的特性</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">base</span><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="k">virtual</span>	<span class="o">~</span><span class="n">base</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base::~base()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">derived</span><span class="o">:</span> <span class="k">public</span> <span class="n">base</span><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="k">virtual</span> <span class="o">~</span><span class="n">derived</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in derived::~derived&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">base1</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="o">~</span><span class="n">base1</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base1::~base1()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">derived1</span><span class="o">:</span> <span class="k">public</span> <span class="n">base1</span><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="o">~</span><span class="n">derived1</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in derived1::~derived1&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class="line">	<span class="n">base</span> <span class="o">*</span><span class="n">pbase</span> <span class="o">=</span> <span class="k">new</span> <span class="n">derived</span><span class="p">();</span>
</span><span class="line">	<span class="k">delete</span> <span class="n">pbase</span><span class="p">;</span>
</span><span class="line">	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--------&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class="line">	<span class="n">base1</span> <span class="o">*</span><span class="n">pbase1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">derived1</span><span class="p">();</span>
</span><span class="line">	<span class="k">delete</span> <span class="n">pbase1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>运行结果</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/polymorphism/destructor_virtual.jpg" /></p>

<p>由结果可以看出，由于<code>base1</code>的析构函数没有声明为虚函数，在<code>delete pbase1</code>时，没有调用<code>derived1</code>的析构函数，那么在<code>derived1</code>中申请的资源就无法释放。而因为<code>base</code>类中的修改函数声明为了虚函数，就没有这样的问题。</p>

<h2 id="section-4">什么时候使用虚函数</h2>

<p>包含了虚函数的成员函数的对象，由于需要存放虚表地址，那么就比不包含虚函数的对象，多出了一块空间，32位为4个字节，64位为8个字节。如果没有用到多态，而且有大量的对象存在时，需要考虑这个开销。</p>

<p>在需要使用多态，或在定义接口时，需要使用虚函数。特别是定义接口时，最好使用纯虚函数。</p>

<p>另外，将私有成员函数声明为虚函数，可以通过对象的虚表指针的方式访问，造成了封装的不严密。例如，通过在前面的例子中定义的<code>VTAB</code>宏，就可以直接获取函数指针，然后调用函数，这种调用是需要检查这个成员函数的性质的。</p>

<h2 id="section-5">同名函数隐藏规则</h2>

<p>在父类和子类中如果存在同名的函数，那么一定要小心了，这时需要重载父类中所有同名的函数。首先来看一个关于同名函数的例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>诡异的同名函数  (same_name.cc)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/polymorphism/same_name.cc">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm"> * 测试c++隐藏规则：</span>
</span><span class="line"><span class="cm"> * （1）如果派生类的函数与基类的函数同名，但是参数不同。</span>
</span><span class="line"><span class="cm"> *      不论有无virtual关键字，基类的函数将被隐藏（注意别与重载混淆）。</span>
</span><span class="line"><span class="cm"> * （2）如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数</span>
</span><span class="line"><span class="cm"> *      没有virtual关键字。此时，基类的函数被隐藏（注意别与覆盖混淆）。</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Base</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::f(float) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">	<span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::g(float) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">	<span class="kt">void</span> <span class="n">h</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::h(float) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">	<span class="kt">void</span> <span class="n">m</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::m(float) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span> <span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::f(float) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">	<span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::g(int) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">	<span class="kt">void</span> <span class="n">h</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::h(float) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">	<span class="kt">void</span> <span class="n">m</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::m(int) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">	<span class="n">Derived</span> <span class="n">d</span><span class="p">;</span>
</span><span class="line">	<span class="n">Base</span> <span class="o">*</span><span class="n">pb</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">;</span>
</span><span class="line">	<span class="n">Derived</span> <span class="o">*</span><span class="n">pd</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">;</span>
</span><span class="line">	<span class="c1">// Good : behavior depends solely on type of the object</span>
</span><span class="line">	<span class="n">pb</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">);</span> <span class="c1">// Derived::f(float) 3.14</span>
</span><span class="line">	<span class="n">pd</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">);</span> <span class="c1">// Derived::f(float) 3.14</span>
</span><span class="line">	<span class="c1">// Bad : behavior depends on type of the pointer</span>
</span><span class="line">	<span class="n">pb</span><span class="o">-&gt;</span><span class="n">g</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">);</span> <span class="c1">// Base::g(float) 3.14</span>
</span><span class="line">	<span class="n">pd</span><span class="o">-&gt;</span><span class="n">g</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">);</span> <span class="c1">// Derived::g(int) 3 (surprise!)</span>
</span><span class="line">	<span class="c1">// Bad : behavior depends on type of the pointer</span>
</span><span class="line">	<span class="n">pb</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">);</span> <span class="c1">// Base::h(float) 3.14 (surprise!)</span>
</span><span class="line">	<span class="n">pd</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">);</span> <span class="c1">// Derived::h(float) 3.14</span>
</span><span class="line">	<span class="c1">// Bad : behavior depends on type of the pointer</span>
</span><span class="line">	<span class="n">pb</span><span class="o">-&gt;</span><span class="n">m</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">);</span> <span class="c1">// Base::m(float) 3.14</span>
</span><span class="line">	<span class="n">pd</span><span class="o">-&gt;</span><span class="n">m</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">);</span> <span class="c1">// Derived::m(int) 3 (surprise!)</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出结果</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/polymorphism/same_name.jpg" /></p>

<p>注意在用不同类型的类指针调用<code>g()</code>,<code>h()</code>,<code>m()</code>三个函数时，程序实际的行为。</p>

<p>这样会带来一个问题，就是在继承后，重载了父类的一个函数，或在定义了一个函数，那么父类中与这个函数同名的函数都会被隐藏，子类的对象无法调用这些函数。</p>

<p>下面是一个例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>诡异的同名函数  (same_name1.cc)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/polymorphism/same_name1.cc">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="c1">// 测试隐藏规则：</span>
</span><span class="line"><span class="c1">// 子类重载同名函数, 无论是否声明为虚函数，父类的所有同名函数将会被隐藏 </span>
</span><span class="line">
</span><span class="line"><span class="cp">#include &lt;iostream&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Base</span><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::f(float) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">,</span> <span class="kt">float</span> <span class="n">y</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::f(float, float) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span><span class="p">{</span>
</span><span class="line"><span class="k">public</span><span class="o">:</span>
</span><span class="line">	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::f(float) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class="line">	<span class="n">Derived</span> <span class="n">d</span><span class="p">;</span>
</span><span class="line">	<span class="n">Base</span> <span class="o">*</span><span class="n">pb</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">;</span>
</span><span class="line">	<span class="n">Derived</span> <span class="o">*</span><span class="n">pd</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">;</span>
</span><span class="line">	<span class="n">pb</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">,</span> <span class="mf">3.14f</span><span class="p">);</span>
</span><span class="line">	<span class="n">pd</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">,</span> <span class="mf">3.14f</span><span class="p">);</span> <span class="c1">// Compile error</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在编译的时候会报这样的错误</p>

<p><img class="center" src="http://liuhongjiang.github.com/tech/images/blogimages/2012/polymorphism/same_name1_error.jpg" /></p>

<h2 id="section-6">总结</h2>

<ol>
  <li>虚函数是通过虚表实现运行时绑定。虚表存放在对象的起始位置。子类继承父类时，会将所有的虚表就继承下来，所有子类可能有多个虚表指针。如果子类重载了父类的某个虚函数，那么子类将重写<em style="color:red">所有虚表</em>中该函数的地址，子类将自己的虚函数添加到第一个虚表的最后。</li>
  <li>构造函数不能声明为虚函数，析构函数可以声明为虚函数，当类包含是虚函数的成员函数时，析构函数<em style="color:red">必须声明为虚函数</em>。</li>
  <li>当子类和父类有同名函数时，父类的所有与这个函数同名的函数都将被隐藏，子类的对象无法访问到。</li>
</ol>

<h3 id="section-7">参考</h3>

<p>本文参考了以下文章：</p>

<ol>
  <li>陈皓.<a href="http://blog.csdn.net/haoel/article/details/1948051/">C++ 虚函数表解析</a></li>
  <li><a href="http://www.cnblogs.com/xd502djj/archive/2010/09/22/1832912.html">C++ Virtual详解</a></li>
</ol>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>系统为ubuntu 12.04 server 64bit, 编译器为gcc 4.6.3 <a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>程序运行在64位机器上，所以使用long进行强制转换获取指针，如果在32位服务器上，就应该用int。<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客的样式]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2012/11/24/blog-styles/"/>
    <updated>2012-11-24T14:23:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2012/11/24/blog-styles</id>
    <content type="html"><![CDATA[<p>使用的markdown解析工具为kramdown。  </p>

<!-- more -->

<h2 id="section">引用块</h2>

<p>引用块的样式借用了<a href="http://kramdown.rubyforge.org/syntax.html#link-definitions">kramdown语法文档</a>中的样式。</p>

<p>在<code>/sass/custom/_style.scss</code>中添加样式定义</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="c">/* 引用 */</span>
</span><span class="line"><span class="nf">#content</span> <span class="nt">blockquote</span><span class="nc">.information</span> <span class="p">{</span>
</span><span class="line">  <span class="k">border-left</span><span class="o">:</span> <span class="m">12px</span> <span class="k">solid</span> <span class="m">#080</span><span class="p">;</span>
</span><span class="line">  <span class="k">background-color</span><span class="o">:</span> <span class="m">#bfb</span><span class="p">;</span>
</span><span class="line">  <span class="k">padding</span><span class="o">:</span> <span class="m">12px</span> <span class="m">12px</span> <span class="m">12px</span> <span class="m">0</span><span class="p">;</span>
</span><span class="line">  <span class="k">margin-left</span><span class="o">:</span> <span class="m">-48px</span><span class="p">;</span>
</span><span class="line">  <span class="k">padding-left</span><span class="o">:</span> <span class="m">48px</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后在markdown文件中的写法如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt; This is a blockquote. 
</span><span class="line">&gt; 这是一个引用块。   
</span><span class="line">{: .information}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>就会显示成这个样子</p>

<blockquote class="information">
  <p>This is a blockquote. <br />
这是一个引用块。</p>
</blockquote>

<h2 id="section-1">表格</h2>

<p>参考<a href="http://kramdown.rubyforge.org/syntax.html#tables">kramdown关于表格的参考手册</a>，或者是<a href="http://kramdown.rubyforge.org/quickref.html#tables">kramdown关于表格的快速参考手册</a>。下面表格的样式也是在这个基础上修改的。  <br />
首先看一下表格样式的定义，在<code>/sass/custom/_styles.scss</code>中定义样式</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="c">/* 表格 */</span>
</span><span class="line"><span class="nf">#content</span> <span class="nt">table</span><span class="nc">.mytable</span> <span class="p">{</span>
</span><span class="line">  <span class="k">border-collapse</span><span class="o">:</span> <span class="k">collapse</span><span class="p">;</span>
</span><span class="line">  <span class="k">margin-left</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class="line">  <span class="k">margin-right</span><span class="o">:</span> <span class="k">auto</span><span class="p">;</span>
</span><span class="line">  <span class="c">/*border: solid 1px black;*/</span>
</span><span class="line"> <span class="c">/* width: 100%; */</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nf">#content</span> <span class="nt">table</span><span class="nc">.mytable</span> <span class="nt">td</span><span class="o">,</span> <span class="nf">#content</span> <span class="nt">table</span><span class="nc">.mytable</span> <span class="nt">th</span> <span class="p">{</span>
</span><span class="line">    <span class="k">padding</span><span class="o">:</span> <span class="m">3px</span> <span class="m">5px</span><span class="p">;</span>
</span><span class="line">    <span class="k">border</span><span class="o">:</span> <span class="k">solid</span> <span class="m">1px</span> <span class="m">#070</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nf">#content</span> <span class="nt">table</span><span class="nc">.mytable</span> <span class="nt">th</span> <span class="p">{</span>
</span><span class="line">    <span class="k">background-color</span><span class="o">:</span> <span class="m">#080</span><span class="p">;</span>
</span><span class="line">    <span class="k">color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后可以用以下代码显示表格</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">| Header1 | Header2 | Header3 |
</span><span class="line">|:--------|:-------:|--------:|
</span><span class="line">| cell1   | cell2   | cell3   |
</span><span class="line">| cell4   | cell5   | cell6   |
</span><span class="line">|----
</span><span class="line">| cell1   | cell2   | cell3   |
</span><span class="line">| cell4   | cell5   | cell6   |
</span><span class="line">|=====
</span><span class="line">| Foot1   | Foot2   | Foot3
</span><span class="line">{: .mytable}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>显示的表格为</p>

<table class="mytable">
  <thead>
    <tr>
      <th style="text-align: left">Header1</th>
      <th style="text-align: center">Header2</th>
      <th style="text-align: right">Header3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">cell1</td>
      <td style="text-align: center">cell2</td>
      <td style="text-align: right">cell3</td>
    </tr>
    <tr>
      <td style="text-align: left">cell4</td>
      <td style="text-align: center">cell5</td>
      <td style="text-align: right">cell6</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td style="text-align: left">cell1</td>
      <td style="text-align: center">cell2</td>
      <td style="text-align: right">cell3</td>
    </tr>
    <tr>
      <td style="text-align: left">cell4</td>
      <td style="text-align: center">cell5</td>
      <td style="text-align: right">cell6</td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <td style="text-align: left">Foot1</td>
      <td style="text-align: center">Foot2</td>
      <td style="text-align: right">Foot3</td>
    </tr>
  </tfoot>
</table>

<p><br /></p>

<p>kramdown参考文档中的其它几个例子</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">|-----------------+------------+-----------------+----------------|
</span><span class="line">| Default aligned |Left aligned| Center aligned  | Right aligned  |
</span><span class="line">|-----------------|:-----------|:---------------:|---------------:|
</span><span class="line">| First body part |Second cell | Third cell      | fourth cell    |
</span><span class="line">| Second line     |foo         | **strong**      | baz            |
</span><span class="line">| Third line      |quux        | baz             | bar            |
</span><span class="line">|-----------------+------------+-----------------+----------------|
</span><span class="line">| Second body     |            |                 |                |
</span><span class="line">| 2 line          |            |                 |                |
</span><span class="line">|=================+============+=================+================|
</span><span class="line">| Footer row      |            |                 |                |
</span><span class="line">|-----------------+------------+-----------------+----------------|
</span><span class="line">{: .mytable}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意里面的对齐方式的定义（代码的第三行），还有第7,10行中关于表格分块的定义，显示</p>

<table class="mytable">
  <thead>
    <tr>
      <th>Default aligned</th>
      <th style="text-align: left">Left aligned</th>
      <th style="text-align: center">Center aligned</th>
      <th style="text-align: right">Right aligned</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>First body part</td>
      <td style="text-align: left">Second cell</td>
      <td style="text-align: center">Third cell</td>
      <td style="text-align: right">fourth cell</td>
    </tr>
    <tr>
      <td>Second line</td>
      <td style="text-align: left">foo</td>
      <td style="text-align: center"><strong>strong</strong></td>
      <td style="text-align: right">baz</td>
    </tr>
    <tr>
      <td>Third line</td>
      <td style="text-align: left">quux</td>
      <td style="text-align: center">baz</td>
      <td style="text-align: right">bar</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>Second body</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td>2 line</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <td>Footer row</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
    </tr>
  </tfoot>
</table>

<p>当然也有屌丝专用的丑陋，但简单的方式，与上面的表格一样</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">|---
</span><span class="line">| Default aligned | Left aligned | Center aligned | Right aligned
</span><span class="line">|-|:-|:-:|-:
</span><span class="line">| First body part | Second cell | Third cell | fourth cell
</span><span class="line">| Second line |foo | **strong** | baz
</span><span class="line">| Third line |quux | baz | bar
</span><span class="line">|---
</span><span class="line">| Second body
</span><span class="line">| 2 line
</span><span class="line">|===
</span><span class="line">| Footer row
</span><span class="line">{: .mytable}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后的显示的表格与上面是一样的。</p>

<table class="mytable">
  <thead>
    <tr>
      <th>Default aligned</th>
      <th style="text-align: left">Left aligned</th>
      <th style="text-align: center">Center aligned</th>
      <th style="text-align: right">Right aligned</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>First body part</td>
      <td style="text-align: left">Second cell</td>
      <td style="text-align: center">Third cell</td>
      <td style="text-align: right">fourth cell</td>
    </tr>
    <tr>
      <td>Second line</td>
      <td style="text-align: left">foo</td>
      <td style="text-align: center"><strong>strong</strong></td>
      <td style="text-align: right">baz</td>
    </tr>
    <tr>
      <td>Third line</td>
      <td style="text-align: left">quux</td>
      <td style="text-align: center">baz</td>
      <td style="text-align: right">bar</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>Second body</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td>2 line</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <td>Footer row</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
    </tr>
  </tfoot>
</table>

<p>当然还可以有没有那么复杂的直接上最简单的表格的方式</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">| First cell|Second cell|Third cell
</span><span class="line">| First | Second | Third |
</span><span class="line">First | Second | | Fourth |
</span><span class="line">{: .mytable}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>显示为</p>

<table class="mytable">
  <tbody>
    <tr>
      <td>First cell</td>
      <td>Second cell</td>
      <td>Third cell</td>
      <td> </td>
    </tr>
    <tr>
      <td>First</td>
      <td>Second</td>
      <td>Third</td>
      <td> </td>
    </tr>
    <tr>
      <td>First</td>
      <td>Second</td>
      <td> </td>
      <td>Fourth</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<h2 id="section-2">首行缩进</h2>

<p>blog的样式中是没有缩进的，这样多少还是有点难看。加入的方法如下，在<code>/sass/custom/_styles.scss</code>中加入如下代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="nf">#content</span> <span class="nc">.entry-content</span> <span class="o">&gt;</span> <span class="nt">p</span> <span class="p">{</span>
</span><span class="line">	<span class="k">text-indent</span><span class="o">:</span> <span class="m">2em</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后就有了现在的缩进样式。需要注意，在markdown文件中，如果在一行的后面加入空格来换行的话，生成的html文件中，是用&lt;br/&gt;来换行的，不是用&lt;p&gt;换行，就没有缩进的样式了。正确的方法是在两行文字之间插入空行。</p>

<p>但后来发现一个问题，在一行里面加入的代码块也有了缩进的样式, 就像这样子<code style="text-indent:2em">这里有了缩进</code>, 我用了比较土的方法解决，还是在上面的custom/_styles.scss中加入</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="nf">#content</span> <span class="nc">.entry-content</span> <span class="o">&gt;</span> <span class="nt">p</span> <span class="o">&gt;</span> <span class="nt">code</span> <span class="p">{</span>
</span><span class="line">	<span class="k">text-indent</span><span class="o">:</span> <span class="m">0em</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这种解决办法不是很好，因为总有可能导致其它标签里面意外出现缩进，但我也不熟悉css，只有先这么办了，先解决眼前的问题。</p>

<h2 id="section-3">添加豆瓣的侧边栏</h2>

<p><a href="http://www.douban.com/service/badgemakerjs">豆瓣收藏秀</a>可以为你的博客生成一个侧边栏，放入到你的博客中。访问这个网址<a href="">http://www.douban.com/service/badgemakerjs</a>，可以生成一段js代码，然后讲这段代码嵌入到侧边栏的html中即可。</p>

<p>具体的做法，显示在收藏秀的页面里面选择好需要显示的内容，例如：我选择了，我想看的、书、每次随机选择、共显示9个 每行3个、图片小，下面两个选择隐藏，然后生成了这样的JS代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://www.douban.com/service/badge/63148093/?show=wishlist&amp;amp;select=random&amp;amp;n=9&amp;amp;columns=3&amp;amp;hidelogo=yes&amp;amp;hideself=yes&amp;amp;cat=book&quot;</span> <span class="o">&gt;&lt;</span><span class="err">/script&gt; </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后创建文件<code>/source/_includes/custom/asides/douban-wishreading.html</code>, 在这个html文件中加入如下代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>豆瓣想读的书  (douban-wishreading.html)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/blog_style/douban-wishreading.html">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;well&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;douban-wish&quot;</span> <span class="na">class=</span><span class="s">&quot;nav nav-list&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;nav-header&quot;</span><span class="nt">&gt;</span>想读的书<span class="nt">&lt;/li&gt;</span>
</span><span class="line">  <span class="nt">&lt;/ul&gt;</span>
</span><span class="line">  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://www.douban.com/service/badge/63148093/?show=wishlist&amp;amp;select=random&amp;amp;n=9&amp;amp;columns=3&amp;amp;hidelogo=yes&amp;amp;hideself=yes&amp;amp;cat=book&quot;</span> <span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;https://www.douban.com/people/63148093&quot;</span><span class="nt">&gt;</span>@左左哥<span class="nt">&lt;/a&gt;</span> on Douban
</span><span class="line"><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其中第5行为豆瓣收藏秀生成的JS代码，其它的样式代码为blog的样式, 用于不同的blog可能需要修改。然后需要在<code>_config.yml</code>里修改配置，在<code>default_asides</code>中加入<code>custom/asides/douban-wishreading.html</code>，就像这样</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="l-Scalar-Plain">default_asides</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">asides/recent_posts.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/douban-reading.html</span><span class="p-Indicator">,</span> <span class="nv">custom/asides/douban-wishreading.html</span><span class="p-Indicator">,</span> <span class="nv">asides/github.html</span><span class="p-Indicator">,</span> <span class="nv">asides/twitter.html</span><span class="p-Indicator">,</span> <span class="nv">asides/delicious.html</span><span class="p-Indicator">,</span> <span class="nv">asides/pinboard.html</span><span class="p-Indicator">,</span> <span class="nv">asides/googleplus.html</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后展现的样子可以参考<a href="http://liuhongjiang.github.com/life/">猪猫的生活</a>。</p>

<h2 id="section-4">文章摘要</h2>

<p>当文章比较长的时候，如果在文章的前面有一个摘要，就会方便很多。下面就就是一个添加摘要的简单方法。</p>

<p>首先在文章的markdown文件中添加一个变量<code>abstract</code>如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="nn">---</span>
</span><span class="line"><span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">post</span>
</span><span class="line"><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="s">&quot;博客的样式&quot;</span>
</span><span class="line"><span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2012-11-24 14:23</span>
</span><span class="line"><span class="l-Scalar-Plain">comments</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class="line"><span class="l-Scalar-Plain">categories</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">octopress</span>
</span><span class="line"><span class="l-Scalar-Plain">abstract</span><span class="p-Indicator">:</span> <span class="s">&quot;本文就介绍了这个blog搭建过程中，一些样式如何设置的。包括：引用块的样式，表格的样式，首行缩进，添加豆瓣侧边栏,</span><span class="nv"> </span><span class="s">文章摘要。&quot;</span>
</span><span class="line"><span class="nn">---</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后修改<code>source/_include/article.html</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>修改article.html  (article.diff)</span> <a href="http://liuhongjiang.github.com/tech/code/2012/blog_style/article.diff">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
</pre></td><td class="code"><pre><code class="diff"><span class="line"><span class="gh">diff --git a/source/_includes/article.html b/source/_includes/article.html</span>
</span><span class="line"><span class="gh">index 4a477e0..f377d2c 100644</span>
</span><span class="line"><span class="gd">--- a/source/_includes/article.html</span>
</span><span class="line"><span class="gi">+++ b/source/_includes/article.html</span>
</span><span class="line"><span class="gu">@@ -32,7 +32,19 @@</span>
</span><span class="line">   &lt;/header&gt;
</span><span class="line"> {% endunless %}
</span><span class="line"> {% if index %}
</span><span class="line"><span class="gd">-  &lt;div class=&quot;entry-content&quot;&gt;{{ content | excerpt }}&lt;/div&gt;</span>
</span><span class="line"><span class="gi">+    &lt;div class=&quot;entry-content&quot;&gt;</span>
</span><span class="line"><span class="gi">+        {% if post.abstract %}</span>
</span><span class="line"><span class="gi">+        &lt;div class=&quot;abstract&quot;&gt;</span>
</span><span class="line"><span class="gi">+            &lt;table&gt;</span>
</span><span class="line"><span class="gi">+                &lt;tr&gt;</span>
</span><span class="line"><span class="gi">+                    &lt;td style=&quot;font-size:18px;font-weight:bold;width:60px&quot;&gt;摘要：&lt;/td&gt;</span>
</span><span class="line"><span class="gi">+                    &lt;td&gt;{{ post.abstract }}&lt;/td&gt;</span>
</span><span class="line"><span class="gi">+                &lt;/tr&gt;</span>
</span><span class="line"><span class="gi">+            &lt;/table&gt;</span>
</span><span class="line"><span class="gi">+        &lt;/div&gt;</span>
</span><span class="line"><span class="gi">+        {% endif %}</span>
</span><span class="line"><span class="gi">+        {{ content | excerpt }}</span>
</span><span class="line"><span class="gi">+    &lt;/div&gt;</span>
</span><span class="line">   {% capture excerpted %}{{ content | has_excerpt }}{% endcapture %}
</span><span class="line">   {% if excerpted == &#39;true&#39; %}
</span><span class="line">     &lt;footer&gt;
</span><span class="line"><span class="gu">@@ -40,5 +52,16 @@</span>
</span><span class="line">     &lt;/footer&gt;
</span><span class="line">   {% endif %}
</span><span class="line"> {% else %}
</span><span class="line"><span class="gd">-&lt;div class=&quot;entry-content&quot;&gt;{{ content }}&lt;/div&gt;</span>
</span><span class="line"><span class="gi">+&lt;div class=&quot;entry-content&quot;&gt;</span>
</span><span class="line"><span class="gi">+    {% if page.abstract %}</span>
</span><span class="line"><span class="gi">+    &lt;div class=&quot;abstract&quot;&gt;</span>
</span><span class="line"><span class="gi">+        &lt;table&gt;</span>
</span><span class="line"><span class="gi">+            &lt;tr&gt;</span>
</span><span class="line"><span class="gi">+                &lt;td style=&quot;font-size:18px;font-weight:bold;width:60px&quot;&gt;摘要：&lt;/td&gt;</span>
</span><span class="line"><span class="gi">+                &lt;td&gt;{{ page.abstract }}&lt;/td&gt;</span>
</span><span class="line"><span class="gi">+            &lt;/tr&gt;</span>
</span><span class="line"><span class="gi">+        &lt;/table&gt;</span>
</span><span class="line"><span class="gi">+    &lt;/div&gt;</span>
</span><span class="line"><span class="gi">+    {% endif %}</span>
</span><span class="line"><span class="gi">+    {{ content }}&lt;/div&gt;</span>
</span><span class="line"> {% endif %}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>之后修改样式文件<code>sass/custom/_styles.scss</code>, 添加如下的样式</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="css"><span class="line"><span class="nc">.abstract</span><span class="o">,</span> <span class="nc">.warning</span><span class="p">{</span>
</span><span class="line"><span class="k">border</span><span class="o">:</span><span class="k">none</span><span class="p">;</span>
</span><span class="line"><span class="k">padding</span><span class="o">:</span><span class="m">0.6em</span> <span class="m">1.25em</span> <span class="m">0.6em</span> <span class="m">1.25em</span><span class="p">;</span>
</span><span class="line">    <span class="k">margin-top</span><span class="o">:</span><span class="m">0.25em</span><span class="p">;</span>
</span><span class="line">    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">8px</span><span class="p">;</span>
</span><span class="line">    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">8px</span><span class="p">;</span>
</span><span class="line">    <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">8px</span><span class="p">;</span>
</span><span class="line">    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="m">0</span> <span class="m">4px</span> <span class="m">4px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">.</span><span class="m">3</span><span class="p">);</span>
</span><span class="line">    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="m">0</span> <span class="m">4px</span> <span class="m">4px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">.</span><span class="m">3</span><span class="p">);</span>
</span><span class="line">    <span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="m">0</span> <span class="m">4px</span> <span class="m">4px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">.</span><span class="m">3</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nc">.abstract</span><span class="p">{</span>
</span><span class="line">    <span class="k">background</span><span class="o">:</span><span class="m">#d5e9f6</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>就可以显示和本文开始一样的摘要了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读Vim手册笔记]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2012/11/22/learning-vim/"/>
    <updated>2012-11-22T10:22:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2012/11/22/learning-vim</id>
    <content type="html"><![CDATA[<h2 id="section">书籍</h2>
<pre class="sh-bash"><code>《VIM用户手册》  
作者: Bram Moolenaar  
翻译: ZhaoRuFei&lt;slimzhao@hotmail.com&gt;  
版本: 7.0  
</code></pre>

<h2 id="section-1">笔记</h2>
<ol>
  <li><strong>要退出Vim, 用命令”ZZ”. 该命令保存当前文件并退出Vim.</strong></li>
  <li>如果你在放弃所有修改后还想以该文件的初始内容作为开始继续编辑, 还可以用”:e!”命令放弃所有修改并重新载入该文件的原始内容.</li>
</ol>

<h2 id="section-2">奇技淫巧</h2>

<ol>
  <li>d^ 删除光标到行首第一个非空白字符之间的内容，可用于删除行首的空白 </li>
  <li>gu/gU 大小写转化，gu小写，gU转为大写.    <br />
 u/U： 选中区域，直接进行大小写转换
 gg gu G：整篇文章大写转化为小写。  <br />
 gU0 ：从光标所在位置到行首变为大写  <br />
 gU$ ：从光标所在位置到行尾变为大写    </li>
  <li><a href="http://www.cnblogs.com/respawn/archive/2012/08/21/2649483.html">vundle 管理vim插件</a></li>
  <li>vim查看编译错误
 <code>:make</code>     进行编译，需要在makefile所在的目录下打开文件
 <code>:cw</code>       带开quickfix窗口
 cn          （next）下一条
 cp          (previous) 上一条
 cw          (显示warning)
 cc          显示错误
 col         前一个旧的错误 勘误表
 col         后一个旧的勘误表
 cnew        后一个较新的错误列表 ( :help :cnew )</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[显示公式]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2012/11/21/math/"/>
    <updated>2012-11-21T12:49:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2012/11/21/math</id>
    <content type="html"><![CDATA[<p>在网页或blog中引用数学公式是一件痛苦的事情。经过几番在网上的查找，算是勉强找到了一个借鉴方法。借用强大的<code>MathJax + Latex</code>就可以解决这个问题。废话少说，先来一个例子  </p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
 %]]&gt;</script>

<!-- more -->

<h2 id="section">更多例子</h2>

<p>下面是在段中插入公式：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">段内插入LaTeX代码是这样的：$\exp(-\frac{x^2}{2})$，试试看看吧</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class="showbox">
  <p>段内插入LaTeX代码是这样的：$\exp(-\frac{x^2}{2})$，试试看看吧</p>
</div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">在段中插入公式$$J_\alpha(x) = \sum\limits_{m=0}^\infty \frac{(-1)^m}{m! \, \Gamma(m + \alpha + 1)}{\left({\frac{x}{2}}\right)}^{2 m + \alpha}$$,效果如何</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="showbox">
  <p>在段中插入公式<script type="math/tex">J_\alpha(x) = \sum\limits_{m=0}^\infty \frac{(-1)^m}{m! \, \Gamma(m + \alpha + 1)}{\left({\frac{x}{2}}\right)}^{2 m + \alpha}</script>,效果如何</p>
</div>

<h2 id="section-1">更多更多例子</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$$
</span><span class="line">\begin{align*}
</span><span class="line">  &amp; J_\alpha(x) = \sum\limits_{m=0}^\infty \frac{(-1)^m}{m! \, \Gamma(m + \alpha + 1)}{\left({\frac{x}{2}}\right)}^{2 m + \alpha}
</span><span class="line">\end{align*}
</span><span class="line">$$</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>公式显示如下： <em style="color:red"> 注意：$$前一定要有空行</em></p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & J_\alpha(x) = \sum\limits_{m=0}^\infty \frac{(-1)^m}{m! \, \Gamma(m + \alpha + 1)}{\left({\frac{x}{2}}\right)}^{2 m + \alpha}
\end{align*}
 %]]&gt;</script>

<p>或者在一行里：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$$ J_\alpha(x) = \sum\limits_{m=0}^\infty \frac{(-1)^m}{m! \, \Gamma(m + \alpha + 1)}{\left({\frac{x}{2}}\right)}^{2 m + \alpha} $$</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>公式显示如下：</p>

<script type="math/tex; mode=display"> J_\alpha(x) = \sum\limits_{m=0}^\infty \frac{(-1)^m}{m! \, \Gamma(m + \alpha + 1)}{\left({\frac{x}{2}}\right)}^{2 m + \alpha} </script>

<h2 id="section-2">本文开头的例子</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$$
</span><span class="line">\begin{align*}
</span><span class="line">  &amp; \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
</span><span class="line">  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
</span><span class="line">  &amp; (x_1, \ldots, x_n) \left( \begin{array}{ccc}
</span><span class="line">      \phi(e_1, e_1) &amp; \cdots &amp; \phi(e_1, e_n) \\
</span><span class="line">      \vdots &amp; \ddots &amp; \vdots \\
</span><span class="line">      \phi(e_n, e_1) &amp; \cdots &amp; \phi(e_n, e_n)
</span><span class="line">    \end{array} \right)
</span><span class="line">  \left( \begin{array}{c}
</span><span class="line">      y_1 \\
</span><span class="line">      \vdots \\
</span><span class="line">      y_n
</span><span class="line">    \end{array} \right)
</span><span class="line">\end{align*}
</span><span class="line">$$</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>显示如下：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
 %]]&gt;</script>

<h2 id="section-3">错误的例子</h2>

<p>这个本来是MathJax默认的方式，但是在kramdown中无法显示</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">\[ J_\alpha(x) = \sum\limits_{m=0}^\infty \frac{(-1)^m}{m! \, \Gamma(m + \alpha + 1)}{\left({\frac{x}{2}}\right)}^{2 m + \alpha} \]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>[ J<em>\alpha(x) = \sum\limits</em>{m=0}^\infty \frac{(-1)^m}{m! \, \Gamma(m + \alpha + 1)}{\left({\frac{x}{2}}\right)}^{2 m + \alpha} ]</p>

<h2 id="krmadown">krmadown</h2>

<p>本文主要用到了krmadown,使用很简单，下载安装kramdown，在后在_config.yml文件里面配置即可</p>

<ul>
  <li>
    <p>kramdown主页 <br />
<a href="http://kramdown.rubyforge.org/">kramdown</a>  </p>
  </li>
  <li>
    <p>配置kramdown<br />
在_config.yml文件里</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">markdown: kramdown</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-4">链接</h2>

<p>其实我主要是借鉴了下面两篇文字，具体如何配置，也可以在这两篇文字中找到。</p>

<ul>
  <li><a href="http://yanping.me/cn/blog/2012/03/10/octopress-with-latex/">如何加入公式</a>  </li>
  <li><a href="http://steshaw.org/blog/2012/02/09/hello-mathjax/">解决闪烁问题</a>  </li>
</ul>

<h2 id="mathjax">MathJax加载</h2>

<p>按照“<a href="http://yanping.me/cn/blog/2012/03/10/octopress-with-latex/">如何加入公式</a>”的方法加入脚本，会产生一个问题，无论这个页面有没有数学公式，都会去加载MathJax脚本，而加载这个脚本的速度非常慢。那么如何控制，哪些页面加入这个脚本，哪些页面不需要加？    </p>

<p>首先，我在post文档中加入了一个变量<code>math</code>,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">---
</span><span class="line">layout: post
</span><span class="line">title: "显示公式"
</span><span class="line">date: 2012-11-21 12:49
</span><span class="line">comments: true
</span><span class="line">math: true
</span><span class="line">categories: math
</span><span class="line">---</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后在<code>source/_includes/custom/head.html</code>加入脚本相关内容时，加入了<code> {% if page.math == true %}...{% endif %} </code>语句进行判断，完整的如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">{% if page.math == true %}
</span><span class="line">&lt;!--JS for show math symbols --&gt;
</span><span class="line">&lt;script type="text/x-mathjax-config"&gt;
</span><span class="line">  MathJax.Hub.Config({
</span><span class="line">    tex2jax: {
</span><span class="line">      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
</span><span class="line">      processEscapes: true
</span><span class="line">    }
</span><span class="line">  });
</span><span class="line">&lt;/script&gt;
</span><span class="line">
</span><span class="line">&lt;script type="text/x-mathjax-config"&gt;
</span><span class="line">    MathJax.Hub.Config({
</span><span class="line">      tex2jax: {
</span><span class="line">        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
</span><span class="line">      }
</span><span class="line">    });
</span><span class="line">&lt;/script&gt;
</span><span class="line">
</span><span class="line">&lt;script type="text/x-mathjax-config"&gt;
</span><span class="line">    MathJax.Hub.Queue(function() {
</span><span class="line">        var all = MathJax.Hub.getAllJax(), i;
</span><span class="line">        for(i=0; i &lt; all.length; i += 1) {
</span><span class="line">            all[i].SourceElement().parentNode.className += ' has-jax';
</span><span class="line">        }
</span><span class="line">    });
</span><span class="line">&lt;/script&gt;
</span><span class="line">
</span><span class="line">&lt;script type="text/javascript"
</span><span class="line">  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&gt;
</span><span class="line">&lt;/script&gt;
</span><span class="line">{% endif %}
</span><span class="line"></span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样，在post的markdown中文件中，如果你声明<code>math</code>为<code>true</code>,那么就会在最后生成的html文件中加上这段加载MathJax的代码；如果不声明，或在声明为空或<code>false</code>，就不会添加加载MathJax的代码。   </p>

<p>还有一个问题，就是在博客首页生成的pinboard中，如果有公式的话，就无法正常显示了。如果需要在首页的pinboard中显示公式，在<code>source/index.html</code>文件中加入<code>math</code>的声明。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">---
</span><span class="line">layout: default
</span><span class="line">math: true
</span><span class="line">---</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="latex">关于Latex</h2>

<p>本人不会Latex，那么怎么生成Latex格式的公式呢？   </p>

<ul>
  <li>一是可以在线生成：<a href="http://www.codecogs.com/latex/eqneditor.php">Online LaTeX Equation Editor</a>   </li>
  <li>二是使用mathtype。 <br />
  在mathtype的<code>Preferences</code>-&gt;<code>Cut and Copy preferences...</code>选中<code>MathML to Tex</code>。编辑公式后拷贝，粘贴到记事本，就可以得到Latex格式的公式。</li>
</ul>

<h2 id="latex-1">常用latex符号</h2>

<p>特殊字符</p>

<table class="mytable">
  <thead>
    <tr>
      <th style="text-align: center">功能</th>
      <th style="text-align: center">语法</th>
      <th style="text-align: center">显示</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">标准函数</td>
      <td style="text-align: center"><code>\sin x + \ln y +\operatorname{sgn} z </code></td>
      <td style="text-align: center">$\sin x + \ln y +\operatorname{sgn} z$</td>
    </tr>
    <tr>
      <td style="text-align: center">其他</td>
      <td style="text-align: center"><code>\nabla \partial dx</code></td>
      <td style="text-align: center">$\nabla \partial dx$</td>
    </tr>
    <tr>
      <td style="text-align: center">集</td>
      <td style="text-align: center"><code>\forall x\not\in\varnothing\subseteq A\cap B\cup \exists \{x,y\} \times C</code></td>
      <td style="text-align: center">$\forall x \not\in \varnothing \subseteq A\cap B\cup \exists {x,y} \times C$</td>
    </tr>
    <tr>
      <td style="text-align: center">逻辑</td>
      <td style="text-align: center"><code>p\wedge \bar{q} \rightarrow p\vee \bar{q} \Rightarrow r</code></td>
      <td style="text-align: center">$p\wedge \bar{q} \rightarrow p\vee \bar{q} \Rightarrow r$</td>
    </tr>
    <tr>
      <td style="text-align: center">根号</td>
      <td style="text-align: center"><code>\pm \sqrt{2}\approx\pm 1.4</code></td>
      <td style="text-align: center">$\pm \sqrt{2}\approx\pm 1.4$</td>
    </tr>
    <tr>
      <td style="text-align: center"> </td>
      <td style="text-align: center"><code>\sqrt[n]{x}</code></td>
      <td style="text-align: center">$\sqrt[n]{x}$</td>
    </tr>
    <tr>
      <td style="text-align: center">等号</td>
      <td style="text-align: center"><code>\sim \simeq \cong \le \ge \equiv \approx \ne</code></td>
      <td style="text-align: center">$\sim \ \simeq \ \cong \ \le \ \ge \ \equiv \ \approx \ \ne$</td>
    </tr>
    <tr>
      <td style="text-align: center">几何</td>
      <td style="text-align: center"><code>\angle \perp \|</code></td>
      <td style="text-align: center">$\angle \perp \|$</td>
    </tr>
    <tr>
      <td style="text-align: center">特殊</td>
      <td style="text-align: center"><code>\oplus \otimes \mp \hbar \dagger \ddagger \star \circ \cdot \bullet</code></td>
      <td style="text-align: center">$\oplus \otimes \mp \ \hbar \dagger \ddagger \star \circ \cdot \bullet$</td>
    </tr>
  </tbody>
</table>

<p><a href="http://wiki.ubuntu.org.cn/Wikipedia:%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F">letax数学公式</a></p>

]]></content>
  </entry>
  
</feed>
