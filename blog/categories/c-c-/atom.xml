<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: C/C++ | 刘洪江的流水帐]]></title>
  <link href="http://liuhongjiang.github.com/tech/blog/categories/c-c-/atom.xml" rel="self"/>
  <link href="http://liuhongjiang.github.com/tech/"/>
  <updated>2015-05-15T16:53:02+08:00</updated>
  <id>http://liuhongjiang.github.com/tech/</id>
  <author>
    <name><![CDATA[刘洪江]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jni调用C和C++]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2012/12/07/jni-call/"/>
    <updated>2012-12-07T13:29:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2012/12/07/jni-call</id>
    <content type="html"><![CDATA[<p>已经在工作中碰到了两个这样的例子了，项目用java，但需要调用C/C++的库。之前一个是用java写hadoop的job，但是调用的算法是用C++实现的，使用的是jni。现在好像jni在android上面也有用到，但是我不了解。我自己也不懂java，但实际工作中有的时候也要看看java代码。所以决定写一个简单的jni例子，了解一下jni怎么完成C/C++调用的。</p>

<!-- more -->

<p>对于jni的内部实现，我也是不求甚解。编写一个java程序</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>jni调用的java代码  (Sample1.java)</span> <a href='/code/2012/jni-call/Sample1.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample1</span> <span class="o">{</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kd">native</span> <span class="kt">int</span> <span class="nf">intMethod</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">);</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kd">native</span> <span class="kt">boolean</span> <span class="nf">booleanMethod</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">bool</span><span class="o">);</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kd">native</span> <span class="n">String</span> <span class="nf">stringMethod</span><span class="o">(</span><span class="n">String</span> <span class="n">text</span><span class="o">);</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kd">native</span> <span class="kt">int</span> <span class="nf">intArrayMethod</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">intArray</span><span class="o">);</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">loadLibrary</span><span class="o">(</span><span class="s">&quot;Sample1&quot;</span><span class="o">);</span>
</span><span class='line'>		<span class="n">Sample1</span> <span class="n">sample</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sample1</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>		<span class="kt">int</span> <span class="n">square</span> <span class="o">=</span> <span class="n">sample</span><span class="o">.</span><span class="na">intMethod</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;intMethod: &quot;</span> <span class="o">+</span> <span class="n">square</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>		<span class="kt">boolean</span> <span class="n">bool</span> <span class="o">=</span> <span class="n">sample</span><span class="o">.</span><span class="na">booleanMethod</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;booleanMethod: &quot;</span> <span class="o">+</span> <span class="n">bool</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>		<span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">sample</span><span class="o">.</span><span class="na">stringMethod</span><span class="o">(</span><span class="s">&quot;java&quot;</span><span class="o">);</span>
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;stringMethod: &quot;</span> <span class="o">+</span> <span class="n">text</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>		<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">sample</span><span class="o">.</span><span class="na">intArrayMethod</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">13</span> <span class="o">});</span>
</span><span class='line'>		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;intArrayMethod: &quot;</span> <span class="o">+</span> <span class="n">sum</span><span class="o">);</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后编译java文件</p>

<p><code>sh
javac Sample1.java
</code></p>

<p>编译完以后, 使用下面的命令生成jni调用的头文件</p>

<p><code>sh
javah -classpath ./ -jni Sample1
</code></p>

<p>生成的头文件为Sample1.h, 就是下面C/C++实现的函数的声明, <em> 注意：Sample1.h是自动生成的</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>jni生成的头文件  (Sample1.h)</span> <a href='/code/2012/jni-call/Sample1.h'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/* DO NOT EDIT THIS FILE - it is machine generated */</span>
</span><span class='line'><span class="cp">#include &lt;jni.h&gt;</span>
</span><span class='line'><span class="cm">/* Header for class Sample1 */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef _Included_Sample1</span>
</span><span class='line'><span class="cp">#define _Included_Sample1</span>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Class:     Sample1</span>
</span><span class='line'><span class="cm"> * Method:    intMethod</span>
</span><span class='line'><span class="cm"> * Signature: (I)I</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span> <span class="n">Java_Sample1_intMethod</span>
</span><span class='line'>  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">,</span> <span class="n">jint</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Class:     Sample1</span>
</span><span class='line'><span class="cm"> * Method:    booleanMethod</span>
</span><span class='line'><span class="cm"> * Signature: (Z)Z</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jboolean</span> <span class="n">JNICALL</span> <span class="n">Java_Sample1_booleanMethod</span>
</span><span class='line'>  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">,</span> <span class="n">jboolean</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Class:     Sample1</span>
</span><span class='line'><span class="cm"> * Method:    stringMethod</span>
</span><span class='line'><span class="cm"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span> <span class="n">Java_Sample1_stringMethod</span>
</span><span class='line'>  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">,</span> <span class="n">jstring</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Class:     Sample1</span>
</span><span class='line'><span class="cm"> * Method:    intArrayMethod</span>
</span><span class='line'><span class="cm"> * Signature: ([I)I</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span> <span class="n">Java_Sample1_intArrayMethod</span>
</span><span class='line'>  <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="p">,</span> <span class="n">jobject</span><span class="p">,</span> <span class="n">jintArray</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>有了头文件后，就可以实现这些调用的C/C++代码</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>C++实现的Sample1.cpp  (Sample1.cpp)</span> <a href='/code/2012/jni-call/Sample1.cpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;Sample1.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;ctype.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
</span><span class='line'><span class="n">Java_Sample1_intMethod</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jint</span> <span class="n">num</span><span class="p">){</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">num</span> <span class="o">*</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jboolean</span> <span class="n">JNICALL</span>
</span><span class='line'><span class="n">Java_Sample1_booleanMethod</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jboolean</span> <span class="n">boolean</span><span class="p">){</span>
</span><span class='line'>   <span class="k">return</span> <span class="o">!</span><span class="n">boolean</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span>
</span><span class='line'><span class="n">Java_Sample1_stringMethod</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jstring</span> <span class="n">jstr</span><span class="p">){</span>
</span><span class='line'>     <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetStringUTFChars</span><span class="p">(</span><span class="n">jstr</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>     <span class="kt">char</span> <span class="n">cap</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class='line'>     <span class="n">strcpy</span><span class="p">(</span><span class="n">cap</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class='line'>     <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">jstr</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class='line'>	 <span class="kt">char</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">cap</span><span class="p">;</span>
</span><span class='line'>	 <span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">ptr</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">){</span>
</span><span class='line'>		 <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">toupper</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>		 <span class="n">ptr</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>	 <span class="p">}</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">cap</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
</span><span class='line'><span class="n">Java_Sample1_intArrayMethod</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jintArray</span> <span class="n">array</span><span class="p">){</span>
</span><span class='line'>     <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>     <span class="n">jsize</span> <span class="n">len</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetArrayLength</span><span class="p">(</span><span class="n">array</span><span class="p">);</span>
</span><span class='line'>     <span class="n">jint</span> <span class="o">*</span><span class="n">body</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetIntArrayElements</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>     <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="n">sum</span> <span class="o">+=</span> <span class="n">body</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="n">env</span><span class="o">-&gt;</span><span class="n">ReleaseIntArrayElements</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然后调用下面的命令生成动态链接库(系统:ubuntu 12.04，gcc编译）</p>

<p><code>sh
g++ -I /usr/lib/jvm/java-1.6.0-openjdk/include/ -I /usr/lib/jvm/java-1.6.0-openjdk/include/linux/ Sample1.cpp -fPIC -shared -o libSample1.so
</code></p>

<p>具体的jdk的路径应该是和本地的相适应的。</p>

<p>然后运行java程序</p>

<p><code>sh 
java Sample1
</code></p>

<p>运行结果如下</p>

<p><img class="center" src="/images/blogimages/2012/jni-call/cpp-output.jpg"></p>

<p>图中加入了一个环境变量的声明，<code>export LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH</code>, 当java加载动态链接库时，会在本地路径下找libSample1.so。</p>

<p>上面是调用C++的代码，C实现的代码如下</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>C语言实现的Sample1.c  (Sample1.c)</span> <a href='/code/2012/jni-call/Sample1.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * the difference between C++ and c like this:</span>
</span><span class='line'><span class="cm"> *		const char *str = (*env)-&gt;GetStringUTFChars(env, jstr, 0);</span>
</span><span class='line'><span class="cm"> *		const char *str = env-&gt;GetStringUTFChars(jstr, 0);</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;Sample1.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;ctype.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
</span><span class='line'><span class="n">Java_Sample1_intMethod</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jint</span> <span class="n">num</span><span class="p">){</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">num</span> <span class="o">*</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jboolean</span> <span class="n">JNICALL</span>
</span><span class='line'><span class="n">Java_Sample1_booleanMethod</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jboolean</span> <span class="n">boolean</span><span class="p">){</span>
</span><span class='line'>   <span class="k">return</span> <span class="o">!</span><span class="n">boolean</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jstring</span> <span class="n">JNICALL</span>
</span><span class='line'><span class="n">Java_Sample1_stringMethod</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jstring</span> <span class="n">jstr</span><span class="p">){</span>
</span><span class='line'>     <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">jstr</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>     <span class="kt">char</span> <span class="n">cap</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class='line'>     <span class="n">strcpy</span><span class="p">(</span><span class="n">cap</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class='line'>     <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">jstr</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class='line'>	 <span class="kt">char</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">cap</span><span class="p">;</span>
</span><span class='line'>	 <span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">ptr</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">){</span>
</span><span class='line'>		 <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">toupper</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>		 <span class="n">ptr</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>	 <span class="p">}</span>
</span><span class='line'>     <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">NewStringUTF</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">cap</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span>
</span><span class='line'><span class="n">Java_Sample1_intArrayMethod</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jintArray</span> <span class="n">array</span><span class="p">){</span>
</span><span class='line'>     <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>     <span class="n">jsize</span> <span class="n">len</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetArrayLength</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">array</span><span class="p">);</span>
</span><span class='line'>     <span class="n">jint</span> <span class="o">*</span><span class="n">body</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetIntArrayElements</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">array</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>     <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="n">sum</span> <span class="o">+=</span> <span class="n">body</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseIntArrayElements</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">array</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>C与C++的实现基本一样，唯一的差异在于用来访问 JNI 函数的方法。在 C 中，JNI 函数调用由“(*env)-&gt;”作前缀，目的是为了取出函数指针所引用的值。在 C++ 中，JNIEnv 类拥有处理函数指针查找的内联成员函数。下面将说明这个细微的差异，其中，这两行代码访问同一函数，但每种语言都有各自的语法。</p>

<p><code>c
C 语法：jsize len = (*env)-&gt;GetArrayLength(env,array);
C++ 语法：jsize len = env-&gt;GetArrayLength(array);
</code></p>

<p>编译命令</p>

<p><code>sh
gcc -I /usr/lib/jvm/java-1.6.0-openjdk/include/ -I /usr/lib/jvm/java-1.6.0-openjdk/include/linux/ Sample1.c -fPIC -shared -o libSample1.so
</code></p>

<p>运行结果与上面C++的输出是一致的。</p>

<p>实际上我是用了一个脚本完成编译等工作的</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>完成整个过程的脚本  (run.sh)</span> <a href='/code/2012/jni-call/run.sh'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;### compile Sample1.java&quot;</span>
</span><span class='line'>javac Sample1.java
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;### generate jni headerfile Sample1.h&quot;</span>
</span><span class='line'>javah -classpath ./ -jni Sample1
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;### compile cpp Sample1.so&quot;</span>
</span><span class='line'>g++ -I /usr/lib/jvm/java-1.6.0-openjdk/include/ -I /usr/lib/jvm/java-1.6.0-openjdk/include/linux/ Sample1.cpp -fPIC -shared -o libSample1.so
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span>.:<span class="nv">$LD_LIBRARY_PATH</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;### run cpp&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;---------------&quot;</span>
</span><span class='line'>java Sample1
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;--------------- end&quot;</span>
</span><span class='line'>
</span><span class='line'>rm libSample1.so
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;### compile c Sample1.so&quot;</span>
</span><span class='line'>gcc -I /usr/lib/jvm/java-1.6.0-openjdk/include/ -I /usr/lib/jvm/java-1.6.0-openjdk/include/linux/ Sample1.c -fPIC -shared -o libSample1.so
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;### run c&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;---------------&quot;</span>
</span><span class='line'>java Sample1
</span><span class='line'>
</span><span class='line'><span class="c">#rm libSample1.so Sample1.class Sample1.h</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>脚本的运行结果如下图</p>

<p><img class="center" src="/images/blogimages/2012/jni-call/run-output.jpg"></p>

<p>github上本文的例子代码 <a href="https://github.com/andrewliu117/test/tree/master/cpp_test/jni">jni调用的例子</a></p>

<p>本文参考了以下两个blog的内容, 代码来自第二个blog。</p>

<ul>
  <li><a href="http://www.cnblogs.com/hoys/archive/2011/09/30/2196290.html">Java基础知识——JNI入门介绍</a></li>
  <li><a href="http://blog.sina.com.cn/s/blog_60c8379d01015epl.html">第二篇：一个jni例子</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[虚继承]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2012/11/30/virtual-inheritance/"/>
    <updated>2012-11-30T15:13:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2012/11/30/virtual-inheritance</id>
    <content type="html"><![CDATA[<p>C++里面的virtual关键字可以用虚函数声明，也可以用于虚继承。上一篇博客讲到了<a href="/blog/2012/11/29/virtual-function/">《虚函数》</a>，这篇博客就讲虚继承。</p>

<p>首先来看为什么需要虚继承。C++里面继承关系中有个很有名的继承结构，菱形继承，如下图所示</p>

<p><img class="center" src="/images/blogimages/2012/virtualinheritance/iostream.jpg"></p>

<p>普通继承，派生类包含了基类所有的非static成员。如果采用普通继承，在上图的iostream类中，实际上会存在两个ios基类。这样会带来很多问题，首先最简单的是空间浪费，iostream类中存在两个相同的ios类,然后是构造效率低，需要构造两个ios类。更严重的是调用基类中的函数时，存在二义性，当iostream调用ios的成员函数时，编译器无法知道是调用istream还是ostream中的ios。</p>

<p>C++的解决方案就是虚拟继承(Virtual Inheritance)。虚拟继承可以说成虚继承，在本文中，这两个词是等价的。 在虚拟继承下，只有一个共享的基类子对象被继承，而无论该基类在派生层次中出现多少次。共享的基类子对象被称为虚拟基类（virtual base class）。在虚拟继承下，基类子对象的复制及由此而引起的二义性都被消除了。</p>

<!-- more -->

<p>先看看如果没有续集继承的情况下，菱形继承会出现什么情况</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>普通继承的菱形继承  (inheritance.cc)</span> <a href='/code/2012/virtualinheritance/inheritance.cc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// 普继承关系下的菱形继承</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">top</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is top;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">printself</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in top::printself&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle2</span><span class="o">:</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">bottom</span><span class="o">:</span> <span class="k">public</span> <span class="n">middle1</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle2</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">bottom</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is bottom;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>    <span class="n">bottom</span> <span class="n">bo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bo</span><span class="p">.</span><span class="n">printself</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>没有使用虚继承，那么<code>bottom</code>类在调用<code>printself()</code>就存在二义性，所以在编译的时候会报下面这样的错误。</p>

<p><img class="center" src="/images/blogimages/2012/virtualinheritance/inheritance_error.jpg"></p>

<p>下面就是使用虚继承的例子</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>虚继承的菱形继承  (virtual_inheritance.cc)</span> <a href='/code/2012/virtualinheritance/virtual_inheritance.cc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// 使用虚拟继承的菱形继承</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">top</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is top;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">printself</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in top::printself&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle2</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">bottom</span><span class="o">:</span> <span class="k">public</span> <span class="n">middle1</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle2</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">bottom</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is bottom;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>    <span class="n">bottom</span> <span class="n">bo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bo</span><span class="p">.</span><span class="n">printself</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>编译和运行结果如下</p>

<p><img class="center" src="/images/blogimages/2012/virtualinheritance/virtual_inheritance.jpg"></p>

<p>上面的例子中，采用了虚继承，就没有出现二义性的问题了。虚拟继承声明时，virtual关键字可以放在继承关系的前面也可以放在后面，下面两种方式是等价的。</p>

<p><code>cpp
class middle1: virtual public top
class middle1: public virtual top
</code></p>

<h2 id="section">虚拟基类的构造</h2>

<p>由虚假继承引发的第一个问题是虚拟基类的构造，例如上面的例子中，构造iostream时，构造了istream和ostream两个基类，如果是虚继承关系，那么只有一个ios虚拟基类，那么谁来构造ios呢？</p>

<p>普通继承关系，基类由派生类构造。虚继承下，虚基类的构造由<em>最终派生类</em>显示调用，即iostream负责构造ios类, 中间类的构造函数将会被抑制，无法完成虚拟基类的构造。看一个虚基类的构造例子</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>中间类的构造函数被抑制  (constructor.cc)</span> <a href='/code/2012/virtualinheritance/constructor.cc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// 虚基类的构造, 中间类的构造函数被抑制</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">top</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">_name</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class='line'>            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is top(name); name is &quot;</span><span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">top</span><span class="p">()</span><span class="o">:</span><span class="n">_name</span><span class="p">(</span><span class="s">&quot;top&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is top(); name is &quot;</span><span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">printself</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in top::printself, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="n">string</span> <span class="n">_name</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle1</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle1, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle2</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle2</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="n">name</span><span class="p">){;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle2, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">bottom</span><span class="o">:</span> <span class="k">public</span> <span class="n">middle1</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle2</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">bottom</span><span class="p">()</span><span class="o">:</span><span class="n">middle1</span><span class="p">(</span><span class="s">&quot;bottom1&quot;</span><span class="p">),</span> <span class="n">middle2</span><span class="p">(</span><span class="s">&quot;bottom2&quot;</span><span class="p">){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is bottom;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>    <span class="n">bottom</span> <span class="n">bo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bo</span><span class="p">.</span><span class="n">printself</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>运行结果如下</p>

<p><img class="center" src="/images/blogimages/2012/virtualinheritance/constructor.jpg"></p>

<p>例子中，虽然bottom显示调用了middle1和middle2的构造函数，但是top的构造却不是有这两个中间类完成的,  因为top的成员name的值为“top”，实际上是由最终派生类bottom调用了top的默认构造函数<code>top()</code>。</p>

<p>要想完成虚基类top的构造，必须由最终派生类调用对应的虚基类构造函数。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>最终派生类调用虚基类的构造函数  (constructor1.cc)</span> <a href='/code/2012/virtualinheritance/constructor1.cc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// 最终类显示调用虚基类的构造函数</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">top</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">_name</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class='line'>            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is top; name is &quot;</span><span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">top</span><span class="p">()</span> <span class="p">{};</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">printself</span><span class="p">(){</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in top::printself, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="n">string</span> <span class="n">_name</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle1</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle1, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle1</span><span class="p">(){};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle2</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle2</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle2, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle2</span><span class="p">(){};</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">bottom</span><span class="o">:</span> <span class="k">public</span> <span class="n">middle1</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle2</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">bottom</span><span class="p">()</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="s">&quot;bottom&quot;</span><span class="p">){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is bottom;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">bottom1</span><span class="o">:</span> <span class="k">public</span> <span class="n">middle1</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle2</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">bottom1</span><span class="p">()</span><span class="o">:</span><span class="n">middle1</span><span class="p">(</span><span class="s">&quot;bazinga&quot;</span><span class="p">),</span><span class="n">middle2</span><span class="p">(</span><span class="s">&quot;bazinga&quot;</span><span class="p">),</span> <span class="n">top</span><span class="p">(</span><span class="s">&quot;bottom1&quot;</span><span class="p">){</span>
</span><span class='line'>            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is bottom1;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>    <span class="n">bottom</span> <span class="n">bo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bo</span><span class="p">.</span><span class="n">printself</span><span class="p">();</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;------&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bottom1</span> <span class="n">bo1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bo1</span><span class="p">.</span><span class="n">printself</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>运行结果如下</p>

<p><img class="center" src="/images/blogimages/2012/virtualinheritance/constructor1.jpg"></p>

<p>在上面的例子中，bottom和bottom1都显示调用了top的构造函数，但前者没有调用了中间类的默认构造函数，后者调用了构造虚基类的构造函数，但结果对于虚基类的构造，都是由最终派生类构造的。</p>

<p>上面是一个中间类构造函数定义方式的好例子，当middle1和middle2做为最终派生类的时候，那么使用带参数的构造函数，做为中间类时，就声明一个为protected的默认构造函数，它仅仅完成类自身的构造和非虚拟继承的基类构造，最终派生类也不需要显示地构造中间类。</p>

<h2 id="section-1">构造的顺序</h2>

<p>普通继承是按照声明顺序进行构造的，虚继承由于先要进行虚基类的构造，再进行中间类的构造，所以构造顺序是：按照声明顺序构造虚基类，再按照声明顺序构造中间类和普通基类。</p>

<p>先看两个虚基类构造的例子，</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>top_b类不采用虚继承  (constructor_seq.cc)</span> <a href='/code/2012/virtualinheritance/constructor_seq.cc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// 虚基类的构造顺序</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">top</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">_name</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class='line'>            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is top; name is &quot;</span><span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">top</span><span class="p">()</span> <span class="p">{};</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">printself</span><span class="p">(){</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in top::printself, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="n">string</span> <span class="n">_name</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle1</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle1, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle1</span><span class="p">(){};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle2</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle2</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle2, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle2</span><span class="p">(){};</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">top_b</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">top_b</span><span class="p">(){</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is top_b&quot;</span><span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle_b</span><span class="o">:</span> <span class="k">public</span> <span class="n">top_b</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle_b</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle_b&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">bottom</span><span class="o">:</span> <span class="k">public</span> <span class="n">middle1</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle2</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle_b</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">bottom</span><span class="p">()</span><span class="o">:</span><span class="n">middle1</span><span class="p">(</span><span class="s">&quot;bazinga&quot;</span><span class="p">),</span><span class="n">middle2</span><span class="p">(</span><span class="s">&quot;bazinga&quot;</span><span class="p">),</span> <span class="n">top</span><span class="p">(</span><span class="s">&quot;bottom1&quot;</span><span class="p">){</span>
</span><span class='line'>            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is bottom;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>    <span class="n">bottom</span> <span class="n">bo</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>输出结果</p>

<p><img class="center" src="/images/blogimages/2012/virtualinheritance/constructor_seq.jpg"></p>

<p>另外一个例子</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>top_b类采用虚继承  (constructor_seq1.cc)</span> <a href='/code/2012/virtualinheritance/constructor_seq1.cc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// 虚基类的构造顺序</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">top</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">_name</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class='line'>            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is top; name is &quot;</span><span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">top</span><span class="p">()</span> <span class="p">{};</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">printself</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in top::printself, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">_name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>    <span class="k">private</span><span class="o">:</span>
</span><span class='line'>        <span class="n">string</span> <span class="n">_name</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle1</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle1, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle1</span><span class="p">(){};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle2</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle2</span><span class="p">(</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="n">name</span><span class="p">){</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle2, name is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle2</span><span class="p">(){};</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">top_b</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">top_b</span><span class="p">(){</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is top_b&quot;</span><span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle_b</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top_b</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle_b</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle_b&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">bottom</span><span class="o">:</span> <span class="k">public</span> <span class="n">middle1</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle2</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle_b</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">bottom</span><span class="p">()</span><span class="o">:</span><span class="n">middle1</span><span class="p">(</span><span class="s">&quot;bazinga&quot;</span><span class="p">),</span><span class="n">middle2</span><span class="p">(</span><span class="s">&quot;bazinga&quot;</span><span class="p">),</span> <span class="n">top</span><span class="p">(</span><span class="s">&quot;bottom1&quot;</span><span class="p">){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is bottom;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>    <span class="n">bottom</span> <span class="n">bo</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>输出结果</p>

<p><img class="center" src="/images/blogimages/2012/virtualinheritance/constructor_seq1.jpg"></p>

<p>上面这个两个例子中可以看出top_b的构造顺序是不一样的。第一个例子中，做为普通基类，它放到了middle1和middle2后面构造，但在第二个例子中将它声明为了虚基类，它就放到了middle1和middle2前面构造了。</p>

<h2 id="section-2">虚拟基类成员的可视性</h2>

<p>派生类从它的基类所继承而来的成员可被分为以下三类：</p>

<ul>
  <li>虚拟基类实例，它们没有被中间类改写，可以直接调用。</li>
  <li>存在一个中间类，改写了基类的成员，那么最终派生类，调用时使用的是被中间类改写了的成员。</li>
  <li>存在二个或二个以上的中间类，重载了虚基类的成员，那么最终派生类，必须重载这个成员函数。  </li>
</ul>

<p>下面这个例子分别都涉及到了上面三种情况</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>虚继承中成员的可见性  (members.cc)</span> <a href='/code/2012/virtualinheritance/members.cc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// 成员函数的调用</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">printA</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in top::printA&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">printB</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in top::printB&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">printC</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in top::printC&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">printB</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in middle1::printB&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">printC</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in middle1::printC&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle2</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">printC</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in middle2::printC&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">bottom</span><span class="o">:</span> <span class="k">public</span> <span class="n">middle1</span><span class="p">,</span> <span class="k">public</span> <span class="n">middle2</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">void</span> <span class="n">printC</span><span class="p">(){</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is in bottom::printC&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>    <span class="n">bottom</span> <span class="n">bo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bo</span><span class="p">.</span><span class="n">printA</span><span class="p">();</span>
</span><span class='line'>    <span class="n">bo</span><span class="p">.</span><span class="n">printB</span><span class="p">();</span>
</span><span class='line'>    <span class="n">bo</span><span class="p">.</span><span class="n">printC</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>输出结果</p>

<p><img class="center" src="/images/blogimages/2012/virtualinheritance/members.jpg"></p>

<p>由例子可以看出，上面三点分别对应了printA, printB, printC三个函数。如果不在bottom中重载printC，那么编译是会报错。</p>

<h2 id="section-3">虚继承的实现原理</h2>

<p>虚继承中，是如何实现只有虚基类的，通过虚继承类的内存分布，可以一探究竟。下面所有关于虚继承内存分布的例子都是和平台相关的:</p>

<ul>
  <li>64位系统</li>
  <li>操作系统: ubuntu server 12.04</li>
  <li>gcc 4.6.3</li>
</ul>

<p>首先看一个简单的只有一层虚继承关系的例子</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>一层虚继承  (memory_middle1.cc)</span> <a href='/code/2012/virtualinheritance/memory_middle1.cc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// memory layout for one layer virtual inheritance.  </span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define COUT_FUNC(a, b) (cout &lt;&lt; a &lt;&lt; &quot; | &quot; &lt;&lt; b &lt;&lt; &quot; | &quot;) </span>
</span><span class='line'><span class="cp">#define COUT_CNUM(a, b) (cout &lt;&lt; a &lt;&lt; &quot; | &quot; &lt;&lt; b) </span>
</span><span class='line'><span class="cp">#define COUT_ARG3(a, b, c) (COUT_FUNC(a, b) &lt;&lt; c)</span>
</span><span class='line'><span class="cp">#define COMMENT(a) printf(&quot;\e[32m%s\e[0m\n&quot;, (a));</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">top</span><span class="p">(</span><span class="kt">long</span> <span class="n">i</span><span class="p">)</span><span class="o">:</span><span class="n">_i</span><span class="p">(</span><span class="n">i</span><span class="p">){}</span>
</span><span class='line'>        <span class="n">top</span><span class="p">(){}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">a</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is top::a()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">b</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is top::b()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">_i</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle1</span><span class="p">(</span><span class="kt">long</span> <span class="n">j</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span><span class="n">_j</span><span class="p">(</span><span class="n">j</span><span class="p">){}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">c</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle1::c()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">b</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle1::b()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">_j</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">func</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">long</span><span class="o">*</span> <span class="n">pobj</span><span class="p">;</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">pfunc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;---memory of middle1---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">middle1</span> <span class="n">m1</span><span class="p">(</span><span class="mi">101</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pobj</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">m1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span>
</span><span class='line'>    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;middle1[0]:    vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class='line'>    <span class="n">COUT_CNUM</span><span class="p">(</span><span class="s">&quot;middle1[1]:         _j&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])));</span>
</span><span class='line'>    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;    top[0]:    vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]));</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class='line'>    <span class="n">COUT_CNUM</span><span class="p">(</span><span class="s">&quot;    top[1]:         _i&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;---vtable of middle1---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// class middle1</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;middle1[0]: offset(-3)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to vbase&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to begin&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># typeinfo for middle1&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span>
</span><span class='line'>    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;               vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class='line'>    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;               vtab(1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;               vtab(2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">+</span><span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># next class offset to begin&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// class top</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;    top[0]: offset(-3)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to vbase&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to begin&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># typeinfo for middle1&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])));</span>
</span><span class='line'>    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;               vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;               vtab(1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># virtual thunk to middle1::b()&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;               vtab(2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">+</span><span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># end of vtable&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// VTT for middle1</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;      VTT:      vtt(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">+</span><span class="mi">3</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># for middle1&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;                vtt(1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span> <span class="mi">4</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">+</span><span class="mi">4</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># for top&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>运行结果如下图</p>

<p><img class="center" src="/images/blogimages/2012/virtualinheritance/memory_middle1.jpg"></p>

<p>在<code>middle1</code>中有两个vtable，分布指向了各自的虚函数表，而且这两个虚函数表实际是放在一张表，只是分别指向表中不同的位置。vtable的起始地址之前的3个地址分布存放了与虚继承相关的信息。</p>

<ul>
  <li><code>offset(-3)</code>存放的是从middle1对象到虚基类top的偏移。 本例中middle1到top的偏移存放在<code>0x401620</code>为16个字节，top到自身的偏移存放在<code>0x401650</code>为0。</li>
  <li><code>offset(-2)</code>存放的是当前这个对象到middle对象内存起始地址的偏移。 本例中middle1到自身的偏移存放在<code>0x401628</code>为0，top到middle起始位置的偏移<code>0x401658</code>为-16</li>
  <li><code>offset(-1)</code>存放的是middle1类的typeinfo地址，本例中<code>0x401630</code>, <code>0x401660</code>都存放的地址<code>0x4016e0</code>。在下面本例memory_middle1的符号列表图中可以看出middle1类的typeinfo地址(图中的红色部分)。</li>
</ul>

<p><em style="color:red"> 以上信息也有人称为虚继承表，里面存放了虚继承的虚基类地址，在程序寻找虚基类的时候，就是从本表中获取偏移地址，然后找到虚基类的。内存中只有一个虚基类，无论有多个派生类，所有派生类到这个基类，都是通过偏移找到虚基类。</em></p>

<p>如果派生类重载了虚基类的虚函数函数，在虚基类的虚函数对应的表现中，实际存放的是一个thunk地址（下图中的绿色部分）。例如本地中的重载的 <code>middle1::b()</code>，在地址<code>0x401670</code>存放的就是<code>virtual thunk for middle1::b()</code>。这个thunk仅调整this 指针并跳到<code>middle1::b()</code>, 所以当调用<code>top::b()</code>时，实际上就执行了<code>middle1::b()</code>。</p>

<p>在middle1的虚表结束的时候，放入了一个数值，这个数据与它的虚基类的offset(-2)存放的数字是一样的，都是表示虚基类到类对象内存的其实地址的偏移。而虚基类的虚表结束的地方，则存放的是0。</p>

<p>在虚表结束后，紧跟的是一张VTT表。VTT(Virtual Table Table)是一张记录虚表的表，图中黄色部分色部分标注出来的。它分布存放了middle1类所有的虚表起始地址。VTT表的地址也可以在memory_middle1的符号列表中找到(图中的黄色部分）</p>

<p>使用下面的这个命令可以参看符号列表</p>

<p><code>bash
nm -gC memory_middle1
</code></p>

<p>部分输出结果的截图</p>

<p><img class="center" src="/images/blogimages/2012/virtualinheritance/nm_memory_middle1.jpg"></p>

<p>根据上面的程序分析可以画出middle1的内存结构图如下:</p>

<p><img class="center" src="/images/blogimages/2012/virtualinheritance/memory_middle1_topo.jpg"></p>

<p>下面是一个菱形结构继承的例子代码，有兴趣的读者可以下载以后，按照上面的方面分析。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>菱形虚继承  (memory_bottom.cc)</span> <a href='/code/2012/virtualinheritance/memory_bottom.cc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// memory layout for diamond virtual inheritance</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define COUT_FUNC(a, b) (cout &lt;&lt; a &lt;&lt; &quot; | &quot; &lt;&lt; b &lt;&lt; &quot; | &quot;) </span>
</span><span class='line'><span class="cp">#define COUT_CNUM(a, b) (cout &lt;&lt; a &lt;&lt; &quot; | &quot; &lt;&lt; b) </span>
</span><span class='line'><span class="cp">#define COUT_ARG3(a, b, c) (COUT_FUNC(a, b) &lt;&lt; c)</span>
</span><span class='line'><span class="cp">#define COMMENT(a) printf(&quot;\e[32m%s\e[0m\n&quot;, (a));</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">top</span><span class="p">(</span><span class="kt">long</span> <span class="n">i</span><span class="p">)</span><span class="o">:</span><span class="n">_i</span><span class="p">(</span><span class="n">i</span><span class="p">){}</span>
</span><span class='line'>        <span class="n">top</span><span class="p">(){}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">a</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is top::a()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">b</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is top::b()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">_i</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle1</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle1</span><span class="p">(</span><span class="kt">long</span> <span class="n">j</span><span class="p">)</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span><span class="n">_j</span><span class="p">(</span><span class="n">j</span><span class="p">),</span><span class="n">_l</span><span class="p">(</span><span class="mi">151</span><span class="p">){}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">c</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle1::c()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">b</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle1::b()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">_j</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">_l</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">middle2</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">top</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">middle2</span><span class="p">(</span><span class="kt">long</span> <span class="n">k</span><span class="p">,</span> <span class="kt">long</span> <span class="n">m</span><span class="p">)</span><span class="o">:</span><span class="n">_k</span><span class="p">(</span><span class="n">k</span><span class="p">),</span><span class="n">_m</span><span class="p">(</span><span class="n">m</span><span class="p">){}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">d</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is middle2::d()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">_k</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">_m</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">bottom</span><span class="o">:</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">middle1</span><span class="p">,</span> <span class="k">virtual</span> <span class="k">public</span> <span class="n">middle2</span><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="n">bottom</span><span class="p">()</span><span class="o">:</span><span class="n">top</span><span class="p">(</span><span class="mi">5936l</span><span class="p">),</span> <span class="n">middle1</span><span class="p">(</span><span class="mi">5937l</span><span class="p">),</span> <span class="n">middle2</span><span class="p">(</span><span class="mi">5938l</span><span class="p">,</span> <span class="mi">5939l</span><span class="p">),</span> <span class="n">_n</span><span class="p">(</span><span class="mi">10000</span><span class="p">){}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">b</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is bottom::b()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">e</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is bottom::e()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">_n</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">func</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">long</span><span class="o">*</span> <span class="n">pobj</span><span class="p">;</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">pfunc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--- member of bottom---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bottom</span> <span class="n">bo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pobj</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">bo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;bo._n: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">bo</span><span class="p">.</span><span class="n">_n</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;   _j: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">bo</span><span class="p">.</span><span class="n">_j</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;   _l: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">bo</span><span class="p">.</span><span class="n">_l</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;   _i: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">bo</span><span class="p">.</span><span class="n">_i</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;   _k: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">bo</span><span class="p">.</span><span class="n">_k</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;   _m: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">bo</span><span class="p">.</span><span class="n">_m</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--- memory of bottom---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span>
</span><span class='line'>    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot; bottom[0]:    vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class='line'>    <span class="n">COUT_CNUM</span><span class="p">(</span><span class="s">&quot; bottom[1]:         _n&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])));</span>
</span><span class='line'>    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;middle1[0]:    vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]));</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class='line'>    <span class="n">COUT_CNUM</span><span class="p">(</span><span class="s">&quot;middle1[1]:         _j&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">COUT_CNUM</span><span class="p">(</span><span class="s">&quot;middle1[2]:         _l&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">])));</span>
</span><span class='line'>    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;    top[0]:    vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">]));</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class='line'>    <span class="n">COUT_CNUM</span><span class="p">(</span><span class="s">&quot;    top[1]:         _i&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">6</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])));</span>
</span><span class='line'>    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;middle2[0]:    vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">]));</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class='line'>    <span class="n">COUT_CNUM</span><span class="p">(</span><span class="s">&quot;middle2[1]:         _k&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">8</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">COUT_CNUM</span><span class="p">(</span><span class="s">&quot;middle2[2]:         _m&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">9</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--- vtable of bottom---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// class bottom</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot; bottom[0]: offset(-3)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to vbase&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to begin&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># typeinfo for bottom&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span>
</span><span class='line'>    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;               vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]));</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class='line'>    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;               vtab(1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;               vtab(2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">+</span><span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># next class offset to begin&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// class middle1</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;middle1[0]: offset(-3)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to vbase&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to begin&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># typeinfo for bottom&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])));</span>
</span><span class='line'>    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;               vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;               vtab(1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># virtual thunk to bottom::b()&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;               vtab(2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">+</span><span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># next class offset to begin&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// class top </span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;    top[0]: offset(-3)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to vbase&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to begin&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># typeinfo for middle1&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">])));</span>
</span><span class='line'>    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;               vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">]);</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;               vtab(1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># virtual thunk to bottom::b()&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;               vtab(2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span><span class="o">+</span><span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># end of vtable&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// class middle2</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;middle2[0]: offset(-3)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to vbase&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># offset to begin&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;            offset(-1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># typeinfo for bottom&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="n">func</span><span class="p">)((</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])));</span>
</span><span class='line'>    <span class="n">COUT_FUNC</span><span class="p">(</span><span class="s">&quot;               vtab(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">]);</span> <span class="n">pfunc</span><span class="p">();</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;               vtab(1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># end of vtable&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// vtt</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;      VTT:      vtt(0)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span><span class="o">+</span><span class="mi">2</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># address align&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;                vtt(1)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span><span class="o">+</span><span class="mi">3</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t\t</span><span class="s"># address align&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;                vtt(2)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span> <span class="mi">4</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span><span class="o">+</span><span class="mi">4</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># for bottom&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;                vtt(3)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span> <span class="mi">5</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span><span class="o">+</span><span class="mi">5</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># for middle1&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;                vtt(4)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span> <span class="mi">6</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span><span class="o">+</span><span class="mi">6</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># for top&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">COUT_ARG3</span><span class="p">(</span><span class="s">&quot;                vtt(5)&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="o">+</span> <span class="mi">7</span><span class="p">,</span> <span class="p">(</span><span class="kt">long</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">((</span><span class="kt">long</span><span class="o">*</span><span class="p">)(</span><span class="n">pobj</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span><span class="o">+</span><span class="mi">7</span><span class="p">));</span> <span class="n">COMMENT</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t\t</span><span class="s"># for middle2&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里仅仅画出内存的结构图如下</p>

<p><img class="center" src="/images/blogimages/2012/virtualinheritance/memory_bottom_topo.jpg"></p>

<p>在菱形虚继承的关系下，有下面几点需要注意：</p>

<ul>
  <li>在bottom类的内存中，middle2类是放在了top类后面，相对应的，在虚表和VTT表中，middle2都被放在了top类的后面。</li>
  <li>计算到虚基类的内存偏移时，计算的是当前类和虚父类的偏移，例如图中，bottom的偏移是bottom到middle1的偏移，不是到top类的偏移。而且只记录了到middle1的偏移，没有到middle2的偏移，原因应该是在声明继承关系时，middle1在middle2之前。</li>
  <li>计算到内存开始的偏移时，所有都是按照bottom的起始地址计算。所以两个偏移量不是对应的。</li>
</ul>

<h2 id="section-4">什么时候使用虚继承</h2>

<p>这是否意味着，应该尽可能地以虚拟方式派生我们的基类，以便层次结构中后续的派生类可能会需要虚拟继承，是这样吗？不！我们强烈反对，那样做对性能的影响会很严重（而且增加了后续类派生的复杂性）。</p>

<p>那么，我们从不应该使用虚拟继承吗？不是，在实践中几乎所有成功使用虚拟继承的例子中，凡是需要虚拟继承的整个层次结构子树，如iostream 库或Panda 子树，都是由同一个人或项目设计组一次设计完成的。</p>

<p>一般地，除非虚拟继承为一个眼前的设计问题提供了解决方案，否则建议不要使用它。</p>

<h2 id="section-5">参考</h2>

<ul>
  <li>《C++ Primer》中文第三版， 第18章：多继承和虚拟继承.</li>
  <li><a href="http://blog.csdn.net/wuhui_gdnt/article/details/6141405">GCC-3.4.6源代码学习笔记（142）</a></li>
  <li>白杨.<a href="http://baiy.cn/doc/cpp/inside_rtti.htm">RTTI、虚函数和虚基类的实现方式、开销分析及使用指导</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[虚函数]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2012/11/29/virtual-function/"/>
    <updated>2012-11-29T09:30:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2012/11/29/virtual-function</id>
    <content type="html"><![CDATA[<p>面试的时候，常常宣称自己是一个C++程序员，不免就会被问一些有关C++的问题，例如虚函数的实现原理；析构函数是否能定义为虚函数等等。很多时候都回答不上来，就总会以时间久了忘了，搪塞过去，面试完，可能回去查查答案，但也总是不求甚解。</p>

<p>既然有了博客，我就准备看看这些方面的内容，希望能记录下来，有所积累。于是就到网上查,或在书上找找，后来发现里面的内容太多了，不是一篇两篇博客就能写完的。于是没有办法，就只有硬着头皮写一个系列了。今天是第一部分虚函数和虚继承。</p>

<p>C++的关键字virtual只能用在两个地方，一是定义类的成员函数为虚函数，二是定义类的继承关系为虚继承。这两点的用处大相径庭，但是在设计思想上还是有一定的共同性的。这篇文章先讲虚函数，下一篇讲虚继承。</p>

<!-- more -->

<h2 id="section">虚函数</h2>

<p>虚，不实也。也可以理解为看到的和实际的不一样。虚函数存在的目的只有一个，那就是实现多态。关于多态，可以去参考各种教科书，上面都有详细的说明。虚函数在实现多态时，通过一种间接的运行时（而不是编译时）的机制激活（调用）的函数。下面看一个多态的简单例子。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>多态的简单例子  (polymorphism.cc)</span> <a href='/code/2012/polymorphism/polymorphism.cc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * polymorphism.cc: example of polymorphism</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">base</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">derived1</span><span class="o">:</span> <span class="k">public</span> <span class="n">base</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in derived1:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">derived2</span><span class="o">:</span> <span class="k">public</span> <span class="n">base</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in derived2:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">call_func</span><span class="p">(</span><span class="n">base</span><span class="o">*</span> <span class="n">pb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="n">pb</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="n">base</span><span class="o">*</span> <span class="n">pb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">base</span><span class="p">();</span>
</span><span class='line'>	<span class="n">base</span><span class="o">*</span> <span class="n">pd1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">derived1</span><span class="p">();</span>
</span><span class='line'>	<span class="n">base</span><span class="o">*</span> <span class="n">pd2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">derived2</span><span class="p">();</span>
</span><span class='line'>	<span class="n">call_func</span><span class="p">(</span><span class="n">pb</span><span class="p">);</span>
</span><span class='line'>	<span class="n">call_func</span><span class="p">(</span><span class="n">pd1</span><span class="p">);</span>
</span><span class='line'>	<span class="n">call_func</span><span class="p">(</span><span class="n">pd2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>运行结果如下<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>:</p>

<p><img class="center" src="/images/blogimages/2012/polymorphism/polymorphism_output.jpg"></p>

<p>从运行结果来看，函数<code>call_func()</code>最后实际调用的<code>f()</code>要到运行时，根据传入的参数，才能确定调用的是哪个函数。</p>

<p>那么虚函数的这种性质是如何实现的呢？答案是虚表(vtable)。具体的做法是，在对象的存储空间里面开辟一个指针，指针指向一个存放着虚函数地址的函数指针表。编译器在生成调用虚函数的指令时，按照偏移量，从虚表中取相应的函数指针进行调用。子类的虚函数会覆盖父类中对应虚函数在虚表中的位置，所以在调用的时候，就调用到了子类的函数了。也许这段话没有说太清楚，下面看一段代码或许会有帮助。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>测试虚表的例子  (vfun.cc)</span> <a href='/code/2012/polymorphism/vfun.cc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * test virtual functions</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">base</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">derived</span><span class="o">:</span> <span class="k">public</span> <span class="n">base</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in derived:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="n">fun</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="cp">#define VTAB(pclass) ((long*)(*(long*)(pclass)))</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="n">base</span><span class="o">*</span> <span class="n">pb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">base</span><span class="p">();</span>
</span><span class='line'>	<span class="n">pb</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">();</span>
</span><span class='line'>	<span class="n">base</span><span class="o">*</span> <span class="n">pd</span> <span class="o">=</span> <span class="p">(</span><span class="n">base</span><span class="o">*</span><span class="p">)</span> <span class="k">new</span> <span class="n">derived</span><span class="p">();</span>
</span><span class='line'>	<span class="n">pd</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--- call through vtable ---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>	<span class="n">fun</span> <span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pd</span><span class="p">);</span>
</span><span class='line'>	<span class="n">pfun</span><span class="p">();</span>
</span><span class='line'>	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pb</span><span class="p">);</span>
</span><span class='line'>	<span class="n">pfun</span><span class="p">();</span>
</span><span class='line'>	<span class="n">derived</span><span class="o">*</span> <span class="n">pd_fake</span> <span class="o">=</span> <span class="p">(</span><span class="n">derived</span><span class="o">*</span><span class="p">)</span><span class="n">pb</span><span class="p">;</span>
</span><span class='line'>	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pd_fake</span><span class="p">);</span>
</span><span class='line'>	<span class="n">pfun</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pd</span><span class="p">);</span>
</span><span class='line'>	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;value of *pfun is: &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">pfun</span> <span class="o">&lt;&lt;</span>  <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pd</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;value of *pfun is: &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">pfun</span> <span class="o">&lt;&lt;</span>  <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div> </p>

<p>输出结果如下：</p>

<p><img class="center" src="/images/blogimages/2012/polymorphism/vfun_output.jpg"></p>

<p>上面这段代码的第20行，通过定义指针的方式<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，直接访问虚表，发现它的输出与通过对象调用是一直的，而且指针的类型无关。由上面的代码也可以看出虚表在对象的内存空间中是怎么分布的。对象的起始地址，就是虚表指针。虚表的最后一项为0，代表虚表结束。上面程序的最后一项输出可以看出来。</p>

<p>用一张图来说明情况。</p>

<p><img class="center" src="/images/blogimages/2012/polymorphism/one_derived.jpg"></p>

<p>在多个虚函数的情况下，子类仅仅覆盖在子类重载的虚函数，而子类新定义的虚函数，加入到虚表的最后。下面这个例子就是多个虚函数的情况。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>多个虚函数  (vfun1.cc)</span> <a href='/code/2012/polymorphism/vfun1.cc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// test virtual functions</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">base</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f0</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base:f0&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">class</span> <span class="nc">derived</span><span class="o">:</span> <span class="k">public</span> <span class="n">base</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in derived:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f1</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in derived:f1&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="n">fun</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define VTAB(pclass) ((long*)(*(long*)(pclass)))</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="n">base</span><span class="o">*</span> <span class="n">pb_real</span> <span class="o">=</span> <span class="k">new</span> <span class="n">base</span><span class="p">();</span>
</span><span class='line'>	<span class="n">pb_real</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">();</span>
</span><span class='line'>	<span class="n">base</span><span class="o">*</span> <span class="n">pb</span> <span class="o">=</span> <span class="p">(</span><span class="n">base</span><span class="o">*</span><span class="p">)</span> <span class="k">new</span> <span class="n">derived</span><span class="p">();</span>
</span><span class='line'>	<span class="n">pb</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">();</span>
</span><span class='line'>	<span class="n">pb</span><span class="o">-&gt;</span><span class="n">f0</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--- call function through vtable ---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>	<span class="n">fun</span> <span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pb</span><span class="p">);</span>
</span><span class='line'>	<span class="n">pfun</span><span class="p">();</span>
</span><span class='line'>	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pb</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>	<span class="n">pfun</span><span class="p">();</span>
</span><span class='line'>	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pb</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>	<span class="n">pfun</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>输出结果：</p>

<p><img class="center" src="/images/blogimages/2012/polymorphism/vfun1_output.jpg"></p>

<p>虚表的组织结构如下:</p>

<p><img class="center" src="/images/blogimages/2012/polymorphism/more_derived.jpg"></p>

<p>由图中可以看出，子类的<code>f()</code>覆盖了基类的<code>f()</code>，而基类的<code>f0()</code>依然存在，子类的<code>f1()</code>添加到了虚表的最后。</p>

<p>当有多个基类时，子类会为每个基类添加一个虚表指针，指针的顺序按照类定义时的声明顺序。下面这个例子就是这样的。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>虚函数多重继承  (vfun2.cc)</span> <a href='/code/2012/polymorphism/vfun2.cc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// test virtual functions</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">father_b1</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in father of base1:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">fbf</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in father of base1:fbf&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">father1_b1</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in father1 of base1:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f1bf</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in father1 of base1:f1bf&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">base</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">bf0</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base:f0&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">base1</span><span class="o">:</span> <span class="k">public</span> <span class="n">father_b1</span><span class="p">,</span> <span class="k">public</span> <span class="n">father1_b1</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base1:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">b1f0</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base1:f0&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">derived</span><span class="o">:</span> <span class="k">public</span> <span class="n">base1</span><span class="p">,</span> <span class="k">public</span> <span class="n">base</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in derived:f&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f1</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in derived:f1&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="n">fun</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define VTAB(pclass) ((long*)(*(long*)(pclass)))</span>
</span><span class='line'><span class="cp">#define VTAB1(pclass) ((long*)(*(((long*)(pclass)) + 1)))</span>
</span><span class='line'><span class="cp">#define VTAB2(pclass) ((long*)(*(((long*)(pclass)) + 2)))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="n">derived</span><span class="o">*</span> <span class="n">pd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">derived</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--- vtable ---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>	<span class="n">fun</span> <span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pd</span><span class="p">);</span>
</span><span class='line'>	<span class="n">pfun</span><span class="p">();</span>
</span><span class='line'>	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pd</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>	<span class="n">pfun</span><span class="p">();</span>
</span><span class='line'>	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pd</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>	<span class="n">pfun</span><span class="p">();</span>
</span><span class='line'>	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">VTAB</span><span class="p">(</span><span class="n">pd</span><span class="p">)</span><span class="o">+</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>	<span class="n">pfun</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--- vtable + 1 ---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="n">VTAB1</span><span class="p">(</span><span class="n">pd</span><span class="p">);</span>
</span><span class='line'>	<span class="n">pfun</span><span class="p">();</span>
</span><span class='line'>	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">VTAB1</span><span class="p">(</span><span class="n">pd</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>	<span class="n">pfun</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--- vtable + 2 ---&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="n">VTAB2</span><span class="p">(</span><span class="n">pd</span><span class="p">);</span>
</span><span class='line'>	<span class="n">pfun</span><span class="p">();</span>
</span><span class='line'>	<span class="n">pfun</span> <span class="o">=</span> <span class="p">(</span><span class="n">fun</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">VTAB2</span><span class="p">(</span><span class="n">pd</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>	<span class="n">pfun</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>输出结果：</p>

<p><img class="center" src="/images/blogimages/2012/polymorphism/vfun2_output.jpg"></p>

<p>这是一个比较复杂的继承关系了，可以看出最后的<code>derived</code>类里面已经有3个虚表指针了，也就是说，子类会讲所有的父类的虚表继承下来，并将自己的虚函数添加到第一个虚表的最后。还有一点，就是子类的虚函数会覆盖所有基类的对应虚函数，图中的<code>derived::f()</code>就覆盖了3处。其组织结构如下：</p>

<p><img class="center" src="/images/blogimages/2012/polymorphism/more_bases.jpg"></p>

<h2 id="section-1">构造函数和析构函数的调用顺序</h2>

<p>这个问题本来和虚函数没有关系，但是为了后面解释关于构造函数为什么不能声明为virtual，添加到这里的。</p>

<p>构造函数的调用顺序是，先调用父类的构造函数，然后调用成员变量的构造函数，最后调用子类自身的构造函数，多个父类时，按照父类的继承时的声明顺序调用，成员变量的构造函数也按照声明顺序调用。</p>

<p>析构函数的调用顺序与构造函数的正好相反，先调用子类自身的析构函数，然后是成员变量的析构函数，最后是父类的构造函数，多个父类时，按照父类的继承时的声明的相反顺序调用，成员变量的构造函数也按照声明的相反顺序调用。</p>

<p>下面是一段测试调用顺序的代码</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>构造和析构函数的调用顺序  (constructor_destructor_order.cc)</span> <a href='/code/2012/polymorphism/constructor_destructor_order.cc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 研究构造函数的调用顺序</span>
</span><span class='line'><span class="cm"> *  1. 首先调用基类的构造函数（如果有基类）；如果有多个基类，则按基类被列出的顺序调用；</span>
</span><span class='line'><span class="cm"> *  2. 调用这个类的成员对象的构造函数（如果有的话）；如果有多个成员对象，则按成员对象定义的顺序被调用（与参数列表中列出的顺序无关）；</span>
</span><span class='line'><span class="cm"> *  3. 最后调用这个类自身的构造函数；</span>
</span><span class='line'><span class="cm"> *  4. 析构函数正好相反;</span>
</span><span class='line'><span class="cm"> *  注意：如果有虚基类，则先调用虚基类的构造函数。在调用基类的构造函数，如果有多个虚基类，则按列出的顺序调用； </span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">father_base_a</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>   <span class="n">father_base_a</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is father_base_a;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>   <span class="k">virtual</span> <span class="o">~</span><span class="n">father_base_a</span><span class="p">()</span> <span class="p">{</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;This is ~father_base_a&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">base_a</span><span class="o">:</span> <span class="k">public</span> <span class="n">father_base_a</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>   <span class="n">base_a</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is base_a;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>   <span class="k">virtual</span> <span class="o">~</span><span class="n">base_a</span><span class="p">()</span> <span class="p">{</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;This is ~base_a&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">base_b</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>   <span class="n">base_b</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is base_b;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>   <span class="k">virtual</span> <span class="o">~</span><span class="n">base_b</span><span class="p">()</span> <span class="p">{</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;This is ~base_b&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">member_a</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>   <span class="n">member_a</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is meber_a;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>   <span class="k">virtual</span> <span class="o">~</span><span class="n">member_a</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is ~meber_a;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">member_b</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>   <span class="n">member_b</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is member_b;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'>   <span class="k">virtual</span> <span class="o">~</span><span class="n">member_b</span><span class="p">(){</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is ~meber_b;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">base_b</span><span class="p">,</span> <span class="k">public</span> <span class="n">base_a</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>   <span class="n">member_a</span> <span class="n">ma</span><span class="p">;</span>
</span><span class='line'>   <span class="n">derived</span><span class="p">(){</span>
</span><span class='line'>      <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;This is derived;&quot;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">virtual</span> <span class="o">~</span><span class="n">derived</span><span class="p">()</span> <span class="p">{</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;this is ~derived()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>   <span class="n">member_b</span> <span class="n">mb</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">derived</span> <span class="n">de</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;---------&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>输出结果
<img class="center" src="/images/blogimages/2012/polymorphism/constructor_destructor_order.jpg"></p>

<p>从输出结果可以看出，先调用了<code>base_b</code>的构造函数，然后调用<code>base_a</code>的构造函数（但得先调用<code>base_a</code>的父类<code>father_base_a</code>），然后是成员<code>member_a</code>和<code>member_b</code>的构造函数，最后是<code>derived</code>自己的构造函数。析构的过程正好相反。</p>

<h2 id="section-2">构造函数不能声明为虚函数</h2>

<p>这也是面试中常被问道的一个问题。原因应该有两个  </p>

<ol>
  <li>在构造函数之前，类的对象是不存在的，那么也没有vtable，也无法通过vtable找到虚函数。所有无法定义为虚函数。</li>
  <li>构造函数是先调用父类，最后才是子类的构造，因为子类的内存布局是基于父类。如果使用虚构函数，那么在调用父类的构造函数时，实际调用的是子类的构造函数，那么就无法完成对象的构造。</li>
  <li>虚函数的主要目的是多态，运行时确定调用那个函数，对象的构造过程是确定的，使用虚函数没有意义。</li>
</ol>

<p>实际上，如果将构造函数声明为虚函数，编译时，gcc会报错。</p>

<p><img class="center" src="/images/blogimages/2012/polymorphism/constructor_error.jpg"></p>

<h2 id="section-3">析构函数声明为虚函数</h2>

<p>在基类的声明中一般都应该将析构函数声明为虚函数。首先由于析构函数没有构造函数的问题，所以是可以声明为虚函数的。其次，可能程序需要利用析构函数为虚函数的特性，才能讲资源释放完全。</p>

<p>首先来看一个代码例子</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>析构函数为虚函数  (destructor_virtual.cc)</span> <a href='/code/2012/polymorphism/destructor_virtual.cc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// 分析析构函数为虚函数时的特性</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">base</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span>	<span class="o">~</span><span class="n">base</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base::~base()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">derived</span><span class="o">:</span> <span class="k">public</span> <span class="n">base</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="o">~</span><span class="n">derived</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in derived::~derived&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">base1</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="o">~</span><span class="n">base1</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in base1::~base1()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">derived1</span><span class="o">:</span> <span class="k">public</span> <span class="n">base1</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="o">~</span><span class="n">derived1</span><span class="p">(){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in derived1::~derived1&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>	<span class="n">base</span> <span class="o">*</span><span class="n">pbase</span> <span class="o">=</span> <span class="k">new</span> <span class="n">derived</span><span class="p">();</span>
</span><span class='line'>	<span class="k">delete</span> <span class="n">pbase</span><span class="p">;</span>
</span><span class='line'>	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--------&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>	<span class="n">base1</span> <span class="o">*</span><span class="n">pbase1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">derived1</span><span class="p">();</span>
</span><span class='line'>	<span class="k">delete</span> <span class="n">pbase1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>运行结果</p>

<p><img class="center" src="/images/blogimages/2012/polymorphism/destructor_virtual.jpg"></p>

<p>由结果可以看出，由于<code>base1</code>的析构函数没有声明为虚函数，在<code>delete pbase1</code>时，没有调用<code>derived1</code>的析构函数，那么在<code>derived1</code>中申请的资源就无法释放。而因为<code>base</code>类中的修改函数声明为了虚函数，就没有这样的问题。</p>

<h2 id="section-4">什么时候使用虚函数</h2>

<p>包含了虚函数的成员函数的对象，由于需要存放虚表地址，那么就比不包含虚函数的对象，多出了一块空间，32位为4个字节，64位为8个字节。如果没有用到多态，而且有大量的对象存在时，需要考虑这个开销。</p>

<p>在需要使用多态，或在定义接口时，需要使用虚函数。特别是定义接口时，最好使用纯虚函数。</p>

<p>另外，将私有成员函数声明为虚函数，可以通过对象的虚表指针的方式访问，造成了封装的不严密。例如，通过在前面的例子中定义的<code>VTAB</code>宏，就可以直接获取函数指针，然后调用函数，这种调用是需要检查这个成员函数的性质的。</p>

<h2 id="section-5">同名函数隐藏规则</h2>

<p>在父类和子类中如果存在同名的函数，那么一定要小心了，这时需要重载父类中所有同名的函数。首先来看一个关于同名函数的例子</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>诡异的同名函数  (same_name.cc)</span> <a href='/code/2012/polymorphism/same_name.cc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 测试c++隐藏规则：</span>
</span><span class='line'><span class="cm"> * （1）如果派生类的函数与基类的函数同名，但是参数不同。</span>
</span><span class='line'><span class="cm"> *      不论有无virtual关键字，基类的函数将被隐藏（注意别与重载混淆）。</span>
</span><span class='line'><span class="cm"> * （2）如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数</span>
</span><span class='line'><span class="cm"> *      没有virtual关键字。此时，基类的函数被隐藏（注意别与覆盖混淆）。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Base</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::f(float) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::g(float) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">h</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::h(float) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">m</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::m(float) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::f(float) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::g(int) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">h</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::h(float) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>	<span class="kt">void</span> <span class="n">m</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::m(int) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="n">Derived</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>	<span class="n">Base</span> <span class="o">*</span><span class="n">pb</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">;</span>
</span><span class='line'>	<span class="n">Derived</span> <span class="o">*</span><span class="n">pd</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">;</span>
</span><span class='line'>	<span class="c1">// Good : behavior depends solely on type of the object</span>
</span><span class='line'>	<span class="n">pb</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">);</span> <span class="c1">// Derived::f(float) 3.14</span>
</span><span class='line'>	<span class="n">pd</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">);</span> <span class="c1">// Derived::f(float) 3.14</span>
</span><span class='line'>	<span class="c1">// Bad : behavior depends on type of the pointer</span>
</span><span class='line'>	<span class="n">pb</span><span class="o">-&gt;</span><span class="n">g</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">);</span> <span class="c1">// Base::g(float) 3.14</span>
</span><span class='line'>	<span class="n">pd</span><span class="o">-&gt;</span><span class="n">g</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">);</span> <span class="c1">// Derived::g(int) 3 (surprise!)</span>
</span><span class='line'>	<span class="c1">// Bad : behavior depends on type of the pointer</span>
</span><span class='line'>	<span class="n">pb</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">);</span> <span class="c1">// Base::h(float) 3.14 (surprise!)</span>
</span><span class='line'>	<span class="n">pd</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">);</span> <span class="c1">// Derived::h(float) 3.14</span>
</span><span class='line'>	<span class="c1">// Bad : behavior depends on type of the pointer</span>
</span><span class='line'>	<span class="n">pb</span><span class="o">-&gt;</span><span class="n">m</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">);</span> <span class="c1">// Base::m(float) 3.14</span>
</span><span class='line'>	<span class="n">pd</span><span class="o">-&gt;</span><span class="n">m</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">);</span> <span class="c1">// Derived::m(int) 3 (surprise!)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>输出结果</p>

<p><img class="center" src="/images/blogimages/2012/polymorphism/same_name.jpg"></p>

<p>注意在用不同类型的类指针调用<code>g()</code>,<code>h()</code>,<code>m()</code>三个函数时，程序实际的行为。</p>

<p>这样会带来一个问题，就是在继承后，重载了父类的一个函数，或在定义了一个函数，那么父类中与这个函数同名的函数都会被隐藏，子类的对象无法调用这些函数。</p>

<p>下面是一个例子</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>诡异的同名函数  (same_name1.cc)</span> <a href='/code/2012/polymorphism/same_name1.cc'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// 测试隐藏规则：</span>
</span><span class='line'><span class="c1">// 子类重载同名函数, 无论是否声明为虚函数，父类的所有同名函数将会被隐藏 </span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Base</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::f(float) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">,</span> <span class="kt">float</span> <span class="n">y</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Base::f(float, float) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Derived</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Base</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">){</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Derived::f(float) &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>	<span class="n">Derived</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>	<span class="n">Base</span> <span class="o">*</span><span class="n">pb</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">;</span>
</span><span class='line'>	<span class="n">Derived</span> <span class="o">*</span><span class="n">pd</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">;</span>
</span><span class='line'>	<span class="n">pb</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">,</span> <span class="mf">3.14f</span><span class="p">);</span>
</span><span class='line'>	<span class="n">pd</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">(</span><span class="mf">3.14f</span><span class="p">,</span> <span class="mf">3.14f</span><span class="p">);</span> <span class="c1">// Compile error</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在编译的时候会报这样的错误</p>

<p><img class="center" src="/images/blogimages/2012/polymorphism/same_name1_error.jpg"></p>

<h2 id="section-6">总结</h2>

<ol>
  <li>虚函数是通过虚表实现运行时绑定。虚表存放在对象的起始位置。子类继承父类时，会将所有的虚表就继承下来，所有子类可能有多个虚表指针。如果子类重载了父类的某个虚函数，那么子类将重写<em style="color:red">所有虚表</em>中该函数的地址，子类将自己的虚函数添加到第一个虚表的最后。</li>
  <li>构造函数不能声明为虚函数，析构函数可以声明为虚函数，当类包含是虚函数的成员函数时，析构函数<em style="color:red">必须声明为虚函数</em>。</li>
  <li>当子类和父类有同名函数时，父类的所有与这个函数同名的函数都将被隐藏，子类的对象无法访问到。</li>
</ol>

<h3 id="section-7">参考</h3>

<p>本文参考了以下文章：</p>

<ol>
  <li>陈皓.<a href="http://blog.csdn.net/haoel/article/details/1948051/">C++ 虚函数表解析</a></li>
  <li><a href="http://www.cnblogs.com/xd502djj/archive/2010/09/22/1832912.html">C++ Virtual详解</a></li>
</ol>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>系统为ubuntu 12.04 server 64bit, 编译器为gcc 4.6.3 <a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>程序运行在64位机器上，所以使用long进行强制转换获取指针，如果在32位服务器上，就应该用int。<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
