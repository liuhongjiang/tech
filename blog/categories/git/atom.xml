<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: git | 刘洪江的流水帐]]></title>
  <link href="http://liuhongjiang.github.com/tech/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://liuhongjiang.github.com/tech/"/>
  <updated>2015-05-09T16:21:46+08:00</updated>
  <id>http://liuhongjiang.github.com/tech/</id>
  <author>
    <name><![CDATA[刘洪江]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git reference]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2015/05/09/git-reference/"/>
    <updated>2015-05-09T14:35:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2015/05/09/git-reference</id>
    <content type="html"><![CDATA[<h2 id="git-ref">git ref</h2>

<p>可以使用下面的命令查看ref</p>

<p><code>bash
git show HEAD
</code></p>

<h2 id="head-vs-orighead">HEAD vs ORIG_HEAD</h2>
<p>HEAD is (direct or indirect, i.e. symbolic) reference to the current commit. It is a commit that you have checked in the working directory (unless you made some changes, or equivalent), and it is a commit on top of which “git commit” would make a new one. Usually HEAD is symbolic reference to some other named branch; this branch is currently checked out branch, or current branch. HEAD can also point directly to a commit; this state is called “detached HEAD”, and can be understood as being on unnamed, anonymous branch.</p>

<p><strong>ORIG_HEAD is previous state of HEAD, set by commands that have possibly dangerous behavior, to be easy to revert them.</strong> It is less useful now that Git has reflog: HEAD@{1} is roughly equivalent to ORIG_HEAD (HEAD@{1} is always last value of HEAD, ORIG_HEAD is last value of HEAD before dangerous operation).</p>

<p>“pull” or “merge” always leaves the original tip of the current branch in ORIG_HEAD.</p>

<p>HEAD is a moving pointer. Sometimes it means the current branch, sometimes it doesn’t.</p>

<p>So HEAD is NOT a synonym for “current branch” everywhere already.</p>

<p>HEAD means “current” everywhere in git, but it does not necessarily mean “current branch” (i.e. detached HEAD).</p>

<p>But it almost always means the “current commit”.
It is the commit “git commit” builds on top of, and “git diff –cached” and “git status” compare against.
It means the current branch only in very limited contexts (exactly when we want a branch name to operate on — resetting and growing the branch tip via commit/rebase/etc.).</p>

<p>http://stackoverflow.com/questions/964876/head-and-orig-head-in-git</p>

<h2 id="detached-head">detached head</h2>

<p>Detached head means you are no longer on a branch, you have checked out a single commit in the history (in this case the commit previous to HEAD, i.e. HEAD^).</p>

<p><a href="http://stackoverflow.com/questions/10228760/fix-a-git-detached-head">fix a git detached head</a></p>

<p>创建一个detach head，关注命令的输出</p>

<p>```bash
$git checkout head^
You are in ‘detached HEAD’ state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.</p>

<p>If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:</p>

<p>git checkout -b new_branch_name</p>

<p>HEAD is now at 635b2b1… Init the test.md file
```</p>

<h3 id="specifying-revision">specifying revision</h3>

<p>比较常用的</p>

<ul>
  <li>
    <p><code>&lt;sha1&gt;</code> </p>

    <p>dae86e1950b1277e545cee180551750029cfe735 and dae86e both name the same commit object if there is no other object in your repository whose object name starts with dae86e.</p>
  </li>
  <li>
    <p><code>&lt;refname&gt;</code>, e.g. master, heads/master, refs/heads/master</p>

    <p>If $GIT_DIR/<name> exists, that is what you mean (this is usually useful only for HEAD, FETCH_HEAD, ORIG_HEAD, MERGE_HEAD and CHERRY_PICK_HEAD);</name></p>
  </li>
  <li>
    <p><code>&lt;refname&gt;@{&lt;n&gt;}</code>, e.g. master@{1}</p>

    <p>从refname的最新的提交倒数n个提交。
  <code>@{&lt;n&gt;}, e.g. @{1}</code>， 当前的branch</p>
  </li>
  <li>
    <p><code>&lt;refname&gt;@{upstream}, e.g. master@{upstream}, @{u}</code></p>

    <p>ref的远端最新提交</p>
  </li>
  <li>
    <p><code>&lt;rev&gt;^, e.g. HEAD^, v1.5.1^0</code></p>

    <p>A suffix <code>^</code> to a revision parameter means the first parent of that commit object. </p>

    <p><code>^&lt;n&gt;</code> means the <code>&lt;n&gt;th</code> parent, <code>&lt;rev&gt;^</code> is equivalent to <code>&lt;rev&gt;^1</code>.</p>

    <p>As a special rule, <code>&lt;rev&gt;^0</code> means the commit itself.</p>

    <p>注意<code>head^2</code>的意思是head的第二个parent，不是parent的parent</p>

    <p><code>&lt;rev&gt;^^</code>的意思是第一个parent的第一个parent，等价于<code>&lt;rev&gt;^1^1</code></p>
  </li>
  <li>
    <p><code>&lt;rev&gt;~&lt;n&gt;, e.g. master~3</code></p>

    <p>A suffix <code>~&lt;n&gt;</code> to a revision parameter means the commit object that is the <n>th generation grand-parent of the named commit object, following only the first parents.</n></p>

    <p><code>&lt;rev&gt;~3</code> is equivalent to <code>&lt;rev&gt;^^^</code> which is equivalent to <code>&lt;rev&gt;^1^1^1</code>. </p>

    <p>注意，这一句“following only the first parents.”，这种方式只会追踪第一个parent。具体可以参考下面这个例子。</p>
  </li>
</ul>

<p>Here is an illustration, by Jon Loeliger. Both commit nodes B and C are parents of commit node A. Parent commits are ordered left-to-right.</p>

<p>```
G   H   I   J
 \ /     \ /
  D   E   F
   \  |  / \
    \ | /   |
     |/    |
      B     C
       \   /
        \ /
         A</p>

<p>A =      = A^0
B = A^   = A^1     = A~1
C = A^2  = A^2
D = A^^  = A^1^1   = A~2
E = B^2  = A^^2
F = B^3  = A^^3
G = A^^^ = A^1^1^1 = A~3
H = D^2  = B^^2    = A^^^2  = A~2^2
I = F^   = B^3^    = A^^3^
J = F^2  = B^3^2   = A^^3^2
```</p>

<p>以下是git的man page：
<a href="http://schacon.github.io/git/git-rev-parse#_specifying_revisions">specifying revisions</a>
or 
<a href="http://git-scm.com/docs/git-rev-parse#_specifying_revisions">specifying revisions</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git commit message convention]]></title>
    <link href="http://liuhongjiang.github.com/tech/blog/2015/04/30/git-commit-message-convention/"/>
    <updated>2015-04-30T08:58:00+08:00</updated>
    <id>http://liuhongjiang.github.com/tech/blog/2015/04/30/git-commit-message-convention</id>
    <content type="html"><![CDATA[<p>I collect all information for internet, I did not write a single word.</p>

<p>A well-crafted git commit message is the best way to communicate context about a change to fellow developers (and indeed to their future selves)</p>

<h2 id="examples">examples</h2>
<p>example of commit messages:</p>

<pre><code>Capitalized, short (50 chars or less) summary

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase can get confused if you run the 
two together.
   
- Bullet points are okay, too
- Typically a hyphen or asterisk is used for the bullet, followed by a
  single space, with blank lines in between, but conventions vary here
- Use a hanging indent
</code></pre>

<!-- more -->
<p>Another one:</p>

<pre><code>Summarize changes in around 50 characters or less

More detailed explanatory text, if necessary. Wrap it to about 72
characters or so. In some contexts, the first line is treated as the
subject of the commit and the rest of the text as the body. The
blank line separating the summary from the body is critical (unless
you omit the body entirely); various tools like `log`, `shortlog`
and `rebase` can get confused if you run the two together.

Explain the problem that this commit is solving. Focus on why you
are making this change as opposed to how (the code explains that).
Are there side effects or other unintuitive consequenses of this
change? Here's the place to explain them.

Further paragraphs come after blank lines.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, preceded
  by a single space, with blank lines in between, but conventions
  vary here

If you use an issue tracker, put references to them at the bottom,
like this:

Resolves: #123
See also: #456, #789
</code></pre>

<h2 id="subject">subject</h2>
<ul>
  <li>Separate subject from body with a blank line</li>
  <li>Limit the subject line to 50 characters</li>
  <li>Capitalize the subject line</li>
  <li>Do not end the subject line with a period</li>
  <li>Use the imperative mood in the subject line: “Fix bug” and not “Fixed bug” or “Fixes bug.”</li>
  <li>The subject should be a concise summary of the changes introduced by the commit</li>
</ul>

<h2 id="body">body</h2>
<ul>
  <li>Wrap the body at 72 characters</li>
  <li>Use the body to explain what and why vs. how</li>
  <li>Try to answer the following questions in your commit message
    <ul>
      <li>Why is this change necessary?</li>
      <li>How does it address the issue?</li>
      <li>What side effects does this change have?</li>
    </ul>
  </li>
</ul>

<h2 id="others">others</h2>
<ul>
  <li>Never use the <code>-m &lt;msg&gt;</code> or <code>--message=&lt;msg&gt;</code> flag to git commit</li>
  <li>The Linux kernel and git itself are great examples</li>
</ul>

<h2 id="reference">reference</h2>
<p>These are the article I got above good practice of git commit messages. Read it carefully.</p>

<ul>
  <li><a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">A Note About Git Commit Messages</a></li>
  <li><a href="https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message">5 Useful Tips For A Better Commit Message</a></li>
  <li><a href="http://chris.beams.io/posts/git-commit/">How to Write a Git Commit Message</a></li>
  <li><a href="https://github.com/torvalds/linux/pull/17#issuecomment-5659933">real stickler for a good commit message, Linus Torvalds</a></li>
  <li><a href="https://github.com/blog/926-shiny-new-commit-styles">Shiny new commit styles</a></li>
</ul>

<h2 id="git-commit-message-line-wrapping-in-idea">git commit message line wrapping in IDEA</h2>
<p><a href="https://youtrack.jetbrains.com/issue/IDEA-53615#comment=27-446912">git commit message line wrapping</a></p>

<p>if you turn on the line margin in the commit dialog in the Setting | Version Control, commit dialog text area becomes monospaced. 
Moreover, if you turn on “Wrap when typing reaches right margin” in Settings | Code style | General, it will affect the commit dialog text area as well (however, it will affect the main editor too).</p>

<p>A separate setting to wrap when text reaches right margin has been added to Settings | Version Control.</p>

]]></content>
  </entry>
  
</feed>
